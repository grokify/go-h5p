{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"H5P Go SDK \u00b6 A Go library for creating, manipulating, and validating H5P (HTML5 Package) content, with support for the official H5P file format and schemas. \u2728 Features \u00b6 \ud83d\udce6 Full H5P Package Support : Create and extract .h5p ZIP files with proper structure \ud83d\udd12 Type-Safe Schema Implementation : Official H5P MultiChoice schema with Go structs \ud83c\udfd7\ufe0f Question Set Builder : Fluent API for building interactive question sets \u2705 Validation : Built-in validation for H5P compliance \ud83c\udfaf Multiple Question Types : Support for single-answer and multi-answer questions \ud83d\udccb Official Schema Compliance : Uses actual H5P semantics definitions \ud83d\udd04 JSON Serialization : Full marshaling/unmarshaling support \ud83d\ude80 Quick Start \u00b6 go get github.com/grokify/h5p-go package main import ( \"fmt\" \"log\" \"github.com/grokify/h5p-go\" ) func main () { // Create a question set using the builder pattern builder := h5p . NewQuestionSetBuilder () answers := [] h5p . Answer { h5p . CreateAnswer ( \"Paris\" , true ), h5p . CreateAnswer ( \"London\" , false ), h5p . CreateAnswer ( \"Berlin\" , false ), h5p . CreateAnswer ( \"Madrid\" , false ), } questionSet , err := builder . SetTitle ( \"Geography Quiz\" ). SetProgressType ( \"textual\" ). SetPassPercentage ( 60 ). SetIntroduction ( \"Welcome to our geography quiz!\" ). AddMultipleChoiceQuestion ( \"What is the capital of France?\" , answers ). Build () if err != nil { log . Fatal ( err ) } // Export to JSON jsonData , _ := questionSet . ToJSON () fmt . Printf ( \"Generated H5P Question Set:\\n%s\\n\" , string ( jsonData )) } \ud83d\udcda What's Next? \u00b6 Installation Guide - Detailed installation instructions Quick Start Tutorial - Step-by-step tutorial Basic Concepts - Understanding H5P and this library User Guide - Comprehensive usage documentation API Reference - Complete API documentation Examples - Real-world usage examples \ud83c\udfdb\ufe0f Architecture \u00b6 The H5P Go SDK is organized into several key components: Core Types ( questionset.go , h5p_package.go ) - Fundamental data structures Builder Pattern ( builder.go ) - Fluent API for creating content Official Schemas ( schemas/ ) - Type-safe H5P content type definitions Semantics Engine ( semantics/ ) - Universal H5P semantics format support Package Management - Full .h5p file creation and extraction \ud83d\udd27 Key Capabilities \u00b6 Question Sets \u00b6 Build interactive question sets with multiple question types, scoring, and rich feedback systems. Type-Safe Schemas \u00b6 Work with official H5P content type schemas using strongly-typed Go structs. H5P Package Management \u00b6 Create, modify, and validate complete H5P packages ready for deployment. Standards Compliance \u00b6 Full compliance with official H5P specifications and content type definitions. \ud83e\udd1d Contributing \u00b6 We welcome contributions! See our Contributing Guide for details. \ud83d\udcdc License \u00b6 This project is licensed under the MIT License - see the LICENSE file for details.","title":"Home"},{"location":"#h5p-go-sdk","text":"A Go library for creating, manipulating, and validating H5P (HTML5 Package) content, with support for the official H5P file format and schemas.","title":"H5P Go SDK"},{"location":"#features","text":"\ud83d\udce6 Full H5P Package Support : Create and extract .h5p ZIP files with proper structure \ud83d\udd12 Type-Safe Schema Implementation : Official H5P MultiChoice schema with Go structs \ud83c\udfd7\ufe0f Question Set Builder : Fluent API for building interactive question sets \u2705 Validation : Built-in validation for H5P compliance \ud83c\udfaf Multiple Question Types : Support for single-answer and multi-answer questions \ud83d\udccb Official Schema Compliance : Uses actual H5P semantics definitions \ud83d\udd04 JSON Serialization : Full marshaling/unmarshaling support","title":"\u2728 Features"},{"location":"#quick-start","text":"go get github.com/grokify/h5p-go package main import ( \"fmt\" \"log\" \"github.com/grokify/h5p-go\" ) func main () { // Create a question set using the builder pattern builder := h5p . NewQuestionSetBuilder () answers := [] h5p . Answer { h5p . CreateAnswer ( \"Paris\" , true ), h5p . CreateAnswer ( \"London\" , false ), h5p . CreateAnswer ( \"Berlin\" , false ), h5p . CreateAnswer ( \"Madrid\" , false ), } questionSet , err := builder . SetTitle ( \"Geography Quiz\" ). SetProgressType ( \"textual\" ). SetPassPercentage ( 60 ). SetIntroduction ( \"Welcome to our geography quiz!\" ). AddMultipleChoiceQuestion ( \"What is the capital of France?\" , answers ). Build () if err != nil { log . Fatal ( err ) } // Export to JSON jsonData , _ := questionSet . ToJSON () fmt . Printf ( \"Generated H5P Question Set:\\n%s\\n\" , string ( jsonData )) }","title":"\ud83d\ude80 Quick Start"},{"location":"#whats-next","text":"Installation Guide - Detailed installation instructions Quick Start Tutorial - Step-by-step tutorial Basic Concepts - Understanding H5P and this library User Guide - Comprehensive usage documentation API Reference - Complete API documentation Examples - Real-world usage examples","title":"\ud83d\udcda What's Next?"},{"location":"#architecture","text":"The H5P Go SDK is organized into several key components: Core Types ( questionset.go , h5p_package.go ) - Fundamental data structures Builder Pattern ( builder.go ) - Fluent API for creating content Official Schemas ( schemas/ ) - Type-safe H5P content type definitions Semantics Engine ( semantics/ ) - Universal H5P semantics format support Package Management - Full .h5p file creation and extraction","title":"\ud83c\udfdb\ufe0f Architecture"},{"location":"#key-capabilities","text":"","title":"\ud83d\udd27 Key Capabilities"},{"location":"#question-sets","text":"Build interactive question sets with multiple question types, scoring, and rich feedback systems.","title":"Question Sets"},{"location":"#type-safe-schemas","text":"Work with official H5P content type schemas using strongly-typed Go structs.","title":"Type-Safe Schemas"},{"location":"#h5p-package-management","text":"Create, modify, and validate complete H5P packages ready for deployment.","title":"H5P Package Management"},{"location":"#standards-compliance","text":"Full compliance with official H5P specifications and content type definitions.","title":"Standards Compliance"},{"location":"#contributing","text":"We welcome contributions! See our Contributing Guide for details.","title":"\ud83e\udd1d Contributing"},{"location":"#license","text":"This project is licensed under the MIT License - see the LICENSE file for details.","title":"\ud83d\udcdc License"},{"location":"why-h5p-for-quizzes/","text":"WHy H5P for Quizzes? \u00b6 H5P has become a popular way to represent quiz and assessment information, and here\u2019s why it\u2019s a good option for your use case: 1. Structured but Lightweight \u00b6 H5P packages are just zip files containing JSON ( content.json , semantics.json ) and assets. Much simpler to handle than XML-based standards like QTI. Easy to parse in any modern language (Go, Python, JS, etc.) and store in databases. 2. Flexible Question Types \u00b6 Out of the box, H5P supports many quiz and interaction types : multiple choice, fill-in-the-blank, drag-and-drop, true/false, summary, interactive video quizzes, etc. Each type is defined by a semantics.json schema, so the data format is consistent and validated. 3. Open and Extensible \u00b6 Fully open-source under MIT license. Developers can create new content types by defining their own semantics.json . Easy to extend for custom question types or metadata you may need in a question bank. 4. Widely Supported \u00b6 Works in popular LMS/CMS like Moodle, WordPress, Drupal. Many e-learning platforms already support H5P import/export. Good community and ecosystem (compared to rolling your own schema). 5. Human-Friendly JSON \u00b6 Example from H5P Multiple Choice ( content.json ): { \"question\" : \"What is 2 + 2?\" , \"answers\" : [ { \"text\" : \"3\" , \"correct\" : false }, { \"text\" : \"4\" , \"correct\" : true }, { \"text\" : \"5\" , \"correct\" : false } ], \"behaviour\" : { \"singleAnswer\" : true , \"randomAnswers\" : true } } This is straightforward to read, write, and validate \u2014 much cleaner than QTI XML. 6. Future-Proof with Interoperability \u00b6 You can start with H5P JSON for ease of use . Later, you can map to QTI if you need LMS-grade interoperability (since question/answer/feedback concepts map pretty well). You can also integrate with xAPI for tracking learner interactions. \u2705 In short: H5P is a great option because it balances developer-friendliness (JSON, open source) with educational robustness (rich quiz types, LMS support) . It\u2019s an approachable starting point for a question bank schema, while still leaving the door open to more formal standards like QTI if needed.","title":"WHy H5P for Quizzes?"},{"location":"why-h5p-for-quizzes/#why-h5p-for-quizzes","text":"H5P has become a popular way to represent quiz and assessment information, and here\u2019s why it\u2019s a good option for your use case:","title":"WHy H5P for Quizzes?"},{"location":"why-h5p-for-quizzes/#1-structured-but-lightweight","text":"H5P packages are just zip files containing JSON ( content.json , semantics.json ) and assets. Much simpler to handle than XML-based standards like QTI. Easy to parse in any modern language (Go, Python, JS, etc.) and store in databases.","title":"1. Structured but Lightweight"},{"location":"why-h5p-for-quizzes/#2-flexible-question-types","text":"Out of the box, H5P supports many quiz and interaction types : multiple choice, fill-in-the-blank, drag-and-drop, true/false, summary, interactive video quizzes, etc. Each type is defined by a semantics.json schema, so the data format is consistent and validated.","title":"2. Flexible Question Types"},{"location":"why-h5p-for-quizzes/#3-open-and-extensible","text":"Fully open-source under MIT license. Developers can create new content types by defining their own semantics.json . Easy to extend for custom question types or metadata you may need in a question bank.","title":"3. Open and Extensible"},{"location":"why-h5p-for-quizzes/#4-widely-supported","text":"Works in popular LMS/CMS like Moodle, WordPress, Drupal. Many e-learning platforms already support H5P import/export. Good community and ecosystem (compared to rolling your own schema).","title":"4. Widely Supported"},{"location":"why-h5p-for-quizzes/#5-human-friendly-json","text":"Example from H5P Multiple Choice ( content.json ): { \"question\" : \"What is 2 + 2?\" , \"answers\" : [ { \"text\" : \"3\" , \"correct\" : false }, { \"text\" : \"4\" , \"correct\" : true }, { \"text\" : \"5\" , \"correct\" : false } ], \"behaviour\" : { \"singleAnswer\" : true , \"randomAnswers\" : true } } This is straightforward to read, write, and validate \u2014 much cleaner than QTI XML.","title":"5. Human-Friendly JSON"},{"location":"why-h5p-for-quizzes/#6-future-proof-with-interoperability","text":"You can start with H5P JSON for ease of use . Later, you can map to QTI if you need LMS-grade interoperability (since question/answer/feedback concepts map pretty well). You can also integrate with xAPI for tracking learner interactions. \u2705 In short: H5P is a great option because it balances developer-friendliness (JSON, open source) with educational robustness (rich quiz types, LMS support) . It\u2019s an approachable starting point for a question bank schema, while still leaving the door open to more formal standards like QTI if needed.","title":"6. Future-Proof with Interoperability"},{"location":"api/builder/","text":"Builder API \u00b6 The Builder API provides a fluent interface for creating H5P content. Coming Soon \u00b6 Detailed builder API documentation including: All builder methods Method chaining patterns Error handling strategies Advanced builder usage Full documentation coming soon!","title":"Builder Pattern"},{"location":"api/builder/#builder-api","text":"The Builder API provides a fluent interface for creating H5P content.","title":"Builder API"},{"location":"api/builder/#coming-soon","text":"Detailed builder API documentation including: All builder methods Method chaining patterns Error handling strategies Advanced builder usage Full documentation coming soon!","title":"Coming Soon"},{"location":"api/core-types/","text":"Core Types \u00b6 This reference covers the fundamental types and interfaces in the H5P Go SDK. Question Set Types \u00b6 QuestionSet \u00b6 The main structure for H5P question sets: type QuestionSet struct { Title string `json:\"title\"` ProgressType string `json:\"progressType\"` PassPercentage int `json:\"passPercentage\"` Questions [] Question `json:\"questions\"` IntroPage * IntroPage `json:\"introPage,omitempty\"` TextualProgress string `json:\"textualProgress,omitempty\"` EndGame * EndGame `json:\"endGame,omitempty\"` OverallFeedback [] OverallFeedback `json:\"overallFeedback,omitempty\"` Behaviour * Behaviour `json:\"behaviour,omitempty\"` L10n * L10n `json:\"l10n,omitempty\"` } Methods \u00b6 // ToJSON serializes the question set to JSON func ( qs * QuestionSet ) ToJSON () ([] byte , error ) // Validate checks if the question set is valid func ( qs * QuestionSet ) Validate () error // AddQuestion adds a question to the set func ( qs * QuestionSet ) AddQuestion ( question Question ) error Question \u00b6 Represents a single question in a question set: type Question struct { Library string `json:\"library\"` Params interface {} `json:\"params\"` SubContentId string `json:\"subContentId,omitempty\"` Metadata * Metadata `json:\"metadata,omitempty\"` } Answer \u00b6 Represents an answer option in multiple choice questions: type Answer struct { Text string `json:\"text\"` Correct bool `json:\"correct\"` Feedback string `json:\"feedback,omitempty\"` Weight float64 `json:\"weight,omitempty\"` } Helper Functions \u00b6 // CreateAnswer creates a new answer with text and correctness func CreateAnswer ( text string , correct bool ) Answer // CreateAnswerWithFeedback creates an answer with feedback func CreateAnswerWithFeedback ( text string , correct bool , feedback string ) Answer Builder Types \u00b6 QuestionSetBuilder \u00b6 Fluent interface for building question sets: type QuestionSetBuilder struct { questionSet * QuestionSet errors [] error } Methods \u00b6 // SetTitle sets the question set title func ( b * QuestionSetBuilder ) SetTitle ( title string ) * QuestionSetBuilder // SetProgressType sets progress display type (\"textual\" or \"dots\") func ( b * QuestionSetBuilder ) SetProgressType ( progressType string ) * QuestionSetBuilder // SetPassPercentage sets the passing threshold (0-100) func ( b * QuestionSetBuilder ) SetPassPercentage ( percentage int ) * QuestionSetBuilder // SetIntroduction sets the introduction text func ( b * QuestionSetBuilder ) SetIntroduction ( text string ) * QuestionSetBuilder // AddMultipleChoiceQuestion adds a multiple choice question func ( b * QuestionSetBuilder ) AddMultipleChoiceQuestion ( question string , answers [] Answer ) * QuestionSetBuilder // AddOverallFeedback adds performance-based feedback func ( b * QuestionSetBuilder ) AddOverallFeedback ( feedback [] OverallFeedback ) * QuestionSetBuilder // Build creates the final question set func ( b * QuestionSetBuilder ) Build () ( * QuestionSet , error ) Package Types \u00b6 H5PPackage \u00b6 Represents a complete H5P package: type H5PPackage struct { packageDefinition * PackageDefinition content * Content libraries map [ string ] * Library } Methods \u00b6 // SetPackageDefinition sets the package metadata func ( pkg * H5PPackage ) SetPackageDefinition ( def * PackageDefinition ) // SetContent sets the main content func ( pkg * H5PPackage ) SetContent ( content * Content ) // AddLibrary adds a library to the package func ( pkg * H5PPackage ) AddLibrary ( lib * Library ) // CreateZipFile exports the package as a .h5p file func ( pkg * H5PPackage ) CreateZipFile ( filename string ) error // Validate validates the complete package func ( pkg * H5PPackage ) Validate () error PackageDefinition \u00b6 Defines package metadata (h5p.json): type PackageDefinition struct { Title string `json:\"title\"` Language string `json:\"language\"` MainLibrary string `json:\"mainLibrary\"` EmbedTypes [] string `json:\"embedTypes\"` PreloadedDependencies [] LibraryDependency `json:\"preloadedDependencies\"` DynamicDependencies [] LibraryDependency `json:\"dynamicDependencies,omitempty\"` EditorDependencies [] LibraryDependency `json:\"editorDependencies,omitempty\"` License string `json:\"license,omitempty\"` Authors [] Author `json:\"authors,omitempty\"` Changes [] Change `json:\"changes,omitempty\"` } Library \u00b6 Represents an H5P library: type Library struct { MachineName string `json:\"-\"` Definition * LibraryDefinition `json:\"-\"` Files map [ string ][] byte `json:\"-\"` } Content \u00b6 Main content structure (content/content.json): type Content struct { Params interface {} `json:\"params\"` Metadata * Metadata `json:\"metadata,omitempty\"` } Feedback Types \u00b6 OverallFeedback \u00b6 Performance-based feedback for question sets: type OverallFeedback struct { From int `json:\"from\"` To int `json:\"to\"` Feedback string `json:\"feedback\"` } IntroPage \u00b6 Introduction page for question sets: type IntroPage struct { ShowIntroPage bool `json:\"showIntroPage\"` Title string `json:\"title,omitempty\"` Introduction string `json:\"introduction,omitempty\"` StartButtonText string `json:\"startButtonText,omitempty\"` } EndGame \u00b6 End screen configuration: type EndGame struct { ShowResultPage bool `json:\"showResultPage\"` ShowSolutionButton bool `json:\"showSolutionButton\"` ShowRetryButton bool `json:\"showRetryButton\"` NoResultMessage string `json:\"noResultMessage,omitempty\"` Message string `json:\"message,omitempty\"` OverallFeedback [] OverallFeedback `json:\"overallFeedback,omitempty\"` SolutionButtonText string `json:\"solutionButtonText,omitempty\"` RetryButtonText string `json:\"retryButtonText,omitempty\"` } Metadata Types \u00b6 Author \u00b6 Author information: type Author struct { Name string `json:\"name\"` Role string `json:\"role\"` } Change \u00b6 Change log entry: type Change struct { Date string `json:\"date\"` Author string `json:\"author\"` Log string `json:\"log\"` } LibraryDependency \u00b6 Library dependency specification: type LibraryDependency struct { MachineName string `json:\"machineName\"` MajorVersion int `json:\"majorVersion\"` MinorVersion int `json:\"minorVersion\"` } Utility Types \u00b6 ValidationError \u00b6 Structured validation error: type ValidationError struct { Field string `json:\"field\"` Message string `json:\"message\"` Value interface {} `json:\"value,omitempty\"` } ValidationErrors \u00b6 Collection of validation errors: type ValidationErrors [] ValidationError Factory Functions \u00b6 Package Creation \u00b6 // NewH5PPackage creates a new empty H5P package func NewH5PPackage () * H5PPackage // LoadH5PPackage loads an existing .h5p file func LoadH5PPackage ( filename string ) ( * H5PPackage , error ) Builder Creation \u00b6 // NewQuestionSetBuilder creates a new question set builder func NewQuestionSetBuilder () * QuestionSetBuilder Content Parsing \u00b6 // FromJSON parses a question set from JSON data func FromJSON ( jsonData [] byte ) ( * QuestionSet , error ) Constants \u00b6 Progress Types \u00b6 const ( ProgressTypeTextual = \"textual\" ProgressTypeDots = \"dots\" ) Library Names \u00b6 const ( LibraryMultiChoice = \"H5P.MultiChoice\" LibraryQuestionSet = \"H5P.QuestionSet\" LibraryTrueFalse = \"H5P.TrueFalse\" LibraryEssay = \"H5P.Essay\" ) Interface Specifications \u00b6 Validator \u00b6 Types that can be validated implement this interface: type Validator interface { Validate () error } JSONMarshaler \u00b6 Types that can be serialized to JSON: type JSONMarshaler interface { ToJSON () ([] byte , error ) } Usage Examples \u00b6 Basic Question Set Creation \u00b6 builder := h5p . NewQuestionSetBuilder () answers := [] h5p . Answer { h5p . CreateAnswer ( \"Correct\" , true ), h5p . CreateAnswer ( \"Wrong\" , false ), } questionSet , err := builder . SetTitle ( \"Basic Quiz\" ). SetPassPercentage ( 70 ). AddMultipleChoiceQuestion ( \"Question?\" , answers ). Build () if err != nil { log . Fatal ( err ) } Package Creation \u00b6 pkg := h5p . NewH5PPackage () packageDef := & h5p . PackageDefinition { Title : \"My Package\" , Language : \"en\" , MainLibrary : \"H5P.QuestionSet\" , EmbedTypes : [] string { \"div\" }, } pkg . SetPackageDefinition ( packageDef ) pkg . SetContent ( & h5p . Content { Params : questionSet }) err := pkg . CreateZipFile ( \"package.h5p\" ) if err != nil { log . Fatal ( err ) } Type Relationships \u00b6 H5PPackage \u251c\u2500\u2500 PackageDefinition (h5p.json) \u251c\u2500\u2500 Content (content/content.json) \u2502 \u251c\u2500\u2500 Params (QuestionSet or other content) \u2502 \u2514\u2500\u2500 Metadata \u2514\u2500\u2500 Libraries (H5P.*/library.json + files) QuestionSet \u251c\u2500\u2500 Questions[] \u2502 \u251c\u2500\u2500 Library (string) \u2502 \u2514\u2500\u2500 Params (interface{}) \u251c\u2500\u2500 OverallFeedback[] \u251c\u2500\u2500 IntroPage \u2514\u2500\u2500 EndGame This type system provides a complete foundation for creating, manipulating, and validating H5P content in Go applications.","title":"Core Types"},{"location":"api/core-types/#core-types","text":"This reference covers the fundamental types and interfaces in the H5P Go SDK.","title":"Core Types"},{"location":"api/core-types/#question-set-types","text":"","title":"Question Set Types"},{"location":"api/core-types/#questionset","text":"The main structure for H5P question sets: type QuestionSet struct { Title string `json:\"title\"` ProgressType string `json:\"progressType\"` PassPercentage int `json:\"passPercentage\"` Questions [] Question `json:\"questions\"` IntroPage * IntroPage `json:\"introPage,omitempty\"` TextualProgress string `json:\"textualProgress,omitempty\"` EndGame * EndGame `json:\"endGame,omitempty\"` OverallFeedback [] OverallFeedback `json:\"overallFeedback,omitempty\"` Behaviour * Behaviour `json:\"behaviour,omitempty\"` L10n * L10n `json:\"l10n,omitempty\"` }","title":"QuestionSet"},{"location":"api/core-types/#methods","text":"// ToJSON serializes the question set to JSON func ( qs * QuestionSet ) ToJSON () ([] byte , error ) // Validate checks if the question set is valid func ( qs * QuestionSet ) Validate () error // AddQuestion adds a question to the set func ( qs * QuestionSet ) AddQuestion ( question Question ) error","title":"Methods"},{"location":"api/core-types/#question","text":"Represents a single question in a question set: type Question struct { Library string `json:\"library\"` Params interface {} `json:\"params\"` SubContentId string `json:\"subContentId,omitempty\"` Metadata * Metadata `json:\"metadata,omitempty\"` }","title":"Question"},{"location":"api/core-types/#answer","text":"Represents an answer option in multiple choice questions: type Answer struct { Text string `json:\"text\"` Correct bool `json:\"correct\"` Feedback string `json:\"feedback,omitempty\"` Weight float64 `json:\"weight,omitempty\"` }","title":"Answer"},{"location":"api/core-types/#helper-functions","text":"// CreateAnswer creates a new answer with text and correctness func CreateAnswer ( text string , correct bool ) Answer // CreateAnswerWithFeedback creates an answer with feedback func CreateAnswerWithFeedback ( text string , correct bool , feedback string ) Answer","title":"Helper Functions"},{"location":"api/core-types/#builder-types","text":"","title":"Builder Types"},{"location":"api/core-types/#questionsetbuilder","text":"Fluent interface for building question sets: type QuestionSetBuilder struct { questionSet * QuestionSet errors [] error }","title":"QuestionSetBuilder"},{"location":"api/core-types/#methods_1","text":"// SetTitle sets the question set title func ( b * QuestionSetBuilder ) SetTitle ( title string ) * QuestionSetBuilder // SetProgressType sets progress display type (\"textual\" or \"dots\") func ( b * QuestionSetBuilder ) SetProgressType ( progressType string ) * QuestionSetBuilder // SetPassPercentage sets the passing threshold (0-100) func ( b * QuestionSetBuilder ) SetPassPercentage ( percentage int ) * QuestionSetBuilder // SetIntroduction sets the introduction text func ( b * QuestionSetBuilder ) SetIntroduction ( text string ) * QuestionSetBuilder // AddMultipleChoiceQuestion adds a multiple choice question func ( b * QuestionSetBuilder ) AddMultipleChoiceQuestion ( question string , answers [] Answer ) * QuestionSetBuilder // AddOverallFeedback adds performance-based feedback func ( b * QuestionSetBuilder ) AddOverallFeedback ( feedback [] OverallFeedback ) * QuestionSetBuilder // Build creates the final question set func ( b * QuestionSetBuilder ) Build () ( * QuestionSet , error )","title":"Methods"},{"location":"api/core-types/#package-types","text":"","title":"Package Types"},{"location":"api/core-types/#h5ppackage","text":"Represents a complete H5P package: type H5PPackage struct { packageDefinition * PackageDefinition content * Content libraries map [ string ] * Library }","title":"H5PPackage"},{"location":"api/core-types/#methods_2","text":"// SetPackageDefinition sets the package metadata func ( pkg * H5PPackage ) SetPackageDefinition ( def * PackageDefinition ) // SetContent sets the main content func ( pkg * H5PPackage ) SetContent ( content * Content ) // AddLibrary adds a library to the package func ( pkg * H5PPackage ) AddLibrary ( lib * Library ) // CreateZipFile exports the package as a .h5p file func ( pkg * H5PPackage ) CreateZipFile ( filename string ) error // Validate validates the complete package func ( pkg * H5PPackage ) Validate () error","title":"Methods"},{"location":"api/core-types/#packagedefinition","text":"Defines package metadata (h5p.json): type PackageDefinition struct { Title string `json:\"title\"` Language string `json:\"language\"` MainLibrary string `json:\"mainLibrary\"` EmbedTypes [] string `json:\"embedTypes\"` PreloadedDependencies [] LibraryDependency `json:\"preloadedDependencies\"` DynamicDependencies [] LibraryDependency `json:\"dynamicDependencies,omitempty\"` EditorDependencies [] LibraryDependency `json:\"editorDependencies,omitempty\"` License string `json:\"license,omitempty\"` Authors [] Author `json:\"authors,omitempty\"` Changes [] Change `json:\"changes,omitempty\"` }","title":"PackageDefinition"},{"location":"api/core-types/#library","text":"Represents an H5P library: type Library struct { MachineName string `json:\"-\"` Definition * LibraryDefinition `json:\"-\"` Files map [ string ][] byte `json:\"-\"` }","title":"Library"},{"location":"api/core-types/#content","text":"Main content structure (content/content.json): type Content struct { Params interface {} `json:\"params\"` Metadata * Metadata `json:\"metadata,omitempty\"` }","title":"Content"},{"location":"api/core-types/#feedback-types","text":"","title":"Feedback Types"},{"location":"api/core-types/#overallfeedback","text":"Performance-based feedback for question sets: type OverallFeedback struct { From int `json:\"from\"` To int `json:\"to\"` Feedback string `json:\"feedback\"` }","title":"OverallFeedback"},{"location":"api/core-types/#intropage","text":"Introduction page for question sets: type IntroPage struct { ShowIntroPage bool `json:\"showIntroPage\"` Title string `json:\"title,omitempty\"` Introduction string `json:\"introduction,omitempty\"` StartButtonText string `json:\"startButtonText,omitempty\"` }","title":"IntroPage"},{"location":"api/core-types/#endgame","text":"End screen configuration: type EndGame struct { ShowResultPage bool `json:\"showResultPage\"` ShowSolutionButton bool `json:\"showSolutionButton\"` ShowRetryButton bool `json:\"showRetryButton\"` NoResultMessage string `json:\"noResultMessage,omitempty\"` Message string `json:\"message,omitempty\"` OverallFeedback [] OverallFeedback `json:\"overallFeedback,omitempty\"` SolutionButtonText string `json:\"solutionButtonText,omitempty\"` RetryButtonText string `json:\"retryButtonText,omitempty\"` }","title":"EndGame"},{"location":"api/core-types/#metadata-types","text":"","title":"Metadata Types"},{"location":"api/core-types/#author","text":"Author information: type Author struct { Name string `json:\"name\"` Role string `json:\"role\"` }","title":"Author"},{"location":"api/core-types/#change","text":"Change log entry: type Change struct { Date string `json:\"date\"` Author string `json:\"author\"` Log string `json:\"log\"` }","title":"Change"},{"location":"api/core-types/#librarydependency","text":"Library dependency specification: type LibraryDependency struct { MachineName string `json:\"machineName\"` MajorVersion int `json:\"majorVersion\"` MinorVersion int `json:\"minorVersion\"` }","title":"LibraryDependency"},{"location":"api/core-types/#utility-types","text":"","title":"Utility Types"},{"location":"api/core-types/#validationerror","text":"Structured validation error: type ValidationError struct { Field string `json:\"field\"` Message string `json:\"message\"` Value interface {} `json:\"value,omitempty\"` }","title":"ValidationError"},{"location":"api/core-types/#validationerrors","text":"Collection of validation errors: type ValidationErrors [] ValidationError","title":"ValidationErrors"},{"location":"api/core-types/#factory-functions","text":"","title":"Factory Functions"},{"location":"api/core-types/#package-creation","text":"// NewH5PPackage creates a new empty H5P package func NewH5PPackage () * H5PPackage // LoadH5PPackage loads an existing .h5p file func LoadH5PPackage ( filename string ) ( * H5PPackage , error )","title":"Package Creation"},{"location":"api/core-types/#builder-creation","text":"// NewQuestionSetBuilder creates a new question set builder func NewQuestionSetBuilder () * QuestionSetBuilder","title":"Builder Creation"},{"location":"api/core-types/#content-parsing","text":"// FromJSON parses a question set from JSON data func FromJSON ( jsonData [] byte ) ( * QuestionSet , error )","title":"Content Parsing"},{"location":"api/core-types/#constants","text":"","title":"Constants"},{"location":"api/core-types/#progress-types","text":"const ( ProgressTypeTextual = \"textual\" ProgressTypeDots = \"dots\" )","title":"Progress Types"},{"location":"api/core-types/#library-names","text":"const ( LibraryMultiChoice = \"H5P.MultiChoice\" LibraryQuestionSet = \"H5P.QuestionSet\" LibraryTrueFalse = \"H5P.TrueFalse\" LibraryEssay = \"H5P.Essay\" )","title":"Library Names"},{"location":"api/core-types/#interface-specifications","text":"","title":"Interface Specifications"},{"location":"api/core-types/#validator","text":"Types that can be validated implement this interface: type Validator interface { Validate () error }","title":"Validator"},{"location":"api/core-types/#jsonmarshaler","text":"Types that can be serialized to JSON: type JSONMarshaler interface { ToJSON () ([] byte , error ) }","title":"JSONMarshaler"},{"location":"api/core-types/#usage-examples","text":"","title":"Usage Examples"},{"location":"api/core-types/#basic-question-set-creation","text":"builder := h5p . NewQuestionSetBuilder () answers := [] h5p . Answer { h5p . CreateAnswer ( \"Correct\" , true ), h5p . CreateAnswer ( \"Wrong\" , false ), } questionSet , err := builder . SetTitle ( \"Basic Quiz\" ). SetPassPercentage ( 70 ). AddMultipleChoiceQuestion ( \"Question?\" , answers ). Build () if err != nil { log . Fatal ( err ) }","title":"Basic Question Set Creation"},{"location":"api/core-types/#package-creation_1","text":"pkg := h5p . NewH5PPackage () packageDef := & h5p . PackageDefinition { Title : \"My Package\" , Language : \"en\" , MainLibrary : \"H5P.QuestionSet\" , EmbedTypes : [] string { \"div\" }, } pkg . SetPackageDefinition ( packageDef ) pkg . SetContent ( & h5p . Content { Params : questionSet }) err := pkg . CreateZipFile ( \"package.h5p\" ) if err != nil { log . Fatal ( err ) }","title":"Package Creation"},{"location":"api/core-types/#type-relationships","text":"H5PPackage \u251c\u2500\u2500 PackageDefinition (h5p.json) \u251c\u2500\u2500 Content (content/content.json) \u2502 \u251c\u2500\u2500 Params (QuestionSet or other content) \u2502 \u2514\u2500\u2500 Metadata \u2514\u2500\u2500 Libraries (H5P.*/library.json + files) QuestionSet \u251c\u2500\u2500 Questions[] \u2502 \u251c\u2500\u2500 Library (string) \u2502 \u2514\u2500\u2500 Params (interface{}) \u251c\u2500\u2500 OverallFeedback[] \u251c\u2500\u2500 IntroPage \u2514\u2500\u2500 EndGame This type system provides a complete foundation for creating, manipulating, and validating H5P content in Go applications.","title":"Type Relationships"},{"location":"api/schemas/","text":"Schemas API \u00b6 Type-safe schema implementations for H5P content types. Coming Soon \u00b6 Complete schemas API documentation including: MultiChoice schema details Essay schema (future) TrueFalse schema (future) Custom schema creation Comprehensive schema documentation coming soon!","title":"Schemas"},{"location":"api/schemas/#schemas-api","text":"Type-safe schema implementations for H5P content types.","title":"Schemas API"},{"location":"api/schemas/#coming-soon","text":"Complete schemas API documentation including: MultiChoice schema details Essay schema (future) TrueFalse schema (future) Custom schema creation Comprehensive schema documentation coming soon!","title":"Coming Soon"},{"location":"api/semantics/","text":"Semantics API \u00b6 The semantics package provides a Go implementation of the H5P semantics format, which is used to define form fields, validation rules, and UI behaviors for H5P content types. Overview \u00b6 H5P semantics are JSON schemas that describe how content types should be configured and validated. The semantics package converts these JSON definitions into type-safe Go structs. Core Types \u00b6 Field \u00b6 The Field struct represents a single field in an H5P semantics definition: type Field struct { Name string `json:\"name,omitempty\"` Type string `json:\"type\"` Label string `json:\"label,omitempty\"` Description string `json:\"description,omitempty\"` Importance string `json:\"importance,omitempty\"` Optional bool `json:\"optional,omitempty\"` Default interface {} `json:\"default,omitempty\"` // Polymorphic options field Options interface {} `json:\"options,omitempty\"` // Type-specific fields... } SelectOption \u00b6 Represents an option in a select field: type SelectOption struct { Value string `json:\"value\"` Label string `json:\"label\"` } SemanticDefinition \u00b6 The top-level semantics array: type SemanticDefinition [] Field Polymorphic Options Field \u00b6 The semantics implementation handles H5P's polymorphic use of the \"options\" field, which serves different purposes depending on the field type. Problem \u00b6 In H5P semantics, the same JSON field name \"options\" is used for two completely different data structures: Select fields : Array of objects with \"value\" and \"label\" properties Library fields : Array of library names/versions as strings Solution \u00b6 The Go implementation uses a single Options interface{} field with helper methods for type-safe access: // Field has a polymorphic Options field type Field struct { Options interface {} `json:\"options,omitempty\"` // ... } Helper Methods \u00b6 GetSelectOptions() \u00b6 Retrieves options for select field types: func ( f * Field ) GetSelectOptions () [] SelectOption Example: field := Field { Type : \"select\" , Options : [] interface {}{ map [ string ] interface {}{ \"value\" : \"true\" , \"label\" : \"True\" , }, map [ string ] interface {}{ \"value\" : \"false\" , \"label\" : \"False\" , }, }, } selectOptions := field . GetSelectOptions () if selectOptions != nil { for _ , opt := range selectOptions { fmt . Printf ( \"Value: %s, Label: %s\\n\" , opt . Value , opt . Label ) } } GetLibraryOptions() \u00b6 Retrieves options for library field types: func ( f * Field ) GetLibraryOptions () [] string Example: field := Field { Type : \"library\" , Options : [] interface {}{ \"H5P.MultiChoice 1.16\" , \"H5P.TrueFalse 1.8\" , }, } libraryOptions := field . GetLibraryOptions () if libraryOptions != nil { for _ , lib := range libraryOptions { fmt . Printf ( \"Available library: %s\\n\" , lib ) } } SetSelectOptions() \u00b6 Sets options for select fields: func ( f * Field ) SetSelectOptions ( options [] SelectOption ) Example: field := & Field { Type : \"select\" } field . SetSelectOptions ([] SelectOption { { Value : \"small\" , Label : \"Small\" }, { Value : \"medium\" , Label : \"Medium\" }, { Value : \"large\" , Label : \"Large\" }, }) SetLibraryOptions() \u00b6 Sets options for library fields: func ( f * Field ) SetLibraryOptions ( options [] string ) Example: field := & Field { Type : \"library\" } field . SetLibraryOptions ([] string { \"H5P.MultiChoice 1.16\" , \"H5P.Essay 1.5\" , \"H5P.TrueFalse 1.8\" , }) Field Types \u00b6 The semantics format supports various field types: Basic Types \u00b6 text - Text input fields number - Numeric input fields boolean - Checkbox fields select - Dropdown selection fields Complex Types \u00b6 group - Groups of related fields list - Dynamic arrays of items library - Content type selection fields Example Field Definitions \u00b6 Text Field: field := Field { Name : \"title\" , Type : \"text\" , Label : \"Title\" , Description : \"Enter a title for your content\" , Importance : \"high\" , MaxLength : 100 , } Select Field: field := Field { Name : \"size\" , Type : \"select\" , Label : \"Size\" , } field . SetSelectOptions ([] SelectOption { { Value : \"small\" , Label : \"Small\" }, { Value : \"large\" , Label : \"Large\" }, }) Library Field: field := Field { Name : \"content\" , Type : \"library\" , Label : \"Content Type\" , } field . SetLibraryOptions ([] string { \"H5P.MultiChoice 1.16\" , \"H5P.TrueFalse 1.8\" , }) Type Validation \u00b6 The helper methods include built-in validation: GetSelectOptions() returns nil if options are not in select format GetLibraryOptions() returns nil if options are not in library format Methods handle both JSON unmarshaling ( []interface{} ) and direct assignment scenarios // Safe usage pattern field := loadFieldFromJSON ( data ) if selectOptions := field . GetSelectOptions (); selectOptions != nil { // Handle as select field processSelectField ( selectOptions ) } else if libraryOptions := field . GetLibraryOptions (); libraryOptions != nil { // Handle as library field processLibraryField ( libraryOptions ) } else { // Handle other field types or invalid options handleOtherFieldType ( field ) } Advanced Usage \u00b6 Loading from JSON \u00b6 func loadSemantics ( jsonData [] byte ) ( SemanticDefinition , error ) { var semantics SemanticDefinition err := json . Unmarshal ( jsonData , & semantics ) if err != nil { return nil , err } return semantics , nil } Iterating Through Fields \u00b6 func processSemantics ( semantics SemanticDefinition ) { for _ , field := range semantics { fmt . Printf ( \"Processing field: %s (type: %s)\\n\" , field . Name , field . Type ) switch field . Type { case \"select\" : if opts := field . GetSelectOptions (); opts != nil { fmt . Printf ( \" Select options: %d choices\\n\" , len ( opts )) } case \"library\" : if libs := field . GetLibraryOptions (); libs != nil { fmt . Printf ( \" Library options: %d libraries\\n\" , len ( libs )) } case \"group\" : if field . Fields != nil { fmt . Printf ( \" Group with %d sub-fields\\n\" , len ( field . Fields )) } } } } Standards Compliance \u00b6 The semantics implementation follows the official H5P semantics specification: H5P Semantics Documentation H5P Content Type Development The implementation handles all standard H5P semantic field types and attributes while providing type safety and validation in Go.","title":"Semantics"},{"location":"api/semantics/#semantics-api","text":"The semantics package provides a Go implementation of the H5P semantics format, which is used to define form fields, validation rules, and UI behaviors for H5P content types.","title":"Semantics API"},{"location":"api/semantics/#overview","text":"H5P semantics are JSON schemas that describe how content types should be configured and validated. The semantics package converts these JSON definitions into type-safe Go structs.","title":"Overview"},{"location":"api/semantics/#core-types","text":"","title":"Core Types"},{"location":"api/semantics/#field","text":"The Field struct represents a single field in an H5P semantics definition: type Field struct { Name string `json:\"name,omitempty\"` Type string `json:\"type\"` Label string `json:\"label,omitempty\"` Description string `json:\"description,omitempty\"` Importance string `json:\"importance,omitempty\"` Optional bool `json:\"optional,omitempty\"` Default interface {} `json:\"default,omitempty\"` // Polymorphic options field Options interface {} `json:\"options,omitempty\"` // Type-specific fields... }","title":"Field"},{"location":"api/semantics/#selectoption","text":"Represents an option in a select field: type SelectOption struct { Value string `json:\"value\"` Label string `json:\"label\"` }","title":"SelectOption"},{"location":"api/semantics/#semanticdefinition","text":"The top-level semantics array: type SemanticDefinition [] Field","title":"SemanticDefinition"},{"location":"api/semantics/#polymorphic-options-field","text":"The semantics implementation handles H5P's polymorphic use of the \"options\" field, which serves different purposes depending on the field type.","title":"Polymorphic Options Field"},{"location":"api/semantics/#problem","text":"In H5P semantics, the same JSON field name \"options\" is used for two completely different data structures: Select fields : Array of objects with \"value\" and \"label\" properties Library fields : Array of library names/versions as strings","title":"Problem"},{"location":"api/semantics/#solution","text":"The Go implementation uses a single Options interface{} field with helper methods for type-safe access: // Field has a polymorphic Options field type Field struct { Options interface {} `json:\"options,omitempty\"` // ... }","title":"Solution"},{"location":"api/semantics/#helper-methods","text":"","title":"Helper Methods"},{"location":"api/semantics/#getselectoptions","text":"Retrieves options for select field types: func ( f * Field ) GetSelectOptions () [] SelectOption Example: field := Field { Type : \"select\" , Options : [] interface {}{ map [ string ] interface {}{ \"value\" : \"true\" , \"label\" : \"True\" , }, map [ string ] interface {}{ \"value\" : \"false\" , \"label\" : \"False\" , }, }, } selectOptions := field . GetSelectOptions () if selectOptions != nil { for _ , opt := range selectOptions { fmt . Printf ( \"Value: %s, Label: %s\\n\" , opt . Value , opt . Label ) } }","title":"GetSelectOptions()"},{"location":"api/semantics/#getlibraryoptions","text":"Retrieves options for library field types: func ( f * Field ) GetLibraryOptions () [] string Example: field := Field { Type : \"library\" , Options : [] interface {}{ \"H5P.MultiChoice 1.16\" , \"H5P.TrueFalse 1.8\" , }, } libraryOptions := field . GetLibraryOptions () if libraryOptions != nil { for _ , lib := range libraryOptions { fmt . Printf ( \"Available library: %s\\n\" , lib ) } }","title":"GetLibraryOptions()"},{"location":"api/semantics/#setselectoptions","text":"Sets options for select fields: func ( f * Field ) SetSelectOptions ( options [] SelectOption ) Example: field := & Field { Type : \"select\" } field . SetSelectOptions ([] SelectOption { { Value : \"small\" , Label : \"Small\" }, { Value : \"medium\" , Label : \"Medium\" }, { Value : \"large\" , Label : \"Large\" }, })","title":"SetSelectOptions()"},{"location":"api/semantics/#setlibraryoptions","text":"Sets options for library fields: func ( f * Field ) SetLibraryOptions ( options [] string ) Example: field := & Field { Type : \"library\" } field . SetLibraryOptions ([] string { \"H5P.MultiChoice 1.16\" , \"H5P.Essay 1.5\" , \"H5P.TrueFalse 1.8\" , })","title":"SetLibraryOptions()"},{"location":"api/semantics/#field-types","text":"The semantics format supports various field types:","title":"Field Types"},{"location":"api/semantics/#basic-types","text":"text - Text input fields number - Numeric input fields boolean - Checkbox fields select - Dropdown selection fields","title":"Basic Types"},{"location":"api/semantics/#complex-types","text":"group - Groups of related fields list - Dynamic arrays of items library - Content type selection fields","title":"Complex Types"},{"location":"api/semantics/#example-field-definitions","text":"Text Field: field := Field { Name : \"title\" , Type : \"text\" , Label : \"Title\" , Description : \"Enter a title for your content\" , Importance : \"high\" , MaxLength : 100 , } Select Field: field := Field { Name : \"size\" , Type : \"select\" , Label : \"Size\" , } field . SetSelectOptions ([] SelectOption { { Value : \"small\" , Label : \"Small\" }, { Value : \"large\" , Label : \"Large\" }, }) Library Field: field := Field { Name : \"content\" , Type : \"library\" , Label : \"Content Type\" , } field . SetLibraryOptions ([] string { \"H5P.MultiChoice 1.16\" , \"H5P.TrueFalse 1.8\" , })","title":"Example Field Definitions"},{"location":"api/semantics/#type-validation","text":"The helper methods include built-in validation: GetSelectOptions() returns nil if options are not in select format GetLibraryOptions() returns nil if options are not in library format Methods handle both JSON unmarshaling ( []interface{} ) and direct assignment scenarios // Safe usage pattern field := loadFieldFromJSON ( data ) if selectOptions := field . GetSelectOptions (); selectOptions != nil { // Handle as select field processSelectField ( selectOptions ) } else if libraryOptions := field . GetLibraryOptions (); libraryOptions != nil { // Handle as library field processLibraryField ( libraryOptions ) } else { // Handle other field types or invalid options handleOtherFieldType ( field ) }","title":"Type Validation"},{"location":"api/semantics/#advanced-usage","text":"","title":"Advanced Usage"},{"location":"api/semantics/#loading-from-json","text":"func loadSemantics ( jsonData [] byte ) ( SemanticDefinition , error ) { var semantics SemanticDefinition err := json . Unmarshal ( jsonData , & semantics ) if err != nil { return nil , err } return semantics , nil }","title":"Loading from JSON"},{"location":"api/semantics/#iterating-through-fields","text":"func processSemantics ( semantics SemanticDefinition ) { for _ , field := range semantics { fmt . Printf ( \"Processing field: %s (type: %s)\\n\" , field . Name , field . Type ) switch field . Type { case \"select\" : if opts := field . GetSelectOptions (); opts != nil { fmt . Printf ( \" Select options: %d choices\\n\" , len ( opts )) } case \"library\" : if libs := field . GetLibraryOptions (); libs != nil { fmt . Printf ( \" Library options: %d libraries\\n\" , len ( libs )) } case \"group\" : if field . Fields != nil { fmt . Printf ( \" Group with %d sub-fields\\n\" , len ( field . Fields )) } } } }","title":"Iterating Through Fields"},{"location":"api/semantics/#standards-compliance","text":"The semantics implementation follows the official H5P semantics specification: H5P Semantics Documentation H5P Content Type Development The implementation handles all standard H5P semantic field types and attributes while providing type safety and validation in Go.","title":"Standards Compliance"},{"location":"development/contributing/","text":"Contributing \u00b6 We welcome contributions to the H5P Go SDK! This guide will help you get started with contributing to the project. Getting Started \u00b6 Prerequisites \u00b6 Go 1.19 or later Git Basic understanding of H5P concepts Familiarity with Go development practices Development Setup \u00b6 Fork and clone the repository: git clone https://github.com/yourusername/h5p-go.git cd h5p-go Install dependencies: go mod tidy Run tests to ensure everything works: go test ./... Build the project: go build ./... Development Workflow \u00b6 Branch Strategy \u00b6 main - Stable release branch develop - Development branch (if used) feature/feature-name - Feature branches fix/issue-description - Bug fix branches docs/description - Documentation updates Making Changes \u00b6 Create a feature branch: git checkout -b feature/your-feature-name Make your changes: Write code following Go best practices Add tests for new functionality Update documentation as needed Follow existing code style and conventions Test your changes: go test ./... go vet ./... gofmt -s -w . Commit your changes: git add . git commit -m \"feat: add your feature description\" Commit Message Format \u00b6 Follow conventional commit format: feat: - New features fix: - Bug fixes docs: - Documentation updates style: - Code style changes refactor: - Code refactoring test: - Adding or updating tests chore: - Maintenance tasks Examples: feat: add support for Essay content type fix: resolve validation issue with empty questions docs: update API documentation for semantics test: add comprehensive validation tests Code Guidelines \u00b6 Go Style \u00b6 Follow standard Go conventions: Use gofmt for formatting Follow effective Go guidelines Use meaningful variable and function names Write clear, concise comments Handle errors appropriately Package Structure \u00b6 h5p-go/ \u251c\u2500\u2500 *.go # Core functionality \u251c\u2500\u2500 schemas/ # Typed schema implementations \u251c\u2500\u2500 semantics/ # H5P semantics format \u251c\u2500\u2500 testdata/ # Test data files \u251c\u2500\u2500 docsrc/ # Documentation source \u2514\u2500\u2500 docs/ # Generated documentation Testing \u00b6 Write unit tests for all new functionality Maintain or improve test coverage Use table-driven tests where appropriate Include both positive and negative test cases Example test: func TestQuestionSetBuilder ( t * testing . T ) { tests := [] struct { name string builder func () * QuestionSetBuilder wantError bool }{ { name : \"valid question set\" , builder : func () * QuestionSetBuilder { return NewQuestionSetBuilder (). SetTitle ( \"Test Quiz\" ). SetPassPercentage ( 70 ). AddMultipleChoiceQuestion ( \"Question?\" , validAnswers ) }, wantError : false , }, // Add more test cases... } for _ , tt := range tests { t . Run ( tt . name , func ( t * testing . T ) { _ , err := tt . builder (). Build () if ( err != nil ) != tt . wantError { t . Errorf ( \"Build() error = %v, wantError %v\" , err , tt . wantError ) } }) } } Types of Contributions \u00b6 Code Contributions \u00b6 New Features: - H5P content type support - Builder pattern improvements - Validation enhancements - Package management features Bug Fixes: - Validation issues - JSON marshaling/unmarshaling problems - Build failures - Documentation errors Performance Improvements: - Optimization of validation logic - Memory usage improvements - Build time optimizations Documentation \u00b6 API Documentation: - Function and method documentation - Code examples - Usage patterns User Guides: - Tutorials and how-tos - Best practices - Integration examples Reference Material: - H5P specification compliance - Schema documentation - Troubleshooting guides Testing \u00b6 Test Coverage: - Unit tests for new features - Integration tests - Error condition testing - Performance benchmarks Test Data: - Sample H5P content - Validation test cases - Edge case scenarios Specific Contribution Areas \u00b6 H5P Content Type Support \u00b6 To add support for a new H5P content type: Add schema definition: // schemas/newtype_types.go type NewTypeParams struct { // Define parameters based on H5P semantics } func ( p * NewTypeParams ) Validate () error { // Implement validation logic } Add semantics file: schemas/newtype_semantics.json Add tests: // schemas/newtype_test.go func TestNewTypeValidation ( t * testing . T ) { // Test validation logic } Update documentation: Add to API reference Create usage examples Update README if major feature Validation Improvements \u00b6 When improving validation: Identify validation gaps: Missing required field checks Business logic validation Cross-field validation Implement validation logic: func ( qs * QuestionSet ) Validate () error { var errors ValidationErrors if qs . Title == \"\" { errors = append ( errors , ValidationError { Field : \"title\" , Message : \"title is required\" , }) } // Add more validation... if len ( errors ) > 0 { return errors } return nil } Add comprehensive tests: func TestValidation ( t * testing . T ) { // Test all validation scenarios } Semantics Engine Improvements \u00b6 For semantics-related contributions: Study H5P semantics specification Identify missing field types or attributes Implement polymorphic handling as needed Add validation for new semantic elements Update documentation with examples Pull Request Process \u00b6 Before Submitting \u00b6 Ensure all tests pass: go test ./... -v Check code formatting: gofmt -s -w . Run static analysis: go vet ./... Update documentation: API documentation User guides if needed CHANGELOG.md entry Submitting the Pull Request \u00b6 Push your branch: git push origin feature/your-feature-name Create pull request: Use descriptive title Explain what changes were made Reference related issues Include testing information PR Description Template: ## Description Brief description of changes made. ## Type of Change - [ ] Bug fix - [ ] New feature - [ ] Breaking change - [ ] Documentation update ## Testing - [ ] Unit tests added/updated - [ ] All tests passing - [ ] Manual testing completed ## Checklist - [ ] Code follows project style guidelines - [ ] Self-review completed - [ ] Documentation updated - [ ] No breaking changes (or properly documented) Review Process \u00b6 Automated checks will run (tests, linting) Maintainer review will be requested Address feedback by updating your branch Approval and merge once ready Development Environment \u00b6 Recommended Tools \u00b6 IDE: VS Code with Go extension, GoLand Testing: Go test tools, testify library Linting: golangci-lint Documentation: godoc, mkdocs Local Testing \u00b6 # Run all tests go test ./... # Run tests with coverage go test -coverprofile = coverage.out ./... go tool cover -html = coverage.out # Run specific package tests go test ./schemas/ -v # Run benchmarks go test -bench = . ./... Community Guidelines \u00b6 Code of Conduct \u00b6 Be respectful and inclusive Focus on constructive feedback Help newcomers get started Follow project maintainer guidance Communication \u00b6 GitHub Issues: Bug reports, feature requests Pull Requests: Code contributions Discussions: Questions, ideas, general discussion Getting Help \u00b6 If you need help: Check existing documentation Search closed issues for similar problems Create a new issue with detailed information Be patient and provide additional context when requested Recognition \u00b6 Contributors will be: - Listed in project contributors - Credited in release notes for significant contributions - Invited to participate in project decisions for regular contributors License \u00b6 By contributing to this project, you agree that your contributions will be licensed under the MIT License. Thank you for contributing to the H5P Go SDK! Your contributions help make H5P content creation more accessible to Go developers.","title":"Contributing"},{"location":"development/contributing/#contributing","text":"We welcome contributions to the H5P Go SDK! This guide will help you get started with contributing to the project.","title":"Contributing"},{"location":"development/contributing/#getting-started","text":"","title":"Getting Started"},{"location":"development/contributing/#prerequisites","text":"Go 1.19 or later Git Basic understanding of H5P concepts Familiarity with Go development practices","title":"Prerequisites"},{"location":"development/contributing/#development-setup","text":"Fork and clone the repository: git clone https://github.com/yourusername/h5p-go.git cd h5p-go Install dependencies: go mod tidy Run tests to ensure everything works: go test ./... Build the project: go build ./...","title":"Development Setup"},{"location":"development/contributing/#development-workflow","text":"","title":"Development Workflow"},{"location":"development/contributing/#branch-strategy","text":"main - Stable release branch develop - Development branch (if used) feature/feature-name - Feature branches fix/issue-description - Bug fix branches docs/description - Documentation updates","title":"Branch Strategy"},{"location":"development/contributing/#making-changes","text":"Create a feature branch: git checkout -b feature/your-feature-name Make your changes: Write code following Go best practices Add tests for new functionality Update documentation as needed Follow existing code style and conventions Test your changes: go test ./... go vet ./... gofmt -s -w . Commit your changes: git add . git commit -m \"feat: add your feature description\"","title":"Making Changes"},{"location":"development/contributing/#commit-message-format","text":"Follow conventional commit format: feat: - New features fix: - Bug fixes docs: - Documentation updates style: - Code style changes refactor: - Code refactoring test: - Adding or updating tests chore: - Maintenance tasks Examples: feat: add support for Essay content type fix: resolve validation issue with empty questions docs: update API documentation for semantics test: add comprehensive validation tests","title":"Commit Message Format"},{"location":"development/contributing/#code-guidelines","text":"","title":"Code Guidelines"},{"location":"development/contributing/#go-style","text":"Follow standard Go conventions: Use gofmt for formatting Follow effective Go guidelines Use meaningful variable and function names Write clear, concise comments Handle errors appropriately","title":"Go Style"},{"location":"development/contributing/#package-structure","text":"h5p-go/ \u251c\u2500\u2500 *.go # Core functionality \u251c\u2500\u2500 schemas/ # Typed schema implementations \u251c\u2500\u2500 semantics/ # H5P semantics format \u251c\u2500\u2500 testdata/ # Test data files \u251c\u2500\u2500 docsrc/ # Documentation source \u2514\u2500\u2500 docs/ # Generated documentation","title":"Package Structure"},{"location":"development/contributing/#testing","text":"Write unit tests for all new functionality Maintain or improve test coverage Use table-driven tests where appropriate Include both positive and negative test cases Example test: func TestQuestionSetBuilder ( t * testing . T ) { tests := [] struct { name string builder func () * QuestionSetBuilder wantError bool }{ { name : \"valid question set\" , builder : func () * QuestionSetBuilder { return NewQuestionSetBuilder (). SetTitle ( \"Test Quiz\" ). SetPassPercentage ( 70 ). AddMultipleChoiceQuestion ( \"Question?\" , validAnswers ) }, wantError : false , }, // Add more test cases... } for _ , tt := range tests { t . Run ( tt . name , func ( t * testing . T ) { _ , err := tt . builder (). Build () if ( err != nil ) != tt . wantError { t . Errorf ( \"Build() error = %v, wantError %v\" , err , tt . wantError ) } }) } }","title":"Testing"},{"location":"development/contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"development/contributing/#code-contributions","text":"New Features: - H5P content type support - Builder pattern improvements - Validation enhancements - Package management features Bug Fixes: - Validation issues - JSON marshaling/unmarshaling problems - Build failures - Documentation errors Performance Improvements: - Optimization of validation logic - Memory usage improvements - Build time optimizations","title":"Code Contributions"},{"location":"development/contributing/#documentation","text":"API Documentation: - Function and method documentation - Code examples - Usage patterns User Guides: - Tutorials and how-tos - Best practices - Integration examples Reference Material: - H5P specification compliance - Schema documentation - Troubleshooting guides","title":"Documentation"},{"location":"development/contributing/#testing_1","text":"Test Coverage: - Unit tests for new features - Integration tests - Error condition testing - Performance benchmarks Test Data: - Sample H5P content - Validation test cases - Edge case scenarios","title":"Testing"},{"location":"development/contributing/#specific-contribution-areas","text":"","title":"Specific Contribution Areas"},{"location":"development/contributing/#h5p-content-type-support","text":"To add support for a new H5P content type: Add schema definition: // schemas/newtype_types.go type NewTypeParams struct { // Define parameters based on H5P semantics } func ( p * NewTypeParams ) Validate () error { // Implement validation logic } Add semantics file: schemas/newtype_semantics.json Add tests: // schemas/newtype_test.go func TestNewTypeValidation ( t * testing . T ) { // Test validation logic } Update documentation: Add to API reference Create usage examples Update README if major feature","title":"H5P Content Type Support"},{"location":"development/contributing/#validation-improvements","text":"When improving validation: Identify validation gaps: Missing required field checks Business logic validation Cross-field validation Implement validation logic: func ( qs * QuestionSet ) Validate () error { var errors ValidationErrors if qs . Title == \"\" { errors = append ( errors , ValidationError { Field : \"title\" , Message : \"title is required\" , }) } // Add more validation... if len ( errors ) > 0 { return errors } return nil } Add comprehensive tests: func TestValidation ( t * testing . T ) { // Test all validation scenarios }","title":"Validation Improvements"},{"location":"development/contributing/#semantics-engine-improvements","text":"For semantics-related contributions: Study H5P semantics specification Identify missing field types or attributes Implement polymorphic handling as needed Add validation for new semantic elements Update documentation with examples","title":"Semantics Engine Improvements"},{"location":"development/contributing/#pull-request-process","text":"","title":"Pull Request Process"},{"location":"development/contributing/#before-submitting","text":"Ensure all tests pass: go test ./... -v Check code formatting: gofmt -s -w . Run static analysis: go vet ./... Update documentation: API documentation User guides if needed CHANGELOG.md entry","title":"Before Submitting"},{"location":"development/contributing/#submitting-the-pull-request","text":"Push your branch: git push origin feature/your-feature-name Create pull request: Use descriptive title Explain what changes were made Reference related issues Include testing information PR Description Template: ## Description Brief description of changes made. ## Type of Change - [ ] Bug fix - [ ] New feature - [ ] Breaking change - [ ] Documentation update ## Testing - [ ] Unit tests added/updated - [ ] All tests passing - [ ] Manual testing completed ## Checklist - [ ] Code follows project style guidelines - [ ] Self-review completed - [ ] Documentation updated - [ ] No breaking changes (or properly documented)","title":"Submitting the Pull Request"},{"location":"development/contributing/#review-process","text":"Automated checks will run (tests, linting) Maintainer review will be requested Address feedback by updating your branch Approval and merge once ready","title":"Review Process"},{"location":"development/contributing/#development-environment","text":"","title":"Development Environment"},{"location":"development/contributing/#recommended-tools","text":"IDE: VS Code with Go extension, GoLand Testing: Go test tools, testify library Linting: golangci-lint Documentation: godoc, mkdocs","title":"Recommended Tools"},{"location":"development/contributing/#local-testing","text":"# Run all tests go test ./... # Run tests with coverage go test -coverprofile = coverage.out ./... go tool cover -html = coverage.out # Run specific package tests go test ./schemas/ -v # Run benchmarks go test -bench = . ./...","title":"Local Testing"},{"location":"development/contributing/#community-guidelines","text":"","title":"Community Guidelines"},{"location":"development/contributing/#code-of-conduct","text":"Be respectful and inclusive Focus on constructive feedback Help newcomers get started Follow project maintainer guidance","title":"Code of Conduct"},{"location":"development/contributing/#communication","text":"GitHub Issues: Bug reports, feature requests Pull Requests: Code contributions Discussions: Questions, ideas, general discussion","title":"Communication"},{"location":"development/contributing/#getting-help","text":"If you need help: Check existing documentation Search closed issues for similar problems Create a new issue with detailed information Be patient and provide additional context when requested","title":"Getting Help"},{"location":"development/contributing/#recognition","text":"Contributors will be: - Listed in project contributors - Credited in release notes for significant contributions - Invited to participate in project decisions for regular contributors","title":"Recognition"},{"location":"development/contributing/#license","text":"By contributing to this project, you agree that your contributions will be licensed under the MIT License. Thank you for contributing to the H5P Go SDK! Your contributions help make H5P content creation more accessible to Go developers.","title":"License"},{"location":"development/roadmap/","text":"Roadmap \u00b6 Future development plans for the H5P Go SDK. Current Status \u00b6 The H5P Go SDK currently supports: \u2705 Question Set creation and management \u2705 MultiChoice content type (typed) \u2705 H5P package creation and export \u2705 Comprehensive validation system \u2705 Polymorphic semantics field handling \u2705 Builder pattern for content creation Short Term (Next 3-6 months) \u00b6 Content Type Support \u00b6 [ ] Essay Content Type - Open-ended text responses [ ] True/False Content Type - Simple true/false questions [ ] Single Choice Set - Optimized single-choice questions [ ] Image Hotspots - Interactive image-based questions Enhanced Validation \u00b6 [ ] Cross-field validation - Relationships between fields [ ] Business logic validation - Sensible value checking [ ] Custom validation rules - User-defined validation [ ] Validation performance - Optimize validation speed Developer Experience \u00b6 [ ] Better error messages - More helpful validation errors [ ] Code generation - Generate types from semantics [ ] CLI tool - Command-line H5P utilities [ ] VS Code extension - IDE support for H5P development Medium Term (6-12 months) \u00b6 Advanced Features \u00b6 [ ] Content migration tools - Version upgrade utilities [ ] Template system - Pre-built content templates [ ] Batch operations - Process multiple content items [ ] Content analytics - Usage and performance metrics Integration Support \u00b6 [ ] LMS integration helpers - Moodle, Canvas, etc. [ ] WordPress plugin support - Direct WordPress integration [ ] RESTful API wrapper - HTTP API for H5P operations [ ] GraphQL schema - GraphQL support for H5P content Performance & Scale \u00b6 [ ] Streaming processing - Handle large content sets [ ] Parallel processing - Concurrent content operations [ ] Memory optimization - Reduce memory footprint [ ] Caching system - Performance optimization Long Term (12+ months) \u00b6 Ecosystem Expansion \u00b6 [ ] H5P Editor integration - Visual content editor [ ] Content marketplace - Share and distribute content [ ] Custom content types - Framework for new content types [ ] Plugin architecture - Extensible functionality Advanced Content Types \u00b6 [ ] Interactive Video - Video with embedded interactions [ ] Course Presentation - Slide-based presentations [ ] Interactive Timeline - Time-based content [ ] Virtual Tour - 360\u00b0 and VR content Enterprise Features \u00b6 [ ] Multi-tenant support - Isolated content spaces [ ] SSO integration - Enterprise authentication [ ] Audit logging - Content change tracking [ ] Advanced permissions - Fine-grained access control Community Priorities \u00b6 Based on community feedback, we'll prioritize: More Content Types - Expanding beyond MultiChoice Better Documentation - More examples and tutorials Integration Guides - Platform-specific integration help Performance - Faster content processing Testing Tools - Better validation and testing utilities How to Contribute \u00b6 High Impact Areas \u00b6 Content Type Implementation - Add support for new H5P content types Validation Improvements - Enhance content validation Documentation - Create tutorials and examples Testing - Improve test coverage and quality Getting Started \u00b6 Check the Contributing Guide for setup instructions Look for issues labeled good-first-issue or help-wanted Join discussions on content type priorities Submit bug reports and feature requests Requesting Features \u00b6 When requesting features: 1. Check existing issues to avoid duplicates 2. Provide use cases explaining why the feature is needed 3. Include examples of how the feature would be used 4. Consider implementation - think about how it might work Example feature request: ## Feature Request: Interactive Timeline Support ### Use Case Educational content creators need to present historical events in an interactive timeline format. ### Proposed Solution Add support for H5P.Timeline content type with: - Event plotting on timeline - Rich media for each event - Zoom and navigation controls ### Additional Context Timeline is one of the most requested content types in H5P community forums. Technology Considerations \u00b6 Go Ecosystem \u00b6 Modules - Maintain Go module compatibility Generics - Evaluate using Go generics for type safety Performance - Leverage Go's concurrency features Testing - Use Go's excellent testing framework H5P Compatibility \u00b6 Specification compliance - Follow official H5P specs Version compatibility - Support multiple H5P versions Platform testing - Ensure cross-platform compatibility Standards adherence - Follow web standards and accessibility Development Process \u00b6 Semantic versioning - Predictable version releases Backward compatibility - Minimize breaking changes Documentation-driven - Document before implementing Test-driven development - Tests first, then implementation Release Schedule \u00b6 Minor Releases (Monthly) \u00b6 Bug fixes Small feature additions Documentation updates Performance improvements Major Releases (Quarterly) \u00b6 New content type support Significant API changes Major feature additions Breaking changes (when necessary) Patch Releases (As Needed) \u00b6 Critical bug fixes Security updates Documentation corrections Feedback and Input \u00b6 We welcome feedback on this roadmap: GitHub Issues - Feature requests and bug reports GitHub Discussions - Ideas and general feedback Community Surveys - Periodic priority surveys Direct Contact - Reach out to maintainers Your input helps shape the future of the H5P Go SDK. Thank you for being part of the community! Last updated: January 2024 This roadmap is subject to change based on community feedback and development priorities.","title":"Roadmap"},{"location":"development/roadmap/#roadmap","text":"Future development plans for the H5P Go SDK.","title":"Roadmap"},{"location":"development/roadmap/#current-status","text":"The H5P Go SDK currently supports: \u2705 Question Set creation and management \u2705 MultiChoice content type (typed) \u2705 H5P package creation and export \u2705 Comprehensive validation system \u2705 Polymorphic semantics field handling \u2705 Builder pattern for content creation","title":"Current Status"},{"location":"development/roadmap/#short-term-next-3-6-months","text":"","title":"Short Term (Next 3-6 months)"},{"location":"development/roadmap/#content-type-support","text":"[ ] Essay Content Type - Open-ended text responses [ ] True/False Content Type - Simple true/false questions [ ] Single Choice Set - Optimized single-choice questions [ ] Image Hotspots - Interactive image-based questions","title":"Content Type Support"},{"location":"development/roadmap/#enhanced-validation","text":"[ ] Cross-field validation - Relationships between fields [ ] Business logic validation - Sensible value checking [ ] Custom validation rules - User-defined validation [ ] Validation performance - Optimize validation speed","title":"Enhanced Validation"},{"location":"development/roadmap/#developer-experience","text":"[ ] Better error messages - More helpful validation errors [ ] Code generation - Generate types from semantics [ ] CLI tool - Command-line H5P utilities [ ] VS Code extension - IDE support for H5P development","title":"Developer Experience"},{"location":"development/roadmap/#medium-term-6-12-months","text":"","title":"Medium Term (6-12 months)"},{"location":"development/roadmap/#advanced-features","text":"[ ] Content migration tools - Version upgrade utilities [ ] Template system - Pre-built content templates [ ] Batch operations - Process multiple content items [ ] Content analytics - Usage and performance metrics","title":"Advanced Features"},{"location":"development/roadmap/#integration-support","text":"[ ] LMS integration helpers - Moodle, Canvas, etc. [ ] WordPress plugin support - Direct WordPress integration [ ] RESTful API wrapper - HTTP API for H5P operations [ ] GraphQL schema - GraphQL support for H5P content","title":"Integration Support"},{"location":"development/roadmap/#performance-scale","text":"[ ] Streaming processing - Handle large content sets [ ] Parallel processing - Concurrent content operations [ ] Memory optimization - Reduce memory footprint [ ] Caching system - Performance optimization","title":"Performance &amp; Scale"},{"location":"development/roadmap/#long-term-12-months","text":"","title":"Long Term (12+ months)"},{"location":"development/roadmap/#ecosystem-expansion","text":"[ ] H5P Editor integration - Visual content editor [ ] Content marketplace - Share and distribute content [ ] Custom content types - Framework for new content types [ ] Plugin architecture - Extensible functionality","title":"Ecosystem Expansion"},{"location":"development/roadmap/#advanced-content-types","text":"[ ] Interactive Video - Video with embedded interactions [ ] Course Presentation - Slide-based presentations [ ] Interactive Timeline - Time-based content [ ] Virtual Tour - 360\u00b0 and VR content","title":"Advanced Content Types"},{"location":"development/roadmap/#enterprise-features","text":"[ ] Multi-tenant support - Isolated content spaces [ ] SSO integration - Enterprise authentication [ ] Audit logging - Content change tracking [ ] Advanced permissions - Fine-grained access control","title":"Enterprise Features"},{"location":"development/roadmap/#community-priorities","text":"Based on community feedback, we'll prioritize: More Content Types - Expanding beyond MultiChoice Better Documentation - More examples and tutorials Integration Guides - Platform-specific integration help Performance - Faster content processing Testing Tools - Better validation and testing utilities","title":"Community Priorities"},{"location":"development/roadmap/#how-to-contribute","text":"","title":"How to Contribute"},{"location":"development/roadmap/#high-impact-areas","text":"Content Type Implementation - Add support for new H5P content types Validation Improvements - Enhance content validation Documentation - Create tutorials and examples Testing - Improve test coverage and quality","title":"High Impact Areas"},{"location":"development/roadmap/#getting-started","text":"Check the Contributing Guide for setup instructions Look for issues labeled good-first-issue or help-wanted Join discussions on content type priorities Submit bug reports and feature requests","title":"Getting Started"},{"location":"development/roadmap/#requesting-features","text":"When requesting features: 1. Check existing issues to avoid duplicates 2. Provide use cases explaining why the feature is needed 3. Include examples of how the feature would be used 4. Consider implementation - think about how it might work Example feature request: ## Feature Request: Interactive Timeline Support ### Use Case Educational content creators need to present historical events in an interactive timeline format. ### Proposed Solution Add support for H5P.Timeline content type with: - Event plotting on timeline - Rich media for each event - Zoom and navigation controls ### Additional Context Timeline is one of the most requested content types in H5P community forums.","title":"Requesting Features"},{"location":"development/roadmap/#technology-considerations","text":"","title":"Technology Considerations"},{"location":"development/roadmap/#go-ecosystem","text":"Modules - Maintain Go module compatibility Generics - Evaluate using Go generics for type safety Performance - Leverage Go's concurrency features Testing - Use Go's excellent testing framework","title":"Go Ecosystem"},{"location":"development/roadmap/#h5p-compatibility","text":"Specification compliance - Follow official H5P specs Version compatibility - Support multiple H5P versions Platform testing - Ensure cross-platform compatibility Standards adherence - Follow web standards and accessibility","title":"H5P Compatibility"},{"location":"development/roadmap/#development-process","text":"Semantic versioning - Predictable version releases Backward compatibility - Minimize breaking changes Documentation-driven - Document before implementing Test-driven development - Tests first, then implementation","title":"Development Process"},{"location":"development/roadmap/#release-schedule","text":"","title":"Release Schedule"},{"location":"development/roadmap/#minor-releases-monthly","text":"Bug fixes Small feature additions Documentation updates Performance improvements","title":"Minor Releases (Monthly)"},{"location":"development/roadmap/#major-releases-quarterly","text":"New content type support Significant API changes Major feature additions Breaking changes (when necessary)","title":"Major Releases (Quarterly)"},{"location":"development/roadmap/#patch-releases-as-needed","text":"Critical bug fixes Security updates Documentation corrections","title":"Patch Releases (As Needed)"},{"location":"development/roadmap/#feedback-and-input","text":"We welcome feedback on this roadmap: GitHub Issues - Feature requests and bug reports GitHub Discussions - Ideas and general feedback Community Surveys - Periodic priority surveys Direct Contact - Reach out to maintainers Your input helps shape the future of the H5P Go SDK. Thank you for being part of the community! Last updated: January 2024 This roadmap is subject to change based on community feedback and development priorities.","title":"Feedback and Input"},{"location":"development/testing/","text":"Testing \u00b6 Testing strategies and guidelines for the H5P Go SDK. Coming Soon \u00b6 Testing documentation including: Unit testing patterns Integration testing Test data management Coverage requirements Comprehensive testing guide coming soon!","title":"Testing"},{"location":"development/testing/#testing","text":"Testing strategies and guidelines for the H5P Go SDK.","title":"Testing"},{"location":"development/testing/#coming-soon","text":"Testing documentation including: Unit testing patterns Integration testing Test data management Coverage requirements Comprehensive testing guide coming soon!","title":"Coming Soon"},{"location":"examples/advanced/","text":"Advanced Examples \u00b6 This page covers advanced usage patterns and complex scenarios with the H5P Go SDK. Coming Soon \u00b6 Advanced examples will be added covering: Complex question set scenarios Custom validation logic Performance optimization techniques Integration with external systems Check back soon for detailed examples!","title":"Advanced Usage"},{"location":"examples/advanced/#advanced-examples","text":"This page covers advanced usage patterns and complex scenarios with the H5P Go SDK.","title":"Advanced Examples"},{"location":"examples/advanced/#coming-soon","text":"Advanced examples will be added covering: Complex question set scenarios Custom validation logic Performance optimization techniques Integration with external systems Check back soon for detailed examples!","title":"Coming Soon"},{"location":"examples/basic/","text":"Basic Examples \u00b6 This page provides practical examples for common H5P Go SDK usage patterns. Simple Quiz Creation \u00b6 Basic Multiple Choice Quiz \u00b6 package main import ( \"fmt\" \"log\" \"os\" \"github.com/grokify/h5p-go\" ) func main () { // Create a simple geography quiz quiz := createGeographyQuiz () // Export to JSON file jsonData , err := quiz . ToJSON () if err != nil { log . Fatal ( \"JSON export failed:\" , err ) } err = os . WriteFile ( \"geography-quiz.json\" , jsonData , 0644 ) if err != nil { log . Fatal ( \"File write failed:\" , err ) } fmt . Println ( \"Geography quiz created successfully!\" ) fmt . Printf ( \"Title: %s\\n\" , quiz . Title ) fmt . Printf ( \"Questions: %d\\n\" , len ( quiz . Questions )) fmt . Printf ( \"Pass percentage: %d%%\\n\" , quiz . PassPercentage ) } func createGeographyQuiz () * h5p . QuestionSet { builder := h5p . NewQuestionSetBuilder () // Question 1: Capital cities capitalAnswers := [] h5p . Answer { h5p . CreateAnswerWithFeedback ( \"Paris\" , true , \"Correct! Paris is the capital of France.\" ), h5p . CreateAnswerWithFeedback ( \"London\" , false , \"London is the capital of the United Kingdom.\" ), h5p . CreateAnswerWithFeedback ( \"Berlin\" , false , \"Berlin is the capital of Germany.\" ), h5p . CreateAnswerWithFeedback ( \"Madrid\" , false , \"Madrid is the capital of Spain.\" ), } // Question 2: Continents continentAnswers := [] h5p . Answer { h5p . CreateAnswerWithFeedback ( \"Asia\" , true , \"Correct! Asia is the largest continent.\" ), h5p . CreateAnswerWithFeedback ( \"Africa\" , false , \"Africa is the second largest continent.\" ), h5p . CreateAnswerWithFeedback ( \"North America\" , false , \"North America is the third largest.\" ), h5p . CreateAnswerWithFeedback ( \"Europe\" , false , \"Europe is much smaller than Asia.\" ), } // Question 3: Oceans oceanAnswers := [] h5p . Answer { h5p . CreateAnswerWithFeedback ( \"Pacific Ocean\" , true , \"Correct! The Pacific is the largest ocean.\" ), h5p . CreateAnswerWithFeedback ( \"Atlantic Ocean\" , false , \"The Atlantic is the second largest.\" ), h5p . CreateAnswerWithFeedback ( \"Indian Ocean\" , false , \"The Indian Ocean is the third largest.\" ), h5p . CreateAnswerWithFeedback ( \"Arctic Ocean\" , false , \"The Arctic Ocean is the smallest.\" ), } // Overall feedback based on performance feedback := [] h5p . OverallFeedback { { From : 0 , To : 40 , Feedback : \"Keep studying geography! There's so much to learn about our world.\" , }, { From : 41 , To : 70 , Feedback : \"Good job! You have solid basic geography knowledge.\" , }, { From : 71 , To : 100 , Feedback : \"Excellent! You're a geography expert!\" , }, } // Build the complete quiz questionSet , err := builder . SetTitle ( \"Basic Geography Quiz\" ). SetProgressType ( \"textual\" ). SetPassPercentage ( 60 ). SetIntroduction ( \"Test your knowledge of world geography with this fun quiz!\" ). SetStartButtonText ( \"Start Quiz\" ). AddMultipleChoiceQuestion ( \"What is the capital of France?\" , capitalAnswers ). AddMultipleChoiceQuestion ( \"Which is the largest continent by area?\" , continentAnswers ). AddMultipleChoiceQuestion ( \"What is the largest ocean on Earth?\" , oceanAnswers ). AddOverallFeedback ( feedback ). Build () if err != nil { log . Fatal ( \"Failed to build quiz:\" , err ) } return questionSet } Loading and Modifying Existing Content \u00b6 Load and Update Quiz \u00b6 package main import ( \"fmt\" \"log\" \"os\" \"github.com/grokify/h5p-go\" ) func main () { // Load existing quiz from JSON file quiz , err := loadQuizFromFile ( \"existing-quiz.json\" ) if err != nil { log . Fatal ( \"Failed to load quiz:\" , err ) } fmt . Printf ( \"Loaded quiz: %s\\n\" , quiz . Title ) fmt . Printf ( \"Original questions: %d\\n\" , len ( quiz . Questions )) // Add a new question newAnswers := [] h5p . Answer { h5p . CreateAnswer ( \"7\" , false ), h5p . CreateAnswer ( \"8\" , true ), h5p . CreateAnswer ( \"9\" , false ), h5p . CreateAnswer ( \"10\" , false ), } // Create new question newQuestion := h5p . Question { Library : \"H5P.MultiChoice 1.16\" , Params : map [ string ] interface {}{ \"question\" : \"What is 4 + 4?\" , \"answers\" : convertAnswersToParams ( newAnswers ), }, } // Add to existing quiz quiz . Questions = append ( quiz . Questions , newQuestion ) // Update title quiz . Title = \"Updated \" + quiz . Title // Validate modified quiz if err := quiz . Validate (); err != nil { log . Fatal ( \"Modified quiz validation failed:\" , err ) } // Save updated quiz jsonData , err := quiz . ToJSON () if err != nil { log . Fatal ( \"JSON export failed:\" , err ) } err = os . WriteFile ( \"updated-quiz.json\" , jsonData , 0644 ) if err != nil { log . Fatal ( \"File write failed:\" , err ) } fmt . Printf ( \"Updated quiz saved with %d questions\\n\" , len ( quiz . Questions )) } func loadQuizFromFile ( filename string ) ( * h5p . QuestionSet , error ) { jsonData , err := os . ReadFile ( filename ) if err != nil { return nil , err } quiz , err := h5p . FromJSON ( jsonData ) if err != nil { return nil , err } // Validate loaded content if err := quiz . Validate (); err != nil { return nil , fmt . Errorf ( \"loaded quiz is invalid: %w\" , err ) } return quiz , nil } func convertAnswersToParams ( answers [] h5p . Answer ) [] map [ string ] interface {} { params := make ([] map [ string ] interface {}, len ( answers )) for i , answer := range answers { params [ i ] = map [ string ] interface {}{ \"text\" : answer . Text , \"correct\" : answer . Correct , } if answer . Feedback != \"\" { params [ i ][ \"feedback\" ] = answer . Feedback } } return params } Working with Different Question Types \u00b6 True/False Questions \u00b6 func createTrueFalseQuiz () * h5p . QuestionSet { builder := h5p . NewQuestionSetBuilder () // True/False questions have exactly 2 answers question1Answers := [] h5p . Answer { h5p . CreateAnswerWithFeedback ( \"True\" , true , \"Correct! The Earth is indeed round.\" ), h5p . CreateAnswerWithFeedback ( \"False\" , false , \"Incorrect. The Earth is approximately spherical.\" ), } question2Answers := [] h5p . Answer { h5p . CreateAnswerWithFeedback ( \"True\" , false , \"Incorrect. Water boils at 100\u00b0C, not freezes.\" ), h5p . CreateAnswerWithFeedback ( \"False\" , true , \"Correct! Water freezes at 0\u00b0C.\" ), } questionSet , err := builder . SetTitle ( \"True or False Science Quiz\" ). SetProgressType ( \"dots\" ). SetPassPercentage ( 50 ). SetIntroduction ( \"Test your science knowledge with these true/false questions.\" ). AddMultipleChoiceQuestion ( \"The Earth is round.\" , question1Answers ). AddMultipleChoiceQuestion ( \"Water freezes at 100 degrees Celsius.\" , question2Answers ). Build () if err != nil { log . Fatal ( \"Failed to build true/false quiz:\" , err ) } return questionSet } Multi-Select Questions \u00b6 func createMultiSelectQuiz () * h5p . QuestionSet { builder := h5p . NewQuestionSetBuilder () // Multiple correct answers programmingAnswers := [] h5p . Answer { h5p . CreateAnswer ( \"Go\" , true ), // Correct h5p . CreateAnswer ( \"Python\" , true ), // Correct h5p . CreateAnswer ( \"Java\" , true ), // Correct h5p . CreateAnswer ( \"HTML\" , false ), // Not a programming language h5p . CreateAnswer ( \"CSS\" , false ), // Not a programming language } // Single correct answer for comparison capitalAnswers := [] h5p . Answer { h5p . CreateAnswer ( \"Tokyo\" , true ), h5p . CreateAnswer ( \"Osaka\" , false ), h5p . CreateAnswer ( \"Kyoto\" , false ), } questionSet , err := builder . SetTitle ( \"Mixed Question Types\" ). SetProgressType ( \"textual\" ). SetPassPercentage ( 70 ). SetIntroduction ( \"This quiz has both single-answer and multiple-answer questions.\" ). AddMultipleChoiceQuestion ( \"Which of these are programming languages? (Select all that apply)\" , programmingAnswers ). AddMultipleChoiceQuestion ( \"What is the capital of Japan?\" , capitalAnswers ). Build () if err != nil { log . Fatal ( \"Failed to build multi-select quiz:\" , err ) } return questionSet } Error Handling Patterns \u00b6 Comprehensive Error Handling \u00b6 func createQuizWithErrorHandling () ( * h5p . QuestionSet , error ) { builder := h5p . NewQuestionSetBuilder () // Validate inputs before building title := \"Programming Quiz\" if title == \"\" { return nil , fmt . Errorf ( \"quiz title cannot be empty\" ) } passPercentage := 75 if passPercentage < 0 || passPercentage > 100 { return nil , fmt . Errorf ( \"pass percentage must be between 0 and 100, got %d\" , passPercentage ) } // Create answers with validation answers , err := createValidatedAnswers () if err != nil { return nil , fmt . Errorf ( \"failed to create answers: %w\" , err ) } // Build with error handling questionSet , err := builder . SetTitle ( title ). SetProgressType ( \"textual\" ). SetPassPercentage ( passPercentage ). SetIntroduction ( \"Welcome to the programming quiz!\" ). AddMultipleChoiceQuestion ( \"What is Go?\" , answers ). Build () if err != nil { return nil , fmt . Errorf ( \"failed to build question set: %w\" , err ) } // Additional validation if len ( questionSet . Questions ) == 0 { return nil , fmt . Errorf ( \"question set must have at least one question\" ) } // Final validation if err := questionSet . Validate (); err != nil { return nil , fmt . Errorf ( \"question set validation failed: %w\" , err ) } return questionSet , nil } func createValidatedAnswers () ([] h5p . Answer , error ) { answers := [] h5p . Answer { { Text : \"A programming language\" , Correct : true }, { Text : \"A database\" , Correct : false }, { Text : \"An operating system\" , Correct : false }, { Text : \"A web browser\" , Correct : false }, } // Validate answers if len ( answers ) < 2 { return nil , fmt . Errorf ( \"need at least 2 answers\" ) } hasCorrect := false for i , answer := range answers { if answer . Text == \"\" { return nil , fmt . Errorf ( \"answer %d has empty text\" , i + 1 ) } if answer . Correct { hasCorrect = true } } if ! hasCorrect { return nil , fmt . Errorf ( \"at least one answer must be correct\" ) } return answers , nil } Batch Processing \u00b6 Create Multiple Quizzes \u00b6 func createMultipleQuizzes () error { quizData := [] struct { title string questions [] QuestionData }{ { title : \"Math Quiz\" , questions : [] QuestionData { { text : \"What is 2 + 2?\" , answers : [] AnswerData { { text : \"4\" , correct : true }, { text : \"3\" , correct : false }, { text : \"5\" , correct : false }, }, }, }, }, { title : \"Science Quiz\" , questions : [] QuestionData { { text : \"What is H2O?\" , answers : [] AnswerData { { text : \"Water\" , correct : true }, { text : \"Hydrogen\" , correct : false }, { text : \"Oxygen\" , correct : false }, }, }, }, }, } for i , data := range quizData { quiz , err := buildQuizFromData ( data ) if err != nil { return fmt . Errorf ( \"failed to create quiz %d: %w\" , i + 1 , err ) } filename := fmt . Sprintf ( \"quiz-%d.json\" , i + 1 ) if err := exportQuiz ( quiz , filename ); err != nil { return fmt . Errorf ( \"failed to export quiz %d: %w\" , i + 1 , err ) } fmt . Printf ( \"Created %s\\n\" , filename ) } return nil } type QuestionData struct { text string answers [] AnswerData } type AnswerData struct { text string correct bool feedback string } func buildQuizFromData ( data struct { title string questions [] QuestionData }) ( * h5p . QuestionSet , error ) { builder := h5p . NewQuestionSetBuilder (). SetTitle ( data . title ). SetProgressType ( \"textual\" ). SetPassPercentage ( 60 ) for _ , q := range data . questions { answers := make ([] h5p . Answer , len ( q . answers )) for i , a := range q . answers { answers [ i ] = h5p . Answer { Text : a . text , Correct : a . correct , Feedback : a . feedback , } } builder = builder . AddMultipleChoiceQuestion ( q . text , answers ) } return builder . Build () } func exportQuiz ( quiz * h5p . QuestionSet , filename string ) error { jsonData , err := quiz . ToJSON () if err != nil { return err } return os . WriteFile ( filename , jsonData , 0644 ) } Integration Examples \u00b6 Web API Integration \u00b6 // HTTP handler for creating quizzes func createQuizHandler ( w http . ResponseWriter , r * http . Request ) { var request struct { Title string `json:\"title\"` Questions [] struct { Text string `json:\"text\"` Answers [] struct { Text string `json:\"text\"` Correct bool `json:\"correct\"` Feedback string `json:\"feedback,omitempty\"` } `json:\"answers\"` } `json:\"questions\"` PassPercentage int `json:\"passPercentage\"` } if err := json . NewDecoder ( r . Body ). Decode ( & request ); err != nil { http . Error ( w , \"Invalid JSON\" , http . StatusBadRequest ) return } // Build quiz from request builder := h5p . NewQuestionSetBuilder (). SetTitle ( request . Title ). SetProgressType ( \"textual\" ). SetPassPercentage ( request . PassPercentage ) for _ , q := range request . Questions { answers := make ([] h5p . Answer , len ( q . Answers )) for i , a := range q . Answers { answers [ i ] = h5p . Answer { Text : a . Text , Correct : a . Correct , Feedback : a . Feedback , } } builder = builder . AddMultipleChoiceQuestion ( q . Text , answers ) } quiz , err := builder . Build () if err != nil { http . Error ( w , fmt . Sprintf ( \"Build failed: %v\" , err ), http . StatusBadRequest ) return } // Validate if err := quiz . Validate (); err != nil { http . Error ( w , fmt . Sprintf ( \"Validation failed: %v\" , err ), http . StatusBadRequest ) return } // Return JSON w . Header (). Set ( \"Content-Type\" , \"application/json\" ) jsonData , _ := quiz . ToJSON () w . Write ( jsonData ) } These examples demonstrate the most common usage patterns for the H5P Go SDK. They show how to create content, handle errors properly, and integrate with larger applications. Next Steps \u00b6 Advanced Examples - More complex usage patterns Package Examples - Creating complete H5P packages User Guide - Comprehensive documentation","title":"Basic Usage"},{"location":"examples/basic/#basic-examples","text":"This page provides practical examples for common H5P Go SDK usage patterns.","title":"Basic Examples"},{"location":"examples/basic/#simple-quiz-creation","text":"","title":"Simple Quiz Creation"},{"location":"examples/basic/#basic-multiple-choice-quiz","text":"package main import ( \"fmt\" \"log\" \"os\" \"github.com/grokify/h5p-go\" ) func main () { // Create a simple geography quiz quiz := createGeographyQuiz () // Export to JSON file jsonData , err := quiz . ToJSON () if err != nil { log . Fatal ( \"JSON export failed:\" , err ) } err = os . WriteFile ( \"geography-quiz.json\" , jsonData , 0644 ) if err != nil { log . Fatal ( \"File write failed:\" , err ) } fmt . Println ( \"Geography quiz created successfully!\" ) fmt . Printf ( \"Title: %s\\n\" , quiz . Title ) fmt . Printf ( \"Questions: %d\\n\" , len ( quiz . Questions )) fmt . Printf ( \"Pass percentage: %d%%\\n\" , quiz . PassPercentage ) } func createGeographyQuiz () * h5p . QuestionSet { builder := h5p . NewQuestionSetBuilder () // Question 1: Capital cities capitalAnswers := [] h5p . Answer { h5p . CreateAnswerWithFeedback ( \"Paris\" , true , \"Correct! Paris is the capital of France.\" ), h5p . CreateAnswerWithFeedback ( \"London\" , false , \"London is the capital of the United Kingdom.\" ), h5p . CreateAnswerWithFeedback ( \"Berlin\" , false , \"Berlin is the capital of Germany.\" ), h5p . CreateAnswerWithFeedback ( \"Madrid\" , false , \"Madrid is the capital of Spain.\" ), } // Question 2: Continents continentAnswers := [] h5p . Answer { h5p . CreateAnswerWithFeedback ( \"Asia\" , true , \"Correct! Asia is the largest continent.\" ), h5p . CreateAnswerWithFeedback ( \"Africa\" , false , \"Africa is the second largest continent.\" ), h5p . CreateAnswerWithFeedback ( \"North America\" , false , \"North America is the third largest.\" ), h5p . CreateAnswerWithFeedback ( \"Europe\" , false , \"Europe is much smaller than Asia.\" ), } // Question 3: Oceans oceanAnswers := [] h5p . Answer { h5p . CreateAnswerWithFeedback ( \"Pacific Ocean\" , true , \"Correct! The Pacific is the largest ocean.\" ), h5p . CreateAnswerWithFeedback ( \"Atlantic Ocean\" , false , \"The Atlantic is the second largest.\" ), h5p . CreateAnswerWithFeedback ( \"Indian Ocean\" , false , \"The Indian Ocean is the third largest.\" ), h5p . CreateAnswerWithFeedback ( \"Arctic Ocean\" , false , \"The Arctic Ocean is the smallest.\" ), } // Overall feedback based on performance feedback := [] h5p . OverallFeedback { { From : 0 , To : 40 , Feedback : \"Keep studying geography! There's so much to learn about our world.\" , }, { From : 41 , To : 70 , Feedback : \"Good job! You have solid basic geography knowledge.\" , }, { From : 71 , To : 100 , Feedback : \"Excellent! You're a geography expert!\" , }, } // Build the complete quiz questionSet , err := builder . SetTitle ( \"Basic Geography Quiz\" ). SetProgressType ( \"textual\" ). SetPassPercentage ( 60 ). SetIntroduction ( \"Test your knowledge of world geography with this fun quiz!\" ). SetStartButtonText ( \"Start Quiz\" ). AddMultipleChoiceQuestion ( \"What is the capital of France?\" , capitalAnswers ). AddMultipleChoiceQuestion ( \"Which is the largest continent by area?\" , continentAnswers ). AddMultipleChoiceQuestion ( \"What is the largest ocean on Earth?\" , oceanAnswers ). AddOverallFeedback ( feedback ). Build () if err != nil { log . Fatal ( \"Failed to build quiz:\" , err ) } return questionSet }","title":"Basic Multiple Choice Quiz"},{"location":"examples/basic/#loading-and-modifying-existing-content","text":"","title":"Loading and Modifying Existing Content"},{"location":"examples/basic/#load-and-update-quiz","text":"package main import ( \"fmt\" \"log\" \"os\" \"github.com/grokify/h5p-go\" ) func main () { // Load existing quiz from JSON file quiz , err := loadQuizFromFile ( \"existing-quiz.json\" ) if err != nil { log . Fatal ( \"Failed to load quiz:\" , err ) } fmt . Printf ( \"Loaded quiz: %s\\n\" , quiz . Title ) fmt . Printf ( \"Original questions: %d\\n\" , len ( quiz . Questions )) // Add a new question newAnswers := [] h5p . Answer { h5p . CreateAnswer ( \"7\" , false ), h5p . CreateAnswer ( \"8\" , true ), h5p . CreateAnswer ( \"9\" , false ), h5p . CreateAnswer ( \"10\" , false ), } // Create new question newQuestion := h5p . Question { Library : \"H5P.MultiChoice 1.16\" , Params : map [ string ] interface {}{ \"question\" : \"What is 4 + 4?\" , \"answers\" : convertAnswersToParams ( newAnswers ), }, } // Add to existing quiz quiz . Questions = append ( quiz . Questions , newQuestion ) // Update title quiz . Title = \"Updated \" + quiz . Title // Validate modified quiz if err := quiz . Validate (); err != nil { log . Fatal ( \"Modified quiz validation failed:\" , err ) } // Save updated quiz jsonData , err := quiz . ToJSON () if err != nil { log . Fatal ( \"JSON export failed:\" , err ) } err = os . WriteFile ( \"updated-quiz.json\" , jsonData , 0644 ) if err != nil { log . Fatal ( \"File write failed:\" , err ) } fmt . Printf ( \"Updated quiz saved with %d questions\\n\" , len ( quiz . Questions )) } func loadQuizFromFile ( filename string ) ( * h5p . QuestionSet , error ) { jsonData , err := os . ReadFile ( filename ) if err != nil { return nil , err } quiz , err := h5p . FromJSON ( jsonData ) if err != nil { return nil , err } // Validate loaded content if err := quiz . Validate (); err != nil { return nil , fmt . Errorf ( \"loaded quiz is invalid: %w\" , err ) } return quiz , nil } func convertAnswersToParams ( answers [] h5p . Answer ) [] map [ string ] interface {} { params := make ([] map [ string ] interface {}, len ( answers )) for i , answer := range answers { params [ i ] = map [ string ] interface {}{ \"text\" : answer . Text , \"correct\" : answer . Correct , } if answer . Feedback != \"\" { params [ i ][ \"feedback\" ] = answer . Feedback } } return params }","title":"Load and Update Quiz"},{"location":"examples/basic/#working-with-different-question-types","text":"","title":"Working with Different Question Types"},{"location":"examples/basic/#truefalse-questions","text":"func createTrueFalseQuiz () * h5p . QuestionSet { builder := h5p . NewQuestionSetBuilder () // True/False questions have exactly 2 answers question1Answers := [] h5p . Answer { h5p . CreateAnswerWithFeedback ( \"True\" , true , \"Correct! The Earth is indeed round.\" ), h5p . CreateAnswerWithFeedback ( \"False\" , false , \"Incorrect. The Earth is approximately spherical.\" ), } question2Answers := [] h5p . Answer { h5p . CreateAnswerWithFeedback ( \"True\" , false , \"Incorrect. Water boils at 100\u00b0C, not freezes.\" ), h5p . CreateAnswerWithFeedback ( \"False\" , true , \"Correct! Water freezes at 0\u00b0C.\" ), } questionSet , err := builder . SetTitle ( \"True or False Science Quiz\" ). SetProgressType ( \"dots\" ). SetPassPercentage ( 50 ). SetIntroduction ( \"Test your science knowledge with these true/false questions.\" ). AddMultipleChoiceQuestion ( \"The Earth is round.\" , question1Answers ). AddMultipleChoiceQuestion ( \"Water freezes at 100 degrees Celsius.\" , question2Answers ). Build () if err != nil { log . Fatal ( \"Failed to build true/false quiz:\" , err ) } return questionSet }","title":"True/False Questions"},{"location":"examples/basic/#multi-select-questions","text":"func createMultiSelectQuiz () * h5p . QuestionSet { builder := h5p . NewQuestionSetBuilder () // Multiple correct answers programmingAnswers := [] h5p . Answer { h5p . CreateAnswer ( \"Go\" , true ), // Correct h5p . CreateAnswer ( \"Python\" , true ), // Correct h5p . CreateAnswer ( \"Java\" , true ), // Correct h5p . CreateAnswer ( \"HTML\" , false ), // Not a programming language h5p . CreateAnswer ( \"CSS\" , false ), // Not a programming language } // Single correct answer for comparison capitalAnswers := [] h5p . Answer { h5p . CreateAnswer ( \"Tokyo\" , true ), h5p . CreateAnswer ( \"Osaka\" , false ), h5p . CreateAnswer ( \"Kyoto\" , false ), } questionSet , err := builder . SetTitle ( \"Mixed Question Types\" ). SetProgressType ( \"textual\" ). SetPassPercentage ( 70 ). SetIntroduction ( \"This quiz has both single-answer and multiple-answer questions.\" ). AddMultipleChoiceQuestion ( \"Which of these are programming languages? (Select all that apply)\" , programmingAnswers ). AddMultipleChoiceQuestion ( \"What is the capital of Japan?\" , capitalAnswers ). Build () if err != nil { log . Fatal ( \"Failed to build multi-select quiz:\" , err ) } return questionSet }","title":"Multi-Select Questions"},{"location":"examples/basic/#error-handling-patterns","text":"","title":"Error Handling Patterns"},{"location":"examples/basic/#comprehensive-error-handling","text":"func createQuizWithErrorHandling () ( * h5p . QuestionSet , error ) { builder := h5p . NewQuestionSetBuilder () // Validate inputs before building title := \"Programming Quiz\" if title == \"\" { return nil , fmt . Errorf ( \"quiz title cannot be empty\" ) } passPercentage := 75 if passPercentage < 0 || passPercentage > 100 { return nil , fmt . Errorf ( \"pass percentage must be between 0 and 100, got %d\" , passPercentage ) } // Create answers with validation answers , err := createValidatedAnswers () if err != nil { return nil , fmt . Errorf ( \"failed to create answers: %w\" , err ) } // Build with error handling questionSet , err := builder . SetTitle ( title ). SetProgressType ( \"textual\" ). SetPassPercentage ( passPercentage ). SetIntroduction ( \"Welcome to the programming quiz!\" ). AddMultipleChoiceQuestion ( \"What is Go?\" , answers ). Build () if err != nil { return nil , fmt . Errorf ( \"failed to build question set: %w\" , err ) } // Additional validation if len ( questionSet . Questions ) == 0 { return nil , fmt . Errorf ( \"question set must have at least one question\" ) } // Final validation if err := questionSet . Validate (); err != nil { return nil , fmt . Errorf ( \"question set validation failed: %w\" , err ) } return questionSet , nil } func createValidatedAnswers () ([] h5p . Answer , error ) { answers := [] h5p . Answer { { Text : \"A programming language\" , Correct : true }, { Text : \"A database\" , Correct : false }, { Text : \"An operating system\" , Correct : false }, { Text : \"A web browser\" , Correct : false }, } // Validate answers if len ( answers ) < 2 { return nil , fmt . Errorf ( \"need at least 2 answers\" ) } hasCorrect := false for i , answer := range answers { if answer . Text == \"\" { return nil , fmt . Errorf ( \"answer %d has empty text\" , i + 1 ) } if answer . Correct { hasCorrect = true } } if ! hasCorrect { return nil , fmt . Errorf ( \"at least one answer must be correct\" ) } return answers , nil }","title":"Comprehensive Error Handling"},{"location":"examples/basic/#batch-processing","text":"","title":"Batch Processing"},{"location":"examples/basic/#create-multiple-quizzes","text":"func createMultipleQuizzes () error { quizData := [] struct { title string questions [] QuestionData }{ { title : \"Math Quiz\" , questions : [] QuestionData { { text : \"What is 2 + 2?\" , answers : [] AnswerData { { text : \"4\" , correct : true }, { text : \"3\" , correct : false }, { text : \"5\" , correct : false }, }, }, }, }, { title : \"Science Quiz\" , questions : [] QuestionData { { text : \"What is H2O?\" , answers : [] AnswerData { { text : \"Water\" , correct : true }, { text : \"Hydrogen\" , correct : false }, { text : \"Oxygen\" , correct : false }, }, }, }, }, } for i , data := range quizData { quiz , err := buildQuizFromData ( data ) if err != nil { return fmt . Errorf ( \"failed to create quiz %d: %w\" , i + 1 , err ) } filename := fmt . Sprintf ( \"quiz-%d.json\" , i + 1 ) if err := exportQuiz ( quiz , filename ); err != nil { return fmt . Errorf ( \"failed to export quiz %d: %w\" , i + 1 , err ) } fmt . Printf ( \"Created %s\\n\" , filename ) } return nil } type QuestionData struct { text string answers [] AnswerData } type AnswerData struct { text string correct bool feedback string } func buildQuizFromData ( data struct { title string questions [] QuestionData }) ( * h5p . QuestionSet , error ) { builder := h5p . NewQuestionSetBuilder (). SetTitle ( data . title ). SetProgressType ( \"textual\" ). SetPassPercentage ( 60 ) for _ , q := range data . questions { answers := make ([] h5p . Answer , len ( q . answers )) for i , a := range q . answers { answers [ i ] = h5p . Answer { Text : a . text , Correct : a . correct , Feedback : a . feedback , } } builder = builder . AddMultipleChoiceQuestion ( q . text , answers ) } return builder . Build () } func exportQuiz ( quiz * h5p . QuestionSet , filename string ) error { jsonData , err := quiz . ToJSON () if err != nil { return err } return os . WriteFile ( filename , jsonData , 0644 ) }","title":"Create Multiple Quizzes"},{"location":"examples/basic/#integration-examples","text":"","title":"Integration Examples"},{"location":"examples/basic/#web-api-integration","text":"// HTTP handler for creating quizzes func createQuizHandler ( w http . ResponseWriter , r * http . Request ) { var request struct { Title string `json:\"title\"` Questions [] struct { Text string `json:\"text\"` Answers [] struct { Text string `json:\"text\"` Correct bool `json:\"correct\"` Feedback string `json:\"feedback,omitempty\"` } `json:\"answers\"` } `json:\"questions\"` PassPercentage int `json:\"passPercentage\"` } if err := json . NewDecoder ( r . Body ). Decode ( & request ); err != nil { http . Error ( w , \"Invalid JSON\" , http . StatusBadRequest ) return } // Build quiz from request builder := h5p . NewQuestionSetBuilder (). SetTitle ( request . Title ). SetProgressType ( \"textual\" ). SetPassPercentage ( request . PassPercentage ) for _ , q := range request . Questions { answers := make ([] h5p . Answer , len ( q . Answers )) for i , a := range q . Answers { answers [ i ] = h5p . Answer { Text : a . Text , Correct : a . Correct , Feedback : a . Feedback , } } builder = builder . AddMultipleChoiceQuestion ( q . Text , answers ) } quiz , err := builder . Build () if err != nil { http . Error ( w , fmt . Sprintf ( \"Build failed: %v\" , err ), http . StatusBadRequest ) return } // Validate if err := quiz . Validate (); err != nil { http . Error ( w , fmt . Sprintf ( \"Validation failed: %v\" , err ), http . StatusBadRequest ) return } // Return JSON w . Header (). Set ( \"Content-Type\" , \"application/json\" ) jsonData , _ := quiz . ToJSON () w . Write ( jsonData ) } These examples demonstrate the most common usage patterns for the H5P Go SDK. They show how to create content, handle errors properly, and integrate with larger applications.","title":"Web API Integration"},{"location":"examples/basic/#next-steps","text":"Advanced Examples - More complex usage patterns Package Examples - Creating complete H5P packages User Guide - Comprehensive documentation","title":"Next Steps"},{"location":"examples/packages/","text":"Package Examples \u00b6 Examples for creating complete H5P packages. Coming Soon \u00b6 Package creation examples will include: Complete H5P file creation Library management Asset handling Deployment scenarios More examples coming soon!","title":"Package Creation"},{"location":"examples/packages/#package-examples","text":"Examples for creating complete H5P packages.","title":"Package Examples"},{"location":"examples/packages/#coming-soon","text":"Package creation examples will include: Complete H5P file creation Library management Asset handling Deployment scenarios More examples coming soon!","title":"Coming Soon"},{"location":"getting-started/concepts/","text":"Basic Concepts \u00b6 Understanding the key concepts behind H5P and this Go SDK will help you create better interactive content. What is H5P? \u00b6 H5P (HTML5 Package) is an open-source framework for creating interactive content such as quizzes, presentations, and games. H5P content is: Reusable - Content can be embedded in multiple platforms Responsive - Works on desktop, tablet, and mobile devices Standards-based - Built on web standards (HTML5, CSS, JavaScript) Accessible - Designed with accessibility in mind Core Components \u00b6 Content Types \u00b6 H5P organizes interactive elements into content types : MultiChoice - Single or multiple answer questions TrueFalse - Simple true/false questions Essay - Open-ended text responses Question Set - Collections of questions with scoring H5P Package Structure \u00b6 An H5P package ( .h5p file) is a ZIP archive containing: package.h5p \u251c\u2500\u2500 h5p.json # Package metadata \u251c\u2500\u2500 content/ \u2502 \u2514\u2500\u2500 content.json # Content parameters \u2514\u2500\u2500 H5P.ContentType-1.0/ # Library files \u251c\u2500\u2500 library.json # Library definition \u251c\u2500\u2500 semantics.json # Content schema \u251c\u2500\u2500 js/ # JavaScript files \u2514\u2500\u2500 css/ # Stylesheet files Semantics \u00b6 Semantics define the structure and validation rules for content types. They specify: What fields are available for editing Field types (text, select, number, etc.) Validation rules and constraints UI behavior and layout SDK Architecture \u00b6 Builder Pattern \u00b6 The SDK uses the builder pattern for creating content: questionSet , err := h5p . NewQuestionSetBuilder (). SetTitle ( \"My Quiz\" ). SetPassPercentage ( 80 ). AddMultipleChoiceQuestion ( \"Question?\" , answers ). Build () Benefits: - Fluent API - Easy to read and write - Validation - Catches errors during construction - Flexibility - Optional parameters are simple to handle Type Safety \u00b6 The SDK provides two levels of type safety: Generic Types - Work with any content type Typed Schemas - Strongly-typed for specific content types // Generic approach question := h5p . Question { Library : \"H5P.MultiChoice 1.16\" , Params : map [ string ] interface {}{ \"question\" : \"What is 2+2?\" }, } // Typed approach params := & schemas . MultiChoiceParams { Question : \"What is 2+2?\" , Answers : [] schemas . AnswerOption { { Text : \"4\" , Correct : true }, }, } Validation \u00b6 The SDK includes comprehensive validation: Structure validation - Required fields, correct types Business logic validation - Sensible values, relationships H5P compliance - Matches official specifications Key Concepts \u00b6 Questions vs Question Sets \u00b6 Question - A single interactive element (e.g., one multiple choice question) Question Set - A collection of questions with overall scoring and feedback Parameters vs Content \u00b6 Parameters - The configuration data for content (JSON) Content - The complete H5P content including metadata and parameters Libraries vs Content Types \u00b6 Library - The code (JS/CSS) that renders content Content Type - A specific type of interactive content (MultiChoice, Essay, etc.) Working with Content \u00b6 Creating Content \u00b6 Define your content structure (questions, answers, feedback) Use the builder to construct your content Validate the result Export to JSON or H5P package Loading Content \u00b6 Parse JSON or extract H5P package Validate the loaded content Access parameters and metadata Modify as needed Best Practices \u00b6 Always validate content before deployment Use typed schemas when available for better safety Follow H5P naming conventions for compatibility Test content in H5P-compatible environments Next Steps \u00b6 Question Sets Guide - Working with question collections Typed Questions - Using type-safe schemas H5P Packages - Creating complete H5P files API Reference - Detailed API documentation","title":"Basic Concepts"},{"location":"getting-started/concepts/#basic-concepts","text":"Understanding the key concepts behind H5P and this Go SDK will help you create better interactive content.","title":"Basic Concepts"},{"location":"getting-started/concepts/#what-is-h5p","text":"H5P (HTML5 Package) is an open-source framework for creating interactive content such as quizzes, presentations, and games. H5P content is: Reusable - Content can be embedded in multiple platforms Responsive - Works on desktop, tablet, and mobile devices Standards-based - Built on web standards (HTML5, CSS, JavaScript) Accessible - Designed with accessibility in mind","title":"What is H5P?"},{"location":"getting-started/concepts/#core-components","text":"","title":"Core Components"},{"location":"getting-started/concepts/#content-types","text":"H5P organizes interactive elements into content types : MultiChoice - Single or multiple answer questions TrueFalse - Simple true/false questions Essay - Open-ended text responses Question Set - Collections of questions with scoring","title":"Content Types"},{"location":"getting-started/concepts/#h5p-package-structure","text":"An H5P package ( .h5p file) is a ZIP archive containing: package.h5p \u251c\u2500\u2500 h5p.json # Package metadata \u251c\u2500\u2500 content/ \u2502 \u2514\u2500\u2500 content.json # Content parameters \u2514\u2500\u2500 H5P.ContentType-1.0/ # Library files \u251c\u2500\u2500 library.json # Library definition \u251c\u2500\u2500 semantics.json # Content schema \u251c\u2500\u2500 js/ # JavaScript files \u2514\u2500\u2500 css/ # Stylesheet files","title":"H5P Package Structure"},{"location":"getting-started/concepts/#semantics","text":"Semantics define the structure and validation rules for content types. They specify: What fields are available for editing Field types (text, select, number, etc.) Validation rules and constraints UI behavior and layout","title":"Semantics"},{"location":"getting-started/concepts/#sdk-architecture","text":"","title":"SDK Architecture"},{"location":"getting-started/concepts/#builder-pattern","text":"The SDK uses the builder pattern for creating content: questionSet , err := h5p . NewQuestionSetBuilder (). SetTitle ( \"My Quiz\" ). SetPassPercentage ( 80 ). AddMultipleChoiceQuestion ( \"Question?\" , answers ). Build () Benefits: - Fluent API - Easy to read and write - Validation - Catches errors during construction - Flexibility - Optional parameters are simple to handle","title":"Builder Pattern"},{"location":"getting-started/concepts/#type-safety","text":"The SDK provides two levels of type safety: Generic Types - Work with any content type Typed Schemas - Strongly-typed for specific content types // Generic approach question := h5p . Question { Library : \"H5P.MultiChoice 1.16\" , Params : map [ string ] interface {}{ \"question\" : \"What is 2+2?\" }, } // Typed approach params := & schemas . MultiChoiceParams { Question : \"What is 2+2?\" , Answers : [] schemas . AnswerOption { { Text : \"4\" , Correct : true }, }, }","title":"Type Safety"},{"location":"getting-started/concepts/#validation","text":"The SDK includes comprehensive validation: Structure validation - Required fields, correct types Business logic validation - Sensible values, relationships H5P compliance - Matches official specifications","title":"Validation"},{"location":"getting-started/concepts/#key-concepts","text":"","title":"Key Concepts"},{"location":"getting-started/concepts/#questions-vs-question-sets","text":"Question - A single interactive element (e.g., one multiple choice question) Question Set - A collection of questions with overall scoring and feedback","title":"Questions vs Question Sets"},{"location":"getting-started/concepts/#parameters-vs-content","text":"Parameters - The configuration data for content (JSON) Content - The complete H5P content including metadata and parameters","title":"Parameters vs Content"},{"location":"getting-started/concepts/#libraries-vs-content-types","text":"Library - The code (JS/CSS) that renders content Content Type - A specific type of interactive content (MultiChoice, Essay, etc.)","title":"Libraries vs Content Types"},{"location":"getting-started/concepts/#working-with-content","text":"","title":"Working with Content"},{"location":"getting-started/concepts/#creating-content","text":"Define your content structure (questions, answers, feedback) Use the builder to construct your content Validate the result Export to JSON or H5P package","title":"Creating Content"},{"location":"getting-started/concepts/#loading-content","text":"Parse JSON or extract H5P package Validate the loaded content Access parameters and metadata Modify as needed","title":"Loading Content"},{"location":"getting-started/concepts/#best-practices","text":"Always validate content before deployment Use typed schemas when available for better safety Follow H5P naming conventions for compatibility Test content in H5P-compatible environments","title":"Best Practices"},{"location":"getting-started/concepts/#next-steps","text":"Question Sets Guide - Working with question collections Typed Questions - Using type-safe schemas H5P Packages - Creating complete H5P files API Reference - Detailed API documentation","title":"Next Steps"},{"location":"getting-started/installation/","text":"Installation \u00b6 Requirements \u00b6 Go 1.19 or later Git (for fetching the module) Install via Go Modules \u00b6 The easiest way to install the H5P Go SDK is using Go modules: go get github.com/grokify/h5p-go Verify Installation \u00b6 Create a simple test file to verify the installation: // test.go package main import ( \"fmt\" \"github.com/grokify/h5p-go\" ) func main () { builder := h5p . NewQuestionSetBuilder () fmt . Println ( \"H5P Go SDK installed successfully!\" ) fmt . Printf ( \"Builder created: %T\\n\" , builder ) } Run the test: go run test.go You should see: H5P Go SDK installed successfully! Builder created: *h5p.QuestionSetBuilder Development Installation \u00b6 If you want to contribute to the project or need the latest development version: git clone https://github.com/grokify/h5p-go.git cd h5p-go go mod tidy go test ./... Dependencies \u00b6 The H5P Go SDK has minimal external dependencies: Standard library packages only for core functionality No runtime dependencies for basic usage Optional dependencies for advanced features (validation, etc.) Next Steps \u00b6 Quick Start Tutorial - Your first H5P content Basic Concepts - Understanding H5P fundamentals","title":"Installation"},{"location":"getting-started/installation/#installation","text":"","title":"Installation"},{"location":"getting-started/installation/#requirements","text":"Go 1.19 or later Git (for fetching the module)","title":"Requirements"},{"location":"getting-started/installation/#install-via-go-modules","text":"The easiest way to install the H5P Go SDK is using Go modules: go get github.com/grokify/h5p-go","title":"Install via Go Modules"},{"location":"getting-started/installation/#verify-installation","text":"Create a simple test file to verify the installation: // test.go package main import ( \"fmt\" \"github.com/grokify/h5p-go\" ) func main () { builder := h5p . NewQuestionSetBuilder () fmt . Println ( \"H5P Go SDK installed successfully!\" ) fmt . Printf ( \"Builder created: %T\\n\" , builder ) } Run the test: go run test.go You should see: H5P Go SDK installed successfully! Builder created: *h5p.QuestionSetBuilder","title":"Verify Installation"},{"location":"getting-started/installation/#development-installation","text":"If you want to contribute to the project or need the latest development version: git clone https://github.com/grokify/h5p-go.git cd h5p-go go mod tidy go test ./...","title":"Development Installation"},{"location":"getting-started/installation/#dependencies","text":"The H5P Go SDK has minimal external dependencies: Standard library packages only for core functionality No runtime dependencies for basic usage Optional dependencies for advanced features (validation, etc.)","title":"Dependencies"},{"location":"getting-started/installation/#next-steps","text":"Quick Start Tutorial - Your first H5P content Basic Concepts - Understanding H5P fundamentals","title":"Next Steps"},{"location":"getting-started/quick-start/","text":"Quick Start \u00b6 This tutorial will guide you through creating your first H5P content using the Go SDK. Your First Question Set \u00b6 Let's create a simple geography quiz: package main import ( \"fmt\" \"log\" \"github.com/grokify/h5p-go\" ) func main () { // Create a question set builder builder := h5p . NewQuestionSetBuilder () // Define answers for our question answers := [] h5p . Answer { h5p . CreateAnswer ( \"Paris\" , true ), // Correct answer h5p . CreateAnswer ( \"London\" , false ), // Incorrect h5p . CreateAnswer ( \"Berlin\" , false ), // Incorrect h5p . CreateAnswer ( \"Madrid\" , false ), // Incorrect } // Build the question set questionSet , err := builder . SetTitle ( \"Geography Quiz\" ). SetProgressType ( \"textual\" ). SetPassPercentage ( 60 ). SetIntroduction ( \"Test your geography knowledge!\" ). AddMultipleChoiceQuestion ( \"What is the capital of France?\" , answers ). Build () if err != nil { log . Fatal ( err ) } // Convert to JSON jsonData , err := questionSet . ToJSON () if err != nil { log . Fatal ( err ) } fmt . Printf ( \"Created H5P Question Set:\\n%s\\n\" , string ( jsonData )) } Adding Multiple Questions \u00b6 Let's expand our quiz with more questions: func createGeographyQuiz () ( * h5p . QuestionSet , error ) { builder := h5p . NewQuestionSetBuilder () // Question 1: Capital of France answers1 := [] h5p . Answer { h5p . CreateAnswer ( \"Paris\" , true ), h5p . CreateAnswer ( \"London\" , false ), h5p . CreateAnswer ( \"Berlin\" , false ), h5p . CreateAnswer ( \"Madrid\" , false ), } // Question 2: Largest country answers2 := [] h5p . Answer { h5p . CreateAnswer ( \"Russia\" , true ), h5p . CreateAnswer ( \"China\" , false ), h5p . CreateAnswer ( \"USA\" , false ), h5p . CreateAnswer ( \"Canada\" , false ), } // Question 3: Longest river answers3 := [] h5p . Answer { h5p . CreateAnswer ( \"Nile\" , true ), h5p . CreateAnswer ( \"Amazon\" , false ), h5p . CreateAnswer ( \"Mississippi\" , false ), h5p . CreateAnswer ( \"Yangtze\" , false ), } return builder . SetTitle ( \"World Geography Quiz\" ). SetProgressType ( \"textual\" ). SetPassPercentage ( 70 ). SetIntroduction ( \"Test your knowledge of world geography!\" ). AddMultipleChoiceQuestion ( \"What is the capital of France?\" , answers1 ). AddMultipleChoiceQuestion ( \"Which is the largest country by area?\" , answers2 ). AddMultipleChoiceQuestion ( \"What is the longest river in the world?\" , answers3 ). Build () } Adding Feedback \u00b6 Enhance the user experience with feedback based on performance: func createQuizWithFeedback () ( * h5p . QuestionSet , error ) { builder := h5p . NewQuestionSetBuilder () // Create feedback ranges feedbackRanges := [] h5p . OverallFeedback { { From : 0 , To : 40 , Feedback : \"Keep studying! Geography takes practice.\" , }, { From : 41 , To : 70 , Feedback : \"Good job! You have solid geography knowledge.\" , }, { From : 71 , To : 100 , Feedback : \"Excellent! You're a geography expert!\" , }, } // Build with feedback return builder . SetTitle ( \"Geography Quiz with Feedback\" ). SetProgressType ( \"textual\" ). SetPassPercentage ( 60 ). SetIntroduction ( \"Test your geography knowledge!\" ). // ... add questions ... AddOverallFeedback ( feedbackRanges ). Build () } Validating Content \u00b6 Always validate your content before deployment: func validateAndExport ( questionSet * h5p . QuestionSet ) error { // Validate the question set if err := questionSet . Validate (); err != nil { return fmt . Errorf ( \"validation failed: %w\" , err ) } // Export to JSON file jsonData , err := questionSet . ToJSON () if err != nil { return fmt . Errorf ( \"JSON export failed: %w\" , err ) } // Save to file err = os . WriteFile ( \"quiz.json\" , jsonData , 0644 ) if err != nil { return fmt . Errorf ( \"file write failed: %w\" , err ) } fmt . Println ( \"Quiz created and validated successfully!\" ) return nil } Complete Example \u00b6 Here's a complete working example: package main import ( \"fmt\" \"log\" \"os\" \"github.com/grokify/h5p-go\" ) func main () { // Create quiz quiz , err := createCompleteQuiz () if err != nil { log . Fatal ( err ) } // Validate and export if err := validateAndExport ( quiz ); err != nil { log . Fatal ( err ) } } func createCompleteQuiz () ( * h5p . QuestionSet , error ) { builder := h5p . NewQuestionSetBuilder () // Geography questions with answers questions := [] struct { question string answers [] h5p . Answer }{ { \"What is the capital of France?\" , [] h5p . Answer { h5p . CreateAnswer ( \"Paris\" , true ), h5p . CreateAnswer ( \"London\" , false ), h5p . CreateAnswer ( \"Berlin\" , false ), h5p . CreateAnswer ( \"Madrid\" , false ), }, }, { \"Which is the largest ocean?\" , [] h5p . Answer { h5p . CreateAnswer ( \"Pacific\" , true ), h5p . CreateAnswer ( \"Atlantic\" , false ), h5p . CreateAnswer ( \"Indian\" , false ), h5p . CreateAnswer ( \"Arctic\" , false ), }, }, } // Start building builder = builder . SetTitle ( \"Complete Geography Quiz\" ). SetProgressType ( \"textual\" ). SetPassPercentage ( 60 ). SetIntroduction ( \"Welcome to our comprehensive geography quiz!\" ) // Add all questions for _ , q := range questions { builder = builder . AddMultipleChoiceQuestion ( q . question , q . answers ) } // Add feedback feedbackRanges := [] h5p . OverallFeedback { { From : 0 , To : 50 , Feedback : \"Keep studying geography!\" }, { From : 51 , To : 80 , Feedback : \"Good knowledge of geography!\" }, { From : 81 , To : 100 , Feedback : \"Excellent! You're a geography expert!\" }, } return builder . AddOverallFeedback ( feedbackRanges ). Build () } func validateAndExport ( questionSet * h5p . QuestionSet ) error { // Validate if err := questionSet . Validate (); err != nil { return err } // Export to JSON jsonData , err := questionSet . ToJSON () if err != nil { return err } // Save to file return os . WriteFile ( \"complete-quiz.json\" , jsonData , 0644 ) } What's Next? \u00b6 Now that you've created your first H5P content, explore: Basic Concepts - Understand H5P fundamentals Question Sets Guide - Advanced question set features Typed Questions - Using type-safe schemas Validation - Ensuring content quality","title":"Quick Start"},{"location":"getting-started/quick-start/#quick-start","text":"This tutorial will guide you through creating your first H5P content using the Go SDK.","title":"Quick Start"},{"location":"getting-started/quick-start/#your-first-question-set","text":"Let's create a simple geography quiz: package main import ( \"fmt\" \"log\" \"github.com/grokify/h5p-go\" ) func main () { // Create a question set builder builder := h5p . NewQuestionSetBuilder () // Define answers for our question answers := [] h5p . Answer { h5p . CreateAnswer ( \"Paris\" , true ), // Correct answer h5p . CreateAnswer ( \"London\" , false ), // Incorrect h5p . CreateAnswer ( \"Berlin\" , false ), // Incorrect h5p . CreateAnswer ( \"Madrid\" , false ), // Incorrect } // Build the question set questionSet , err := builder . SetTitle ( \"Geography Quiz\" ). SetProgressType ( \"textual\" ). SetPassPercentage ( 60 ). SetIntroduction ( \"Test your geography knowledge!\" ). AddMultipleChoiceQuestion ( \"What is the capital of France?\" , answers ). Build () if err != nil { log . Fatal ( err ) } // Convert to JSON jsonData , err := questionSet . ToJSON () if err != nil { log . Fatal ( err ) } fmt . Printf ( \"Created H5P Question Set:\\n%s\\n\" , string ( jsonData )) }","title":"Your First Question Set"},{"location":"getting-started/quick-start/#adding-multiple-questions","text":"Let's expand our quiz with more questions: func createGeographyQuiz () ( * h5p . QuestionSet , error ) { builder := h5p . NewQuestionSetBuilder () // Question 1: Capital of France answers1 := [] h5p . Answer { h5p . CreateAnswer ( \"Paris\" , true ), h5p . CreateAnswer ( \"London\" , false ), h5p . CreateAnswer ( \"Berlin\" , false ), h5p . CreateAnswer ( \"Madrid\" , false ), } // Question 2: Largest country answers2 := [] h5p . Answer { h5p . CreateAnswer ( \"Russia\" , true ), h5p . CreateAnswer ( \"China\" , false ), h5p . CreateAnswer ( \"USA\" , false ), h5p . CreateAnswer ( \"Canada\" , false ), } // Question 3: Longest river answers3 := [] h5p . Answer { h5p . CreateAnswer ( \"Nile\" , true ), h5p . CreateAnswer ( \"Amazon\" , false ), h5p . CreateAnswer ( \"Mississippi\" , false ), h5p . CreateAnswer ( \"Yangtze\" , false ), } return builder . SetTitle ( \"World Geography Quiz\" ). SetProgressType ( \"textual\" ). SetPassPercentage ( 70 ). SetIntroduction ( \"Test your knowledge of world geography!\" ). AddMultipleChoiceQuestion ( \"What is the capital of France?\" , answers1 ). AddMultipleChoiceQuestion ( \"Which is the largest country by area?\" , answers2 ). AddMultipleChoiceQuestion ( \"What is the longest river in the world?\" , answers3 ). Build () }","title":"Adding Multiple Questions"},{"location":"getting-started/quick-start/#adding-feedback","text":"Enhance the user experience with feedback based on performance: func createQuizWithFeedback () ( * h5p . QuestionSet , error ) { builder := h5p . NewQuestionSetBuilder () // Create feedback ranges feedbackRanges := [] h5p . OverallFeedback { { From : 0 , To : 40 , Feedback : \"Keep studying! Geography takes practice.\" , }, { From : 41 , To : 70 , Feedback : \"Good job! You have solid geography knowledge.\" , }, { From : 71 , To : 100 , Feedback : \"Excellent! You're a geography expert!\" , }, } // Build with feedback return builder . SetTitle ( \"Geography Quiz with Feedback\" ). SetProgressType ( \"textual\" ). SetPassPercentage ( 60 ). SetIntroduction ( \"Test your geography knowledge!\" ). // ... add questions ... AddOverallFeedback ( feedbackRanges ). Build () }","title":"Adding Feedback"},{"location":"getting-started/quick-start/#validating-content","text":"Always validate your content before deployment: func validateAndExport ( questionSet * h5p . QuestionSet ) error { // Validate the question set if err := questionSet . Validate (); err != nil { return fmt . Errorf ( \"validation failed: %w\" , err ) } // Export to JSON file jsonData , err := questionSet . ToJSON () if err != nil { return fmt . Errorf ( \"JSON export failed: %w\" , err ) } // Save to file err = os . WriteFile ( \"quiz.json\" , jsonData , 0644 ) if err != nil { return fmt . Errorf ( \"file write failed: %w\" , err ) } fmt . Println ( \"Quiz created and validated successfully!\" ) return nil }","title":"Validating Content"},{"location":"getting-started/quick-start/#complete-example","text":"Here's a complete working example: package main import ( \"fmt\" \"log\" \"os\" \"github.com/grokify/h5p-go\" ) func main () { // Create quiz quiz , err := createCompleteQuiz () if err != nil { log . Fatal ( err ) } // Validate and export if err := validateAndExport ( quiz ); err != nil { log . Fatal ( err ) } } func createCompleteQuiz () ( * h5p . QuestionSet , error ) { builder := h5p . NewQuestionSetBuilder () // Geography questions with answers questions := [] struct { question string answers [] h5p . Answer }{ { \"What is the capital of France?\" , [] h5p . Answer { h5p . CreateAnswer ( \"Paris\" , true ), h5p . CreateAnswer ( \"London\" , false ), h5p . CreateAnswer ( \"Berlin\" , false ), h5p . CreateAnswer ( \"Madrid\" , false ), }, }, { \"Which is the largest ocean?\" , [] h5p . Answer { h5p . CreateAnswer ( \"Pacific\" , true ), h5p . CreateAnswer ( \"Atlantic\" , false ), h5p . CreateAnswer ( \"Indian\" , false ), h5p . CreateAnswer ( \"Arctic\" , false ), }, }, } // Start building builder = builder . SetTitle ( \"Complete Geography Quiz\" ). SetProgressType ( \"textual\" ). SetPassPercentage ( 60 ). SetIntroduction ( \"Welcome to our comprehensive geography quiz!\" ) // Add all questions for _ , q := range questions { builder = builder . AddMultipleChoiceQuestion ( q . question , q . answers ) } // Add feedback feedbackRanges := [] h5p . OverallFeedback { { From : 0 , To : 50 , Feedback : \"Keep studying geography!\" }, { From : 51 , To : 80 , Feedback : \"Good knowledge of geography!\" }, { From : 81 , To : 100 , Feedback : \"Excellent! You're a geography expert!\" }, } return builder . AddOverallFeedback ( feedbackRanges ). Build () } func validateAndExport ( questionSet * h5p . QuestionSet ) error { // Validate if err := questionSet . Validate (); err != nil { return err } // Export to JSON jsonData , err := questionSet . ToJSON () if err != nil { return err } // Save to file return os . WriteFile ( \"complete-quiz.json\" , jsonData , 0644 ) }","title":"Complete Example"},{"location":"getting-started/quick-start/#whats-next","text":"Now that you've created your first H5P content, explore: Basic Concepts - Understand H5P fundamentals Question Sets Guide - Advanced question set features Typed Questions - Using type-safe schemas Validation - Ensuring content quality","title":"What's Next?"},{"location":"guide/h5p-packages/","text":"H5P Packages \u00b6 H5P packages are complete, deployable .h5p files that contain everything needed to run interactive content. This guide covers creating, managing, and deploying H5P packages. Package Structure \u00b6 An H5P package is a ZIP file with a specific structure: example.h5p \u251c\u2500\u2500 h5p.json # Package definition \u251c\u2500\u2500 content/ \u2502 \u2514\u2500\u2500 content.json # Content parameters \u2514\u2500\u2500 H5P.LibraryName-1.0/ # Library directories \u251c\u2500\u2500 library.json # Library definition \u251c\u2500\u2500 semantics.json # Content schema \u251c\u2500\u2500 js/ # JavaScript files \u251c\u2500\u2500 css/ # Stylesheet files \u2514\u2500\u2500 assets/ # Images, fonts, etc. Creating Packages \u00b6 Basic Package Creation \u00b6 import \"github.com/grokify/h5p-go\" // Create a new H5P package pkg := h5p . NewH5PPackage () // Set package definition packageDef := & h5p . PackageDefinition { Title : \"My Interactive Quiz\" , Language : \"en\" , MainLibrary : \"H5P.MultiChoice\" , EmbedTypes : [] string { \"div\" }, PreloadedDependencies : [] h5p . LibraryDependency { { MachineName : \"H5P.MultiChoice\" , MajorVersion : 1 , MinorVersion : 16 , }, }, } pkg . SetPackageDefinition ( packageDef ) Adding Content \u00b6 // Create content using typed schemas params := & schemas . MultiChoiceParams { Question : \"What is the answer?\" , Answers : [] schemas . AnswerOption { { Text : \"Correct\" , Correct : true }, { Text : \"Wrong\" , Correct : false }, }, } content := & h5p . Content { Params : params , } pkg . SetContent ( content ) Adding Libraries \u00b6 // Add the MultiChoice library lib := & h5p . Library { MachineName : \"H5P.MultiChoice-1.16\" , Definition : & h5p . LibraryDefinition { Title : \"Multiple Choice\" , MachineName : \"H5P.MultiChoice\" , MajorVersion : 1 , MinorVersion : 16 , PatchVersion : 4 , Runnable : true , CoreAPI : & h5p . CoreAPI { MajorVersion : 1 , MinorVersion : 24 , }, }, Files : map [ string ][] byte { \"js/multichoice.js\" : loadFile ( \"multichoice.js\" ), \"css/multichoice.css\" : loadFile ( \"multichoice.css\" ), }, } pkg . AddLibrary ( lib ) Package Definition \u00b6 The h5p.json file contains package metadata: type PackageDefinition struct { Title string `json:\"title\"` Language string `json:\"language\"` MainLibrary string `json:\"mainLibrary\"` EmbedTypes [] string `json:\"embedTypes\"` PreloadedDependencies [] LibraryDependency `json:\"preloadedDependencies\"` DynamicDependencies [] LibraryDependency `json:\"dynamicDependencies,omitempty\"` EditorDependencies [] LibraryDependency `json:\"editorDependencies,omitempty\"` License string `json:\"license,omitempty\"` DefaultLanguage string `json:\"defaultLanguage,omitempty\"` Authors [] Author `json:\"authors,omitempty\"` Changes [] Change `json:\"changes,omitempty\"` } Example Package Definition \u00b6 packageDef := & h5p . PackageDefinition { Title : \"Advanced Programming Quiz\" , Language : \"en\" , MainLibrary : \"H5P.QuestionSet\" , EmbedTypes : [] string { \"div\" }, PreloadedDependencies : [] h5p . LibraryDependency { { MachineName : \"H5P.QuestionSet\" , MajorVersion : 1 , MinorVersion : 20 , }, { MachineName : \"H5P.MultiChoice\" , MajorVersion : 1 , MinorVersion : 16 , }, }, License : \"CC BY-SA\" , Authors : [] h5p . Author { { Name : \"Your Name\" , Role : \"Author\" , }, }, Changes : [] h5p . Change { { Date : \"2024-01-15\" , Author : \"Your Name\" , Log : \"Initial version\" , }, }, } Library Management \u00b6 Library Definition \u00b6 Each library needs a library.json file: type LibraryDefinition struct { Title string `json:\"title\"` Description string `json:\"description,omitempty\"` MajorVersion int `json:\"majorVersion\"` MinorVersion int `json:\"minorVersion\"` PatchVersion int `json:\"patchVersion\"` MachineName string `json:\"machineName\"` Runnable bool `json:\"runnable\"` CoreAPI * CoreAPI `json:\"coreApi,omitempty\"` PreloadedJS [] string `json:\"preloadedJs,omitempty\"` PreloadedCSS [] string `json:\"preloadedCss,omitempty\"` PreloadedDependencies [] LibraryDependency `json:\"preloadedDependencies,omitempty\"` DynamicDependencies [] LibraryDependency `json:\"dynamicDependencies,omitempty\"` EditorDependencies [] LibraryDependency `json:\"editorDependencies,omitempty\"` } Adding Library Files \u00b6 lib := & h5p . Library { MachineName : \"H5P.MultiChoice-1.16\" , Definition : libDefinition , Files : map [ string ][] byte { // JavaScript files \"js/multichoice.js\" : loadJSFile (), // CSS files \"css/multichoice.css\" : loadCSSFile (), // Assets \"images/icon.png\" : loadImageFile (), // Semantics definition \"semantics.json\" : loadSemanticsFile (), }, } Content Management \u00b6 Content Structure \u00b6 The content/content.json file contains the actual content parameters: type Content struct { Params interface {} `json:\"params\"` Metadata * Metadata `json:\"metadata,omitempty\"` } type Metadata struct { Title string `json:\"title,omitempty\"` Authors [] Author `json:\"authors,omitempty\"` Source string `json:\"source,omitempty\"` License string `json:\"license,omitempty\"` LicenseVersion string `json:\"licenseVersion,omitempty\"` YearFrom int `json:\"yearFrom,omitempty\"` YearTo int `json:\"yearTo,omitempty\"` DefaultLanguage string `json:\"defaultLanguage,omitempty\"` } Setting Content \u00b6 content := & h5p . Content { Params : questionSetParams , // Your content parameters Metadata : & h5p . Metadata { Title : \"My Quiz\" , License : \"CC BY-SA\" , Authors : [] h5p . Author { { Name : \"Your Name\" , Role : \"Author\" }, }, }, } pkg . SetContent ( content ) Package Export \u00b6 Create ZIP File \u00b6 // Export as .h5p file err := pkg . CreateZipFile ( \"my-content.h5p\" ) if err != nil { log . Fatal ( \"Failed to create H5P file:\" , err ) } fmt . Println ( \"Successfully created my-content.h5p\" ) Export to Directory \u00b6 // Export to directory structure (for development) err := pkg . ExportToDirectory ( \"./h5p-export\" ) if err != nil { log . Fatal ( \"Failed to export:\" , err ) } Loading Packages \u00b6 Load from ZIP File \u00b6 // Load existing H5P package pkg , err := h5p . LoadH5PPackage ( \"existing-content.h5p\" ) if err != nil { log . Fatal ( \"Failed to load package:\" , err ) } // Access package components packageDef := pkg . GetPackageDefinition () content := pkg . GetContent () libraries := pkg . GetLibraries () Modify Existing Package \u00b6 // Load and modify pkg , err := h5p . LoadH5PPackage ( \"quiz.h5p\" ) if err != nil { log . Fatal ( err ) } // Update title packageDef := pkg . GetPackageDefinition () packageDef . Title = \"Updated Quiz Title\" pkg . SetPackageDefinition ( packageDef ) // Save changes err = pkg . CreateZipFile ( \"updated-quiz.h5p\" ) if err != nil { log . Fatal ( err ) } Validation \u00b6 Package Validation \u00b6 // Validate complete package if err := pkg . Validate (); err != nil { log . Fatal ( \"Package validation failed:\" , err ) } Individual Component Validation \u00b6 // Validate package definition if err := packageDef . Validate (); err != nil { log . Fatal ( \"Package definition invalid:\" , err ) } // Validate content if err := content . Validate (); err != nil { log . Fatal ( \"Content invalid:\" , err ) } // Validate libraries for _ , lib := range libraries { if err := lib . Validate (); err != nil { log . Fatal ( \"Library invalid:\" , err ) } } Complete Example \u00b6 package main import ( \"log\" \"os\" \"github.com/grokify/h5p-go\" \"github.com/grokify/h5p-go/schemas\" ) func main () { // Create a complete H5P package pkg := createCompletePackage () // Validate before export if err := pkg . Validate (); err != nil { log . Fatal ( \"Validation failed:\" , err ) } // Export as H5P file err := pkg . CreateZipFile ( \"complete-quiz.h5p\" ) if err != nil { log . Fatal ( \"Export failed:\" , err ) } fmt . Println ( \"Successfully created complete-quiz.h5p\" ) } func createCompletePackage () * h5p . H5PPackage { pkg := h5p . NewH5PPackage () // Package definition packageDef := & h5p . PackageDefinition { Title : \"Complete Programming Quiz\" , Language : \"en\" , MainLibrary : \"H5P.QuestionSet\" , EmbedTypes : [] string { \"div\" }, PreloadedDependencies : [] h5p . LibraryDependency { { MachineName : \"H5P.QuestionSet\" , MajorVersion : 1 , MinorVersion : 20 , }, { MachineName : \"H5P.MultiChoice\" , MajorVersion : 1 , MinorVersion : 16 , }, }, License : \"CC BY-SA\" , Authors : [] h5p . Author { { Name : \"Quiz Creator\" , Role : \"Author\" }, }, } pkg . SetPackageDefinition ( packageDef ) // Create question set content questionSet := createQuestionSet () content := & h5p . Content { Params : questionSet , Metadata : & h5p . Metadata { Title : \"Programming Quiz\" , License : \"CC BY-SA\" , }, } pkg . SetContent ( content ) // Add required libraries addLibraries ( pkg ) return pkg } func createQuestionSet () * h5p . QuestionSet { // Create questions using the builder answers := [] h5p . Answer { h5p . CreateAnswer ( \"Go\" , true ), h5p . CreateAnswer ( \"JavaScript\" , false ), } questionSet , err := h5p . NewQuestionSetBuilder (). SetTitle ( \"Programming Knowledge Test\" ). SetProgressType ( \"textual\" ). SetPassPercentage ( 70 ). AddMultipleChoiceQuestion ( \"Which language is statically typed?\" , answers ). Build () if err != nil { log . Fatal ( err ) } return questionSet } func addLibraries ( pkg * h5p . H5PPackage ) { // Add QuestionSet library questionSetLib := & h5p . Library { MachineName : \"H5P.QuestionSet-1.20\" , Definition : & h5p . LibraryDefinition { Title : \"Question Set\" , MachineName : \"H5P.QuestionSet\" , MajorVersion : 1 , MinorVersion : 20 , PatchVersion : 0 , Runnable : true , }, Files : map [ string ][] byte { \"js/questionset.js\" : loadLibraryFile ( \"questionset.js\" ), \"css/questionset.css\" : loadLibraryFile ( \"questionset.css\" ), \"semantics.json\" : loadLibraryFile ( \"questionset-semantics.json\" ), }, } pkg . AddLibrary ( questionSetLib ) // Add MultiChoice library multiChoiceLib := & h5p . Library { MachineName : \"H5P.MultiChoice-1.16\" , Definition : & h5p . LibraryDefinition { Title : \"Multiple Choice\" , MachineName : \"H5P.MultiChoice\" , MajorVersion : 1 , MinorVersion : 16 , PatchVersion : 4 , Runnable : true , }, Files : map [ string ][] byte { \"js/multichoice.js\" : loadLibraryFile ( \"multichoice.js\" ), \"css/multichoice.css\" : loadLibraryFile ( \"multichoice.css\" ), \"semantics.json\" : loadLibraryFile ( \"multichoice-semantics.json\" ), }, } pkg . AddLibrary ( multiChoiceLib ) } func loadLibraryFile ( filename string ) [] byte { // In practice, load actual H5P library files // For example: return os.ReadFile(\"libraries/\" + filename) return [] byte ( \"// Placeholder library content\" ) } Best Practices \u00b6 Version Management - Use proper semantic versioning for libraries Dependency Management - Specify exact versions for dependencies Asset Organization - Keep assets organized in appropriate directories Validation - Always validate packages before deployment Licensing - Include proper license information Documentation - Document any custom libraries or modifications Deployment \u00b6 H5P packages can be deployed to: - H5P-compatible LMS platforms - WordPress with H5P plugin - Drupal with H5P module - Custom web applications with H5P Core Next Steps \u00b6 Validation - Understanding validation rules Examples - Package creation examples File Structure - Detailed file format reference","title":"H5P Packages"},{"location":"guide/h5p-packages/#h5p-packages","text":"H5P packages are complete, deployable .h5p files that contain everything needed to run interactive content. This guide covers creating, managing, and deploying H5P packages.","title":"H5P Packages"},{"location":"guide/h5p-packages/#package-structure","text":"An H5P package is a ZIP file with a specific structure: example.h5p \u251c\u2500\u2500 h5p.json # Package definition \u251c\u2500\u2500 content/ \u2502 \u2514\u2500\u2500 content.json # Content parameters \u2514\u2500\u2500 H5P.LibraryName-1.0/ # Library directories \u251c\u2500\u2500 library.json # Library definition \u251c\u2500\u2500 semantics.json # Content schema \u251c\u2500\u2500 js/ # JavaScript files \u251c\u2500\u2500 css/ # Stylesheet files \u2514\u2500\u2500 assets/ # Images, fonts, etc.","title":"Package Structure"},{"location":"guide/h5p-packages/#creating-packages","text":"","title":"Creating Packages"},{"location":"guide/h5p-packages/#basic-package-creation","text":"import \"github.com/grokify/h5p-go\" // Create a new H5P package pkg := h5p . NewH5PPackage () // Set package definition packageDef := & h5p . PackageDefinition { Title : \"My Interactive Quiz\" , Language : \"en\" , MainLibrary : \"H5P.MultiChoice\" , EmbedTypes : [] string { \"div\" }, PreloadedDependencies : [] h5p . LibraryDependency { { MachineName : \"H5P.MultiChoice\" , MajorVersion : 1 , MinorVersion : 16 , }, }, } pkg . SetPackageDefinition ( packageDef )","title":"Basic Package Creation"},{"location":"guide/h5p-packages/#adding-content","text":"// Create content using typed schemas params := & schemas . MultiChoiceParams { Question : \"What is the answer?\" , Answers : [] schemas . AnswerOption { { Text : \"Correct\" , Correct : true }, { Text : \"Wrong\" , Correct : false }, }, } content := & h5p . Content { Params : params , } pkg . SetContent ( content )","title":"Adding Content"},{"location":"guide/h5p-packages/#adding-libraries","text":"// Add the MultiChoice library lib := & h5p . Library { MachineName : \"H5P.MultiChoice-1.16\" , Definition : & h5p . LibraryDefinition { Title : \"Multiple Choice\" , MachineName : \"H5P.MultiChoice\" , MajorVersion : 1 , MinorVersion : 16 , PatchVersion : 4 , Runnable : true , CoreAPI : & h5p . CoreAPI { MajorVersion : 1 , MinorVersion : 24 , }, }, Files : map [ string ][] byte { \"js/multichoice.js\" : loadFile ( \"multichoice.js\" ), \"css/multichoice.css\" : loadFile ( \"multichoice.css\" ), }, } pkg . AddLibrary ( lib )","title":"Adding Libraries"},{"location":"guide/h5p-packages/#package-definition","text":"The h5p.json file contains package metadata: type PackageDefinition struct { Title string `json:\"title\"` Language string `json:\"language\"` MainLibrary string `json:\"mainLibrary\"` EmbedTypes [] string `json:\"embedTypes\"` PreloadedDependencies [] LibraryDependency `json:\"preloadedDependencies\"` DynamicDependencies [] LibraryDependency `json:\"dynamicDependencies,omitempty\"` EditorDependencies [] LibraryDependency `json:\"editorDependencies,omitempty\"` License string `json:\"license,omitempty\"` DefaultLanguage string `json:\"defaultLanguage,omitempty\"` Authors [] Author `json:\"authors,omitempty\"` Changes [] Change `json:\"changes,omitempty\"` }","title":"Package Definition"},{"location":"guide/h5p-packages/#example-package-definition","text":"packageDef := & h5p . PackageDefinition { Title : \"Advanced Programming Quiz\" , Language : \"en\" , MainLibrary : \"H5P.QuestionSet\" , EmbedTypes : [] string { \"div\" }, PreloadedDependencies : [] h5p . LibraryDependency { { MachineName : \"H5P.QuestionSet\" , MajorVersion : 1 , MinorVersion : 20 , }, { MachineName : \"H5P.MultiChoice\" , MajorVersion : 1 , MinorVersion : 16 , }, }, License : \"CC BY-SA\" , Authors : [] h5p . Author { { Name : \"Your Name\" , Role : \"Author\" , }, }, Changes : [] h5p . Change { { Date : \"2024-01-15\" , Author : \"Your Name\" , Log : \"Initial version\" , }, }, }","title":"Example Package Definition"},{"location":"guide/h5p-packages/#library-management","text":"","title":"Library Management"},{"location":"guide/h5p-packages/#library-definition","text":"Each library needs a library.json file: type LibraryDefinition struct { Title string `json:\"title\"` Description string `json:\"description,omitempty\"` MajorVersion int `json:\"majorVersion\"` MinorVersion int `json:\"minorVersion\"` PatchVersion int `json:\"patchVersion\"` MachineName string `json:\"machineName\"` Runnable bool `json:\"runnable\"` CoreAPI * CoreAPI `json:\"coreApi,omitempty\"` PreloadedJS [] string `json:\"preloadedJs,omitempty\"` PreloadedCSS [] string `json:\"preloadedCss,omitempty\"` PreloadedDependencies [] LibraryDependency `json:\"preloadedDependencies,omitempty\"` DynamicDependencies [] LibraryDependency `json:\"dynamicDependencies,omitempty\"` EditorDependencies [] LibraryDependency `json:\"editorDependencies,omitempty\"` }","title":"Library Definition"},{"location":"guide/h5p-packages/#adding-library-files","text":"lib := & h5p . Library { MachineName : \"H5P.MultiChoice-1.16\" , Definition : libDefinition , Files : map [ string ][] byte { // JavaScript files \"js/multichoice.js\" : loadJSFile (), // CSS files \"css/multichoice.css\" : loadCSSFile (), // Assets \"images/icon.png\" : loadImageFile (), // Semantics definition \"semantics.json\" : loadSemanticsFile (), }, }","title":"Adding Library Files"},{"location":"guide/h5p-packages/#content-management","text":"","title":"Content Management"},{"location":"guide/h5p-packages/#content-structure","text":"The content/content.json file contains the actual content parameters: type Content struct { Params interface {} `json:\"params\"` Metadata * Metadata `json:\"metadata,omitempty\"` } type Metadata struct { Title string `json:\"title,omitempty\"` Authors [] Author `json:\"authors,omitempty\"` Source string `json:\"source,omitempty\"` License string `json:\"license,omitempty\"` LicenseVersion string `json:\"licenseVersion,omitempty\"` YearFrom int `json:\"yearFrom,omitempty\"` YearTo int `json:\"yearTo,omitempty\"` DefaultLanguage string `json:\"defaultLanguage,omitempty\"` }","title":"Content Structure"},{"location":"guide/h5p-packages/#setting-content","text":"content := & h5p . Content { Params : questionSetParams , // Your content parameters Metadata : & h5p . Metadata { Title : \"My Quiz\" , License : \"CC BY-SA\" , Authors : [] h5p . Author { { Name : \"Your Name\" , Role : \"Author\" }, }, }, } pkg . SetContent ( content )","title":"Setting Content"},{"location":"guide/h5p-packages/#package-export","text":"","title":"Package Export"},{"location":"guide/h5p-packages/#create-zip-file","text":"// Export as .h5p file err := pkg . CreateZipFile ( \"my-content.h5p\" ) if err != nil { log . Fatal ( \"Failed to create H5P file:\" , err ) } fmt . Println ( \"Successfully created my-content.h5p\" )","title":"Create ZIP File"},{"location":"guide/h5p-packages/#export-to-directory","text":"// Export to directory structure (for development) err := pkg . ExportToDirectory ( \"./h5p-export\" ) if err != nil { log . Fatal ( \"Failed to export:\" , err ) }","title":"Export to Directory"},{"location":"guide/h5p-packages/#loading-packages","text":"","title":"Loading Packages"},{"location":"guide/h5p-packages/#load-from-zip-file","text":"// Load existing H5P package pkg , err := h5p . LoadH5PPackage ( \"existing-content.h5p\" ) if err != nil { log . Fatal ( \"Failed to load package:\" , err ) } // Access package components packageDef := pkg . GetPackageDefinition () content := pkg . GetContent () libraries := pkg . GetLibraries ()","title":"Load from ZIP File"},{"location":"guide/h5p-packages/#modify-existing-package","text":"// Load and modify pkg , err := h5p . LoadH5PPackage ( \"quiz.h5p\" ) if err != nil { log . Fatal ( err ) } // Update title packageDef := pkg . GetPackageDefinition () packageDef . Title = \"Updated Quiz Title\" pkg . SetPackageDefinition ( packageDef ) // Save changes err = pkg . CreateZipFile ( \"updated-quiz.h5p\" ) if err != nil { log . Fatal ( err ) }","title":"Modify Existing Package"},{"location":"guide/h5p-packages/#validation","text":"","title":"Validation"},{"location":"guide/h5p-packages/#package-validation","text":"// Validate complete package if err := pkg . Validate (); err != nil { log . Fatal ( \"Package validation failed:\" , err ) }","title":"Package Validation"},{"location":"guide/h5p-packages/#individual-component-validation","text":"// Validate package definition if err := packageDef . Validate (); err != nil { log . Fatal ( \"Package definition invalid:\" , err ) } // Validate content if err := content . Validate (); err != nil { log . Fatal ( \"Content invalid:\" , err ) } // Validate libraries for _ , lib := range libraries { if err := lib . Validate (); err != nil { log . Fatal ( \"Library invalid:\" , err ) } }","title":"Individual Component Validation"},{"location":"guide/h5p-packages/#complete-example","text":"package main import ( \"log\" \"os\" \"github.com/grokify/h5p-go\" \"github.com/grokify/h5p-go/schemas\" ) func main () { // Create a complete H5P package pkg := createCompletePackage () // Validate before export if err := pkg . Validate (); err != nil { log . Fatal ( \"Validation failed:\" , err ) } // Export as H5P file err := pkg . CreateZipFile ( \"complete-quiz.h5p\" ) if err != nil { log . Fatal ( \"Export failed:\" , err ) } fmt . Println ( \"Successfully created complete-quiz.h5p\" ) } func createCompletePackage () * h5p . H5PPackage { pkg := h5p . NewH5PPackage () // Package definition packageDef := & h5p . PackageDefinition { Title : \"Complete Programming Quiz\" , Language : \"en\" , MainLibrary : \"H5P.QuestionSet\" , EmbedTypes : [] string { \"div\" }, PreloadedDependencies : [] h5p . LibraryDependency { { MachineName : \"H5P.QuestionSet\" , MajorVersion : 1 , MinorVersion : 20 , }, { MachineName : \"H5P.MultiChoice\" , MajorVersion : 1 , MinorVersion : 16 , }, }, License : \"CC BY-SA\" , Authors : [] h5p . Author { { Name : \"Quiz Creator\" , Role : \"Author\" }, }, } pkg . SetPackageDefinition ( packageDef ) // Create question set content questionSet := createQuestionSet () content := & h5p . Content { Params : questionSet , Metadata : & h5p . Metadata { Title : \"Programming Quiz\" , License : \"CC BY-SA\" , }, } pkg . SetContent ( content ) // Add required libraries addLibraries ( pkg ) return pkg } func createQuestionSet () * h5p . QuestionSet { // Create questions using the builder answers := [] h5p . Answer { h5p . CreateAnswer ( \"Go\" , true ), h5p . CreateAnswer ( \"JavaScript\" , false ), } questionSet , err := h5p . NewQuestionSetBuilder (). SetTitle ( \"Programming Knowledge Test\" ). SetProgressType ( \"textual\" ). SetPassPercentage ( 70 ). AddMultipleChoiceQuestion ( \"Which language is statically typed?\" , answers ). Build () if err != nil { log . Fatal ( err ) } return questionSet } func addLibraries ( pkg * h5p . H5PPackage ) { // Add QuestionSet library questionSetLib := & h5p . Library { MachineName : \"H5P.QuestionSet-1.20\" , Definition : & h5p . LibraryDefinition { Title : \"Question Set\" , MachineName : \"H5P.QuestionSet\" , MajorVersion : 1 , MinorVersion : 20 , PatchVersion : 0 , Runnable : true , }, Files : map [ string ][] byte { \"js/questionset.js\" : loadLibraryFile ( \"questionset.js\" ), \"css/questionset.css\" : loadLibraryFile ( \"questionset.css\" ), \"semantics.json\" : loadLibraryFile ( \"questionset-semantics.json\" ), }, } pkg . AddLibrary ( questionSetLib ) // Add MultiChoice library multiChoiceLib := & h5p . Library { MachineName : \"H5P.MultiChoice-1.16\" , Definition : & h5p . LibraryDefinition { Title : \"Multiple Choice\" , MachineName : \"H5P.MultiChoice\" , MajorVersion : 1 , MinorVersion : 16 , PatchVersion : 4 , Runnable : true , }, Files : map [ string ][] byte { \"js/multichoice.js\" : loadLibraryFile ( \"multichoice.js\" ), \"css/multichoice.css\" : loadLibraryFile ( \"multichoice.css\" ), \"semantics.json\" : loadLibraryFile ( \"multichoice-semantics.json\" ), }, } pkg . AddLibrary ( multiChoiceLib ) } func loadLibraryFile ( filename string ) [] byte { // In practice, load actual H5P library files // For example: return os.ReadFile(\"libraries/\" + filename) return [] byte ( \"// Placeholder library content\" ) }","title":"Complete Example"},{"location":"guide/h5p-packages/#best-practices","text":"Version Management - Use proper semantic versioning for libraries Dependency Management - Specify exact versions for dependencies Asset Organization - Keep assets organized in appropriate directories Validation - Always validate packages before deployment Licensing - Include proper license information Documentation - Document any custom libraries or modifications","title":"Best Practices"},{"location":"guide/h5p-packages/#deployment","text":"H5P packages can be deployed to: - H5P-compatible LMS platforms - WordPress with H5P plugin - Drupal with H5P module - Custom web applications with H5P Core","title":"Deployment"},{"location":"guide/h5p-packages/#next-steps","text":"Validation - Understanding validation rules Examples - Package creation examples File Structure - Detailed file format reference","title":"Next Steps"},{"location":"guide/question-sets/","text":"Question Sets \u00b6 Question sets are collections of interactive questions with overall scoring and feedback. They're perfect for quizzes, assessments, and educational content. Overview \u00b6 A question set consists of: - Multiple questions of various types - Overall scoring and pass percentage - Introduction and conclusion text - Feedback based on performance ranges - Navigation and progress indicators Creating Question Sets \u00b6 Using the Builder \u00b6 The recommended way to create question sets is using the fluent builder API: builder := h5p . NewQuestionSetBuilder () questionSet , err := builder . SetTitle ( \"My Quiz\" ). SetProgressType ( \"textual\" ). SetPassPercentage ( 70 ). SetIntroduction ( \"Welcome to the quiz!\" ). AddMultipleChoiceQuestion ( \"Question 1?\" , answers1 ). AddMultipleChoiceQuestion ( \"Question 2?\" , answers2 ). Build () Configuration Options \u00b6 Title and Metadata \u00b6 builder . SetTitle ( \"Advanced Geography Quiz\" ). SetProgressType ( \"textual\" ). // \"textual\" or \"dots\" SetPassPercentage ( 80 ). // 0-100 SetIntroduction ( \"Test your knowledge!\" ). SetStartButtonText ( \"Begin Quiz\" ) Question Management \u00b6 // Add multiple choice questions builder . AddMultipleChoiceQuestion ( \"What is the capital?\" , answers ) // Questions are added in order and will be presented sequentially Feedback Configuration \u00b6 feedbackRanges := [] h5p . OverallFeedback { { From : 0 , To : 40 , Feedback : \"Keep studying!\" }, { From : 41 , To : 70 , Feedback : \"Good job!\" }, { From : 71 , To : 100 , Feedback : \"Excellent work!\" }, } builder . AddOverallFeedback ( feedbackRanges ) Question Types \u00b6 Multiple Choice Questions \u00b6 Support both single-answer and multi-answer questions: // Single correct answer answers := [] h5p . Answer { h5p . CreateAnswer ( \"Correct answer\" , true ), h5p . CreateAnswer ( \"Wrong answer 1\" , false ), h5p . CreateAnswer ( \"Wrong answer 2\" , false ), } // Multiple correct answers answers := [] h5p . Answer { h5p . CreateAnswer ( \"Correct 1\" , true ), h5p . CreateAnswer ( \"Correct 2\" , true ), h5p . CreateAnswer ( \"Wrong\" , false ), } builder . AddMultipleChoiceQuestion ( \"Question text\" , answers ) Answer Options \u00b6 Each answer can include additional metadata: type Answer struct { Text string `json:\"text\"` Correct bool `json:\"correct\"` Feedback string `json:\"feedback,omitempty\"` Weight float64 `json:\"weight,omitempty\"` } answer := h5p . Answer { Text : \"Paris\" , Correct : true , Feedback : \"Correct! Paris is the capital of France.\" , Weight : 1.0 , } Scoring and Feedback \u00b6 Pass Percentage \u00b6 Set the minimum score required to pass: builder . SetPassPercentage ( 75 ) // 75% required to pass Overall Feedback \u00b6 Provide different feedback messages based on score ranges: feedback := [] h5p . OverallFeedback { { From : 0 , To : 30 , Feedback : \"You might want to review the material and try again.\" , }, { From : 31 , To : 60 , Feedback : \"Good effort! You're getting there.\" , }, { From : 61 , To : 100 , Feedback : \"Excellent work! You've mastered this topic.\" , }, } builder . AddOverallFeedback ( feedback ) Progress Indicators \u00b6 Choose how progress is displayed to users: // Textual progress (e.g., \"Question 1 of 5\") builder . SetProgressType ( \"textual\" ) // Dots progress indicator builder . SetProgressType ( \"dots\" ) Advanced Features \u00b6 Custom Start Button \u00b6 builder . SetStartButtonText ( \"Start the Challenge!\" ) Randomization \u00b6 Currently, question order is determined by the order they're added to the builder. Future versions may support randomization. Validation \u00b6 Always validate your question sets before deployment: questionSet , err := builder . Build () if err != nil { log . Fatal ( \"Build failed:\" , err ) } // Validate the complete question set if err := questionSet . Validate (); err != nil { log . Fatal ( \"Validation failed:\" , err ) } Common validation errors: - Missing required fields (title, questions) - Invalid pass percentage (not 0-100) - Empty feedback ranges - Questions without answers Export and Usage \u00b6 JSON Export \u00b6 jsonData , err := questionSet . ToJSON () if err != nil { log . Fatal ( err ) } // Save to file os . WriteFile ( \"quiz.json\" , jsonData , 0644 ) Loading from JSON \u00b6 jsonData , err := os . ReadFile ( \"quiz.json\" ) if err != nil { log . Fatal ( err ) } questionSet , err := h5p . FromJSON ( jsonData ) if err != nil { log . Fatal ( err ) } Best Practices \u00b6 Clear Questions - Write unambiguous questions Balanced Difficulty - Mix easy and challenging questions Meaningful Feedback - Provide helpful feedback for both correct and incorrect answers Appropriate Length - Keep quizzes focused (5-15 questions typically) Test Thoroughly - Validate and test your content before deployment Progressive Difficulty - Start with easier questions to build confidence Complete Example \u00b6 package main import ( \"fmt\" \"log\" \"os\" \"github.com/grokify/h5p-go\" ) func main () { // Create a comprehensive geography quiz quiz , err := createGeographyQuiz () if err != nil { log . Fatal ( err ) } // Validate before export if err := quiz . Validate (); err != nil { log . Fatal ( \"Validation failed:\" , err ) } // Export to JSON jsonData , err := quiz . ToJSON () if err != nil { log . Fatal ( err ) } // Save to file err = os . WriteFile ( \"geography-quiz.json\" , jsonData , 0644 ) if err != nil { log . Fatal ( err ) } fmt . Println ( \"Geography quiz created successfully!\" ) } func createGeographyQuiz () ( * h5p . QuestionSet , error ) { builder := h5p . NewQuestionSetBuilder () // Question 1: Capitals capitals := [] h5p . Answer { { Text : \"Paris\" , Correct : true , Feedback : \"Correct!\" }, { Text : \"London\" , Correct : false , Feedback : \"London is the capital of the UK.\" }, { Text : \"Berlin\" , Correct : false , Feedback : \"Berlin is the capital of Germany.\" }, { Text : \"Madrid\" , Correct : false , Feedback : \"Madrid is the capital of Spain.\" }, } // Question 2: Geography continents := [] h5p . Answer { { Text : \"Asia\" , Correct : true , Feedback : \"Correct! Asia is the largest continent.\" }, { Text : \"Africa\" , Correct : false , Feedback : \"Africa is the second largest.\" }, { Text : \"North America\" , Correct : false , Feedback : \"North America is the third largest.\" }, { Text : \"Europe\" , Correct : false , Feedback : \"Europe is smaller than Asia.\" }, } // Feedback ranges feedback := [] h5p . OverallFeedback { { From : 0 , To : 50 , Feedback : \"Keep studying geography!\" }, { From : 51 , To : 80 , Feedback : \"Good knowledge of world geography!\" }, { From : 81 , To : 100 , Feedback : \"Excellent! You're a geography expert!\" }, } return builder . SetTitle ( \"World Geography Challenge\" ). SetProgressType ( \"textual\" ). SetPassPercentage ( 60 ). SetIntroduction ( \"Test your knowledge of world geography with this challenging quiz!\" ). SetStartButtonText ( \"Start Challenge\" ). AddMultipleChoiceQuestion ( \"What is the capital of France?\" , capitals ). AddMultipleChoiceQuestion ( \"Which is the largest continent by area?\" , continents ). AddOverallFeedback ( feedback ). Build () } Next Steps \u00b6 Typed Questions - Using strongly-typed content schemas H5P Packages - Creating complete H5P files Validation - Ensuring content quality","title":"Question Sets"},{"location":"guide/question-sets/#question-sets","text":"Question sets are collections of interactive questions with overall scoring and feedback. They're perfect for quizzes, assessments, and educational content.","title":"Question Sets"},{"location":"guide/question-sets/#overview","text":"A question set consists of: - Multiple questions of various types - Overall scoring and pass percentage - Introduction and conclusion text - Feedback based on performance ranges - Navigation and progress indicators","title":"Overview"},{"location":"guide/question-sets/#creating-question-sets","text":"","title":"Creating Question Sets"},{"location":"guide/question-sets/#using-the-builder","text":"The recommended way to create question sets is using the fluent builder API: builder := h5p . NewQuestionSetBuilder () questionSet , err := builder . SetTitle ( \"My Quiz\" ). SetProgressType ( \"textual\" ). SetPassPercentage ( 70 ). SetIntroduction ( \"Welcome to the quiz!\" ). AddMultipleChoiceQuestion ( \"Question 1?\" , answers1 ). AddMultipleChoiceQuestion ( \"Question 2?\" , answers2 ). Build ()","title":"Using the Builder"},{"location":"guide/question-sets/#configuration-options","text":"","title":"Configuration Options"},{"location":"guide/question-sets/#title-and-metadata","text":"builder . SetTitle ( \"Advanced Geography Quiz\" ). SetProgressType ( \"textual\" ). // \"textual\" or \"dots\" SetPassPercentage ( 80 ). // 0-100 SetIntroduction ( \"Test your knowledge!\" ). SetStartButtonText ( \"Begin Quiz\" )","title":"Title and Metadata"},{"location":"guide/question-sets/#question-management","text":"// Add multiple choice questions builder . AddMultipleChoiceQuestion ( \"What is the capital?\" , answers ) // Questions are added in order and will be presented sequentially","title":"Question Management"},{"location":"guide/question-sets/#feedback-configuration","text":"feedbackRanges := [] h5p . OverallFeedback { { From : 0 , To : 40 , Feedback : \"Keep studying!\" }, { From : 41 , To : 70 , Feedback : \"Good job!\" }, { From : 71 , To : 100 , Feedback : \"Excellent work!\" }, } builder . AddOverallFeedback ( feedbackRanges )","title":"Feedback Configuration"},{"location":"guide/question-sets/#question-types","text":"","title":"Question Types"},{"location":"guide/question-sets/#multiple-choice-questions","text":"Support both single-answer and multi-answer questions: // Single correct answer answers := [] h5p . Answer { h5p . CreateAnswer ( \"Correct answer\" , true ), h5p . CreateAnswer ( \"Wrong answer 1\" , false ), h5p . CreateAnswer ( \"Wrong answer 2\" , false ), } // Multiple correct answers answers := [] h5p . Answer { h5p . CreateAnswer ( \"Correct 1\" , true ), h5p . CreateAnswer ( \"Correct 2\" , true ), h5p . CreateAnswer ( \"Wrong\" , false ), } builder . AddMultipleChoiceQuestion ( \"Question text\" , answers )","title":"Multiple Choice Questions"},{"location":"guide/question-sets/#answer-options","text":"Each answer can include additional metadata: type Answer struct { Text string `json:\"text\"` Correct bool `json:\"correct\"` Feedback string `json:\"feedback,omitempty\"` Weight float64 `json:\"weight,omitempty\"` } answer := h5p . Answer { Text : \"Paris\" , Correct : true , Feedback : \"Correct! Paris is the capital of France.\" , Weight : 1.0 , }","title":"Answer Options"},{"location":"guide/question-sets/#scoring-and-feedback","text":"","title":"Scoring and Feedback"},{"location":"guide/question-sets/#pass-percentage","text":"Set the minimum score required to pass: builder . SetPassPercentage ( 75 ) // 75% required to pass","title":"Pass Percentage"},{"location":"guide/question-sets/#overall-feedback","text":"Provide different feedback messages based on score ranges: feedback := [] h5p . OverallFeedback { { From : 0 , To : 30 , Feedback : \"You might want to review the material and try again.\" , }, { From : 31 , To : 60 , Feedback : \"Good effort! You're getting there.\" , }, { From : 61 , To : 100 , Feedback : \"Excellent work! You've mastered this topic.\" , }, } builder . AddOverallFeedback ( feedback )","title":"Overall Feedback"},{"location":"guide/question-sets/#progress-indicators","text":"Choose how progress is displayed to users: // Textual progress (e.g., \"Question 1 of 5\") builder . SetProgressType ( \"textual\" ) // Dots progress indicator builder . SetProgressType ( \"dots\" )","title":"Progress Indicators"},{"location":"guide/question-sets/#advanced-features","text":"","title":"Advanced Features"},{"location":"guide/question-sets/#custom-start-button","text":"builder . SetStartButtonText ( \"Start the Challenge!\" )","title":"Custom Start Button"},{"location":"guide/question-sets/#randomization","text":"Currently, question order is determined by the order they're added to the builder. Future versions may support randomization.","title":"Randomization"},{"location":"guide/question-sets/#validation","text":"Always validate your question sets before deployment: questionSet , err := builder . Build () if err != nil { log . Fatal ( \"Build failed:\" , err ) } // Validate the complete question set if err := questionSet . Validate (); err != nil { log . Fatal ( \"Validation failed:\" , err ) } Common validation errors: - Missing required fields (title, questions) - Invalid pass percentage (not 0-100) - Empty feedback ranges - Questions without answers","title":"Validation"},{"location":"guide/question-sets/#export-and-usage","text":"","title":"Export and Usage"},{"location":"guide/question-sets/#json-export","text":"jsonData , err := questionSet . ToJSON () if err != nil { log . Fatal ( err ) } // Save to file os . WriteFile ( \"quiz.json\" , jsonData , 0644 )","title":"JSON Export"},{"location":"guide/question-sets/#loading-from-json","text":"jsonData , err := os . ReadFile ( \"quiz.json\" ) if err != nil { log . Fatal ( err ) } questionSet , err := h5p . FromJSON ( jsonData ) if err != nil { log . Fatal ( err ) }","title":"Loading from JSON"},{"location":"guide/question-sets/#best-practices","text":"Clear Questions - Write unambiguous questions Balanced Difficulty - Mix easy and challenging questions Meaningful Feedback - Provide helpful feedback for both correct and incorrect answers Appropriate Length - Keep quizzes focused (5-15 questions typically) Test Thoroughly - Validate and test your content before deployment Progressive Difficulty - Start with easier questions to build confidence","title":"Best Practices"},{"location":"guide/question-sets/#complete-example","text":"package main import ( \"fmt\" \"log\" \"os\" \"github.com/grokify/h5p-go\" ) func main () { // Create a comprehensive geography quiz quiz , err := createGeographyQuiz () if err != nil { log . Fatal ( err ) } // Validate before export if err := quiz . Validate (); err != nil { log . Fatal ( \"Validation failed:\" , err ) } // Export to JSON jsonData , err := quiz . ToJSON () if err != nil { log . Fatal ( err ) } // Save to file err = os . WriteFile ( \"geography-quiz.json\" , jsonData , 0644 ) if err != nil { log . Fatal ( err ) } fmt . Println ( \"Geography quiz created successfully!\" ) } func createGeographyQuiz () ( * h5p . QuestionSet , error ) { builder := h5p . NewQuestionSetBuilder () // Question 1: Capitals capitals := [] h5p . Answer { { Text : \"Paris\" , Correct : true , Feedback : \"Correct!\" }, { Text : \"London\" , Correct : false , Feedback : \"London is the capital of the UK.\" }, { Text : \"Berlin\" , Correct : false , Feedback : \"Berlin is the capital of Germany.\" }, { Text : \"Madrid\" , Correct : false , Feedback : \"Madrid is the capital of Spain.\" }, } // Question 2: Geography continents := [] h5p . Answer { { Text : \"Asia\" , Correct : true , Feedback : \"Correct! Asia is the largest continent.\" }, { Text : \"Africa\" , Correct : false , Feedback : \"Africa is the second largest.\" }, { Text : \"North America\" , Correct : false , Feedback : \"North America is the third largest.\" }, { Text : \"Europe\" , Correct : false , Feedback : \"Europe is smaller than Asia.\" }, } // Feedback ranges feedback := [] h5p . OverallFeedback { { From : 0 , To : 50 , Feedback : \"Keep studying geography!\" }, { From : 51 , To : 80 , Feedback : \"Good knowledge of world geography!\" }, { From : 81 , To : 100 , Feedback : \"Excellent! You're a geography expert!\" }, } return builder . SetTitle ( \"World Geography Challenge\" ). SetProgressType ( \"textual\" ). SetPassPercentage ( 60 ). SetIntroduction ( \"Test your knowledge of world geography with this challenging quiz!\" ). SetStartButtonText ( \"Start Challenge\" ). AddMultipleChoiceQuestion ( \"What is the capital of France?\" , capitals ). AddMultipleChoiceQuestion ( \"Which is the largest continent by area?\" , continents ). AddOverallFeedback ( feedback ). Build () }","title":"Complete Example"},{"location":"guide/question-sets/#next-steps","text":"Typed Questions - Using strongly-typed content schemas H5P Packages - Creating complete H5P files Validation - Ensuring content quality","title":"Next Steps"},{"location":"guide/typed-questions/","text":"Typed Questions \u00b6 Typed questions provide strongly-typed, schema-validated interfaces for creating H5P content. They ensure type safety and compliance with official H5P content type specifications. Overview \u00b6 The SDK provides typed implementations for official H5P content types: - MultiChoice - Single and multiple answer questions - Essay - Open-ended text responses (future) - TrueFalse - Simple true/false questions (future) MultiChoice Questions \u00b6 MultiChoice is the most commonly used H5P content type for quizzes and assessments. Basic Usage \u00b6 import \"github.com/grokify/h5p-go/schemas\" // Create parameters using typed structs params := & schemas . MultiChoiceParams { Question : \"What is the capital of France?\" , Answers : [] schemas . AnswerOption { { Text : \"Paris\" , Correct : true , TipsAndFeedback : & schemas . AnswerTipsAndFeedback { ChosenFeedback : \"Correct! Paris is the capital of France.\" , }, }, { Text : \"London\" , Correct : false , TipsAndFeedback : & schemas . AnswerTipsAndFeedback { ChosenFeedback : \"Incorrect. London is the capital of the UK.\" , }, }, }, } // Create the typed question question := h5p . NewMultiChoiceQuestion ( params ) Answer Configuration \u00b6 Single Answer Questions \u00b6 params := & schemas . MultiChoiceParams { Question : \"Which planet is closest to the Sun?\" , Answers : [] schemas . AnswerOption { { Text : \"Mercury\" , Correct : true }, { Text : \"Venus\" , Correct : false }, { Text : \"Earth\" , Correct : false }, { Text : \"Mars\" , Correct : false }, }, Behaviour : & schemas . Behaviour { Type : \"single\" , // Single answer mode }, } Multiple Answer Questions \u00b6 params := & schemas . MultiChoiceParams { Question : \"Which of these are programming languages?\" , Answers : [] schemas . AnswerOption { { Text : \"Go\" , Correct : true }, { Text : \"Python\" , Correct : true }, { Text : \"HTML\" , Correct : false }, { Text : \"CSS\" , Correct : false }, }, Behaviour : & schemas . Behaviour { Type : \"multi\" , // Multiple answer mode }, } Answer Feedback \u00b6 Provide detailed feedback for each answer option: answers := [] schemas . AnswerOption { { Text : \"Correct Answer\" , Correct : true , TipsAndFeedback : & schemas . AnswerTipsAndFeedback { Tip : \"Think about the basic principles.\" , ChosenFeedback : \"Excellent! You understood the concept perfectly.\" , NotChosenFeedback : \"This was actually the correct answer.\" , }, }, { Text : \"Incorrect Answer\" , Correct : false , TipsAndFeedback : & schemas . AnswerTipsAndFeedback { Tip : \"Consider the context carefully.\" , ChosenFeedback : \"Not quite. Review the material on this topic.\" , NotChosenFeedback : \"Good job avoiding this incorrect option.\" , }, }, } Behavior Configuration \u00b6 Control how the question behaves: behaviour := & schemas . Behaviour { Type : \"single\" , // \"single\" or \"multi\" EnableRetry : true , // Allow retrying EnableSolutionsButton : true , // Show solutions EnableCheckButton : true , // Show check button RandomAnswers : true , // Randomize answer order ShowScorePoints : true , // Display points AutoCheck : false , // Auto-check answers PassPercentage : 75 , // Pass threshold ShowResultsOnQuizEnd : true , // Show results at end } params . Behaviour = behaviour Overall Feedback \u00b6 Provide feedback based on score ranges: overallFeedback := [] schemas . OverallFeedback { { From : 0 , To : 25 , Feedback : \"You might want to review the material and try again.\" , }, { From : 26 , To : 75 , Feedback : \"Good effort! You're making progress.\" , }, { From : 76 , To : 100 , Feedback : \"Excellent work! You've mastered this topic.\" , }, } params . OverallFeedback = overallFeedback Media Support \u00b6 Add images, videos, or audio to questions: params := & schemas . MultiChoiceParams { Question : \"What landmark is shown in the image?\" , Media : & schemas . MediaField { Type : \"image\" , Copyright : & schemas . Copyright { License : \"CC BY-SA\" , Author : \"Example Author\" , }, // File would be included in H5P package }, Answers : answers , } UI Configuration \u00b6 Customize the user interface: ui := & schemas . UI { CheckAnswerButton : \"Check Answer\" , SubmitAnswerButton : \"Submit\" , ShowSolutionButton : \"Show Solution\" , TryAgainButton : \"Try Again\" , ScoreBarLabel : \"Progress\" , A11yCheck : \"Check the answers\" , A11yShowSolution : \"Show the solution\" , A11yRetry : \"Retry the task\" , } params . UI = ui Validation \u00b6 Typed questions include comprehensive validation: params := & schemas . MultiChoiceParams { Question : \"What is 2 + 2?\" , Answers : [] schemas . AnswerOption { { Text : \"4\" , Correct : true }, { Text : \"5\" , Correct : false }, }, } // Validate the parameters if err := params . Validate (); err != nil { log . Fatal ( \"Validation failed:\" , err ) } // Create the question (also validates) question := h5p . NewMultiChoiceQuestion ( params ) Common validation rules: - Question text is required - At least 2 answers required - At least 1 correct answer required - Pass percentage must be 0-100 - Feedback ranges must not overlap Converting to Generic Questions \u00b6 Convert typed questions to generic format for question sets: // Create typed question typedQuestion := h5p . NewMultiChoiceQuestion ( params ) // Convert to generic question genericQuestion := typedQuestion . ToQuestion () // Add to question set builder := h5p . NewQuestionSetBuilder () builder . AddQuestion ( genericQuestion ) Complete Example \u00b6 package main import ( \"fmt\" \"log\" \"github.com/grokify/h5p-go\" \"github.com/grokify/h5p-go/schemas\" ) func main () { // Create a comprehensive multiple choice question question := createAdvancedQuestion () // Convert to generic format genericQuestion := question . ToQuestion () // Add to a question set questionSet , err := h5p . NewQuestionSetBuilder (). SetTitle ( \"Advanced Programming Quiz\" ). SetProgressType ( \"textual\" ). SetPassPercentage ( 70 ). AddQuestion ( genericQuestion ). Build () if err != nil { log . Fatal ( err ) } // Export and validate if err := questionSet . Validate (); err != nil { log . Fatal ( \"Validation failed:\" , err ) } jsonData , _ := questionSet . ToJSON () fmt . Printf ( \"Created advanced question:\\n%s\\n\" , string ( jsonData )) } func createAdvancedQuestion () * h5p . MultiChoiceQuestion { params := & schemas . MultiChoiceParams { Question : \"Which of the following are characteristics of Go programming language?\" , Answers : [] schemas . AnswerOption { { Text : \"Statically typed\" , Correct : true , TipsAndFeedback : & schemas . AnswerTipsAndFeedback { Tip : \"Think about compile-time vs runtime type checking.\" , ChosenFeedback : \"Correct! Go uses static typing with type inference.\" , NotChosenFeedback : \"This is actually a key feature of Go.\" , }, }, { Text : \"Compiled language\" , Correct : true , TipsAndFeedback : & schemas . AnswerTipsAndFeedback { Tip : \"Consider how Go code is executed.\" , ChosenFeedback : \"Right! Go compiles to native machine code.\" , NotChosenFeedback : \"Go is indeed compiled, not interpreted.\" , }, }, { Text : \"Object-oriented with classes\" , Correct : false , TipsAndFeedback : & schemas . AnswerTipsAndFeedback { Tip : \"Think about Go's approach to OOP.\" , ChosenFeedback : \"Not quite. Go doesn't have classes, but uses structs and interfaces.\" , NotChosenFeedback : \"Good! Go doesn't use traditional class-based OOP.\" , }, }, { Text : \"Has built-in concurrency support\" , Correct : true , TipsAndFeedback : & schemas . AnswerTipsAndFeedback { Tip : \"Consider Go's approach to concurrent programming.\" , ChosenFeedback : \"Excellent! Goroutines and channels are core features.\" , NotChosenFeedback : \"This is actually one of Go's strongest features.\" , }, }, }, Behaviour : & schemas . Behaviour { Type : \"multi\" , EnableRetry : true , EnableSolutionsButton : true , RandomAnswers : true , ShowScorePoints : true , PassPercentage : 75 , }, OverallFeedback : [] schemas . OverallFeedback { { From : 0 , To : 40 , Feedback : \"Review the fundamentals of Go programming.\" , }, { From : 41 , To : 80 , Feedback : \"Good understanding! Keep learning about Go's unique features.\" , }, { From : 81 , To : 100 , Feedback : \"Excellent! You have a solid grasp of Go's characteristics.\" , }, }, UI : & schemas . UI { CheckAnswerButton : \"Check My Answers\" , SubmitAnswerButton : \"Submit Answers\" , TryAgainButton : \"Try Again\" , ShowSolutionButton : \"Show Solutions\" , ScoreBarLabel : \"Your Progress\" , }, } return h5p . NewMultiChoiceQuestion ( params ) } Best Practices \u00b6 Use Validation - Always validate parameters before creating questions Meaningful Feedback - Provide helpful tips and explanations Clear Questions - Write unambiguous question text Balanced Options - Include plausible distractors Accessibility - Use proper UI labels for screen readers Test Thoroughly - Validate both individual questions and complete question sets Schema Compliance \u00b6 Typed questions ensure compliance with official H5P schemas: - Field validation matches H5P semantics - Required fields are enforced - Value ranges are checked - Relationships between fields are validated Next Steps \u00b6 H5P Packages - Creating complete H5P files Validation - Understanding validation rules API Reference - Detailed schema documentation","title":"Typed Questions"},{"location":"guide/typed-questions/#typed-questions","text":"Typed questions provide strongly-typed, schema-validated interfaces for creating H5P content. They ensure type safety and compliance with official H5P content type specifications.","title":"Typed Questions"},{"location":"guide/typed-questions/#overview","text":"The SDK provides typed implementations for official H5P content types: - MultiChoice - Single and multiple answer questions - Essay - Open-ended text responses (future) - TrueFalse - Simple true/false questions (future)","title":"Overview"},{"location":"guide/typed-questions/#multichoice-questions","text":"MultiChoice is the most commonly used H5P content type for quizzes and assessments.","title":"MultiChoice Questions"},{"location":"guide/typed-questions/#basic-usage","text":"import \"github.com/grokify/h5p-go/schemas\" // Create parameters using typed structs params := & schemas . MultiChoiceParams { Question : \"What is the capital of France?\" , Answers : [] schemas . AnswerOption { { Text : \"Paris\" , Correct : true , TipsAndFeedback : & schemas . AnswerTipsAndFeedback { ChosenFeedback : \"Correct! Paris is the capital of France.\" , }, }, { Text : \"London\" , Correct : false , TipsAndFeedback : & schemas . AnswerTipsAndFeedback { ChosenFeedback : \"Incorrect. London is the capital of the UK.\" , }, }, }, } // Create the typed question question := h5p . NewMultiChoiceQuestion ( params )","title":"Basic Usage"},{"location":"guide/typed-questions/#answer-configuration","text":"","title":"Answer Configuration"},{"location":"guide/typed-questions/#single-answer-questions","text":"params := & schemas . MultiChoiceParams { Question : \"Which planet is closest to the Sun?\" , Answers : [] schemas . AnswerOption { { Text : \"Mercury\" , Correct : true }, { Text : \"Venus\" , Correct : false }, { Text : \"Earth\" , Correct : false }, { Text : \"Mars\" , Correct : false }, }, Behaviour : & schemas . Behaviour { Type : \"single\" , // Single answer mode }, }","title":"Single Answer Questions"},{"location":"guide/typed-questions/#multiple-answer-questions","text":"params := & schemas . MultiChoiceParams { Question : \"Which of these are programming languages?\" , Answers : [] schemas . AnswerOption { { Text : \"Go\" , Correct : true }, { Text : \"Python\" , Correct : true }, { Text : \"HTML\" , Correct : false }, { Text : \"CSS\" , Correct : false }, }, Behaviour : & schemas . Behaviour { Type : \"multi\" , // Multiple answer mode }, }","title":"Multiple Answer Questions"},{"location":"guide/typed-questions/#answer-feedback","text":"Provide detailed feedback for each answer option: answers := [] schemas . AnswerOption { { Text : \"Correct Answer\" , Correct : true , TipsAndFeedback : & schemas . AnswerTipsAndFeedback { Tip : \"Think about the basic principles.\" , ChosenFeedback : \"Excellent! You understood the concept perfectly.\" , NotChosenFeedback : \"This was actually the correct answer.\" , }, }, { Text : \"Incorrect Answer\" , Correct : false , TipsAndFeedback : & schemas . AnswerTipsAndFeedback { Tip : \"Consider the context carefully.\" , ChosenFeedback : \"Not quite. Review the material on this topic.\" , NotChosenFeedback : \"Good job avoiding this incorrect option.\" , }, }, }","title":"Answer Feedback"},{"location":"guide/typed-questions/#behavior-configuration","text":"Control how the question behaves: behaviour := & schemas . Behaviour { Type : \"single\" , // \"single\" or \"multi\" EnableRetry : true , // Allow retrying EnableSolutionsButton : true , // Show solutions EnableCheckButton : true , // Show check button RandomAnswers : true , // Randomize answer order ShowScorePoints : true , // Display points AutoCheck : false , // Auto-check answers PassPercentage : 75 , // Pass threshold ShowResultsOnQuizEnd : true , // Show results at end } params . Behaviour = behaviour","title":"Behavior Configuration"},{"location":"guide/typed-questions/#overall-feedback","text":"Provide feedback based on score ranges: overallFeedback := [] schemas . OverallFeedback { { From : 0 , To : 25 , Feedback : \"You might want to review the material and try again.\" , }, { From : 26 , To : 75 , Feedback : \"Good effort! You're making progress.\" , }, { From : 76 , To : 100 , Feedback : \"Excellent work! You've mastered this topic.\" , }, } params . OverallFeedback = overallFeedback","title":"Overall Feedback"},{"location":"guide/typed-questions/#media-support","text":"Add images, videos, or audio to questions: params := & schemas . MultiChoiceParams { Question : \"What landmark is shown in the image?\" , Media : & schemas . MediaField { Type : \"image\" , Copyright : & schemas . Copyright { License : \"CC BY-SA\" , Author : \"Example Author\" , }, // File would be included in H5P package }, Answers : answers , }","title":"Media Support"},{"location":"guide/typed-questions/#ui-configuration","text":"Customize the user interface: ui := & schemas . UI { CheckAnswerButton : \"Check Answer\" , SubmitAnswerButton : \"Submit\" , ShowSolutionButton : \"Show Solution\" , TryAgainButton : \"Try Again\" , ScoreBarLabel : \"Progress\" , A11yCheck : \"Check the answers\" , A11yShowSolution : \"Show the solution\" , A11yRetry : \"Retry the task\" , } params . UI = ui","title":"UI Configuration"},{"location":"guide/typed-questions/#validation","text":"Typed questions include comprehensive validation: params := & schemas . MultiChoiceParams { Question : \"What is 2 + 2?\" , Answers : [] schemas . AnswerOption { { Text : \"4\" , Correct : true }, { Text : \"5\" , Correct : false }, }, } // Validate the parameters if err := params . Validate (); err != nil { log . Fatal ( \"Validation failed:\" , err ) } // Create the question (also validates) question := h5p . NewMultiChoiceQuestion ( params ) Common validation rules: - Question text is required - At least 2 answers required - At least 1 correct answer required - Pass percentage must be 0-100 - Feedback ranges must not overlap","title":"Validation"},{"location":"guide/typed-questions/#converting-to-generic-questions","text":"Convert typed questions to generic format for question sets: // Create typed question typedQuestion := h5p . NewMultiChoiceQuestion ( params ) // Convert to generic question genericQuestion := typedQuestion . ToQuestion () // Add to question set builder := h5p . NewQuestionSetBuilder () builder . AddQuestion ( genericQuestion )","title":"Converting to Generic Questions"},{"location":"guide/typed-questions/#complete-example","text":"package main import ( \"fmt\" \"log\" \"github.com/grokify/h5p-go\" \"github.com/grokify/h5p-go/schemas\" ) func main () { // Create a comprehensive multiple choice question question := createAdvancedQuestion () // Convert to generic format genericQuestion := question . ToQuestion () // Add to a question set questionSet , err := h5p . NewQuestionSetBuilder (). SetTitle ( \"Advanced Programming Quiz\" ). SetProgressType ( \"textual\" ). SetPassPercentage ( 70 ). AddQuestion ( genericQuestion ). Build () if err != nil { log . Fatal ( err ) } // Export and validate if err := questionSet . Validate (); err != nil { log . Fatal ( \"Validation failed:\" , err ) } jsonData , _ := questionSet . ToJSON () fmt . Printf ( \"Created advanced question:\\n%s\\n\" , string ( jsonData )) } func createAdvancedQuestion () * h5p . MultiChoiceQuestion { params := & schemas . MultiChoiceParams { Question : \"Which of the following are characteristics of Go programming language?\" , Answers : [] schemas . AnswerOption { { Text : \"Statically typed\" , Correct : true , TipsAndFeedback : & schemas . AnswerTipsAndFeedback { Tip : \"Think about compile-time vs runtime type checking.\" , ChosenFeedback : \"Correct! Go uses static typing with type inference.\" , NotChosenFeedback : \"This is actually a key feature of Go.\" , }, }, { Text : \"Compiled language\" , Correct : true , TipsAndFeedback : & schemas . AnswerTipsAndFeedback { Tip : \"Consider how Go code is executed.\" , ChosenFeedback : \"Right! Go compiles to native machine code.\" , NotChosenFeedback : \"Go is indeed compiled, not interpreted.\" , }, }, { Text : \"Object-oriented with classes\" , Correct : false , TipsAndFeedback : & schemas . AnswerTipsAndFeedback { Tip : \"Think about Go's approach to OOP.\" , ChosenFeedback : \"Not quite. Go doesn't have classes, but uses structs and interfaces.\" , NotChosenFeedback : \"Good! Go doesn't use traditional class-based OOP.\" , }, }, { Text : \"Has built-in concurrency support\" , Correct : true , TipsAndFeedback : & schemas . AnswerTipsAndFeedback { Tip : \"Consider Go's approach to concurrent programming.\" , ChosenFeedback : \"Excellent! Goroutines and channels are core features.\" , NotChosenFeedback : \"This is actually one of Go's strongest features.\" , }, }, }, Behaviour : & schemas . Behaviour { Type : \"multi\" , EnableRetry : true , EnableSolutionsButton : true , RandomAnswers : true , ShowScorePoints : true , PassPercentage : 75 , }, OverallFeedback : [] schemas . OverallFeedback { { From : 0 , To : 40 , Feedback : \"Review the fundamentals of Go programming.\" , }, { From : 41 , To : 80 , Feedback : \"Good understanding! Keep learning about Go's unique features.\" , }, { From : 81 , To : 100 , Feedback : \"Excellent! You have a solid grasp of Go's characteristics.\" , }, }, UI : & schemas . UI { CheckAnswerButton : \"Check My Answers\" , SubmitAnswerButton : \"Submit Answers\" , TryAgainButton : \"Try Again\" , ShowSolutionButton : \"Show Solutions\" , ScoreBarLabel : \"Your Progress\" , }, } return h5p . NewMultiChoiceQuestion ( params ) }","title":"Complete Example"},{"location":"guide/typed-questions/#best-practices","text":"Use Validation - Always validate parameters before creating questions Meaningful Feedback - Provide helpful tips and explanations Clear Questions - Write unambiguous question text Balanced Options - Include plausible distractors Accessibility - Use proper UI labels for screen readers Test Thoroughly - Validate both individual questions and complete question sets","title":"Best Practices"},{"location":"guide/typed-questions/#schema-compliance","text":"Typed questions ensure compliance with official H5P schemas: - Field validation matches H5P semantics - Required fields are enforced - Value ranges are checked - Relationships between fields are validated","title":"Schema Compliance"},{"location":"guide/typed-questions/#next-steps","text":"H5P Packages - Creating complete H5P files Validation - Understanding validation rules API Reference - Detailed schema documentation","title":"Next Steps"},{"location":"guide/validation/","text":"Validation \u00b6 The H5P Go SDK includes comprehensive validation to ensure your content meets H5P standards and functions correctly across platforms. Overview \u00b6 Validation occurs at multiple levels: - Parameter validation - Field types, required values, constraints - Structure validation - Proper relationships between components - Schema compliance - Conformance with official H5P specifications - Business logic validation - Sensible values and configurations Validation Levels \u00b6 Content Validation \u00b6 // Validate question set parameters questionSet , err := builder . Build () if err != nil { // Build-time validation failed log . Fatal ( \"Build failed:\" , err ) } // Runtime validation if err := questionSet . Validate (); err != nil { // Content validation failed log . Fatal ( \"Validation failed:\" , err ) } Schema Validation \u00b6 import \"github.com/grokify/h5p-go/schemas\" // Validate typed parameters params := & schemas . MultiChoiceParams { Question : \"What is 2+2?\" , Answers : [] schemas . AnswerOption { { Text : \"4\" , Correct : true }, }, } if err := params . Validate (); err != nil { log . Fatal ( \"Schema validation failed:\" , err ) } Package Validation \u00b6 // Validate complete H5P package pkg := h5p . NewH5PPackage () // ... configure package ... if err := pkg . Validate (); err != nil { log . Fatal ( \"Package validation failed:\" , err ) } Common Validation Rules \u00b6 Question Sets \u00b6 Required Fields: - Title must not be empty - At least one question required - Pass percentage between 0-100 Business Logic: - Pass percentage should be reasonable (typically 50-90) - Questions should have meaningful text - Feedback ranges should not overlap // Valid question set questionSet , err := h5p . NewQuestionSetBuilder (). SetTitle ( \"My Quiz\" ). // Required SetPassPercentage ( 70 ). // 0-100 AddMultipleChoiceQuestion ( // At least 1 question \"Question text?\" , answers , ). Build () Multiple Choice Questions \u00b6 Required Fields: - Question text must not be empty - At least 2 answers required - At least 1 correct answer required Constraints: - Maximum answer length limits - Feedback text length limits - Pass percentage 0-100 // Valid multiple choice params := & schemas . MultiChoiceParams { Question : \"What is the capital?\" , // Required, non-empty Answers : [] schemas . AnswerOption { // Min 2 answers { Text : \"Paris\" , Correct : true }, // At least 1 correct { Text : \"London\" , Correct : false }, // Text required }, } if err := params . Validate (); err != nil { // Validation failed } Answer Options \u00b6 Rules: - Text field is required and non-empty - At least one answer must be marked correct - Feedback text has length limits // Valid answer answer := schemas . AnswerOption { Text : \"Correct Answer\" , // Required Correct : true , // At least 1 must be true TipsAndFeedback : & schemas . AnswerTipsAndFeedback { ChosenFeedback : \"Good job!\" , // Optional, but limited length }, } Error Types \u00b6 Validation Errors \u00b6 The SDK provides structured validation errors: type ValidationError struct { Field string `json:\"field\"` Message string `json:\"message\"` Value interface {} `json:\"value,omitempty\"` } func ( e ValidationError ) Error () string { return fmt . Sprintf ( \"validation error on field '%s': %s\" , e . Field , e . Message ) } Multiple Errors \u00b6 Validation can return multiple errors at once: type ValidationErrors [] ValidationError func ( e ValidationErrors ) Error () string { messages := make ([] string , len ( e )) for i , err := range e { messages [ i ] = err . Error () } return strings . Join ( messages , \"; \" ) } Error Handling \u00b6 questionSet , err := builder . Build () if err != nil { if validationErrors , ok := err .( h5p . ValidationErrors ); ok { fmt . Println ( \"Multiple validation errors:\" ) for _ , validationError := range validationErrors { fmt . Printf ( \"- %s: %s\\n\" , validationError . Field , validationError . Message ) } } else { fmt . Printf ( \"Build error: %s\\n\" , err ) } return } Custom Validation \u00b6 Adding Custom Rules \u00b6 You can implement custom validation for specific use cases: func validateQuizComplexity ( questionSet * h5p . QuestionSet ) error { if len ( questionSet . Questions ) < 3 { return fmt . Errorf ( \"quiz should have at least 3 questions for proper assessment\" ) } // Check for variety in answer counts answerCounts := make ( map [ int ] int ) for _ , question := range questionSet . Questions { if params , ok := question . Params .( map [ string ] interface {}); ok { if answers , exists := params [ \"answers\" ]; exists { if answerList , ok := answers .([] interface {}); ok { answerCounts [ len ( answerList )] ++ } } } } if len ( answerCounts ) == 1 { return fmt . Errorf ( \"consider varying the number of answers for better engagement\" ) } return nil } // Use custom validation if err := validateQuizComplexity ( questionSet ); err != nil { log . Printf ( \"Warning: %s\" , err ) } Validation Best Practices \u00b6 1. Validate Early and Often \u00b6 // Validate at build time questionSet , err := builder . Build () if err != nil { return err // Fail fast } // Validate before export if err := questionSet . Validate (); err != nil { return err } // Validate before package creation if err := pkg . Validate (); err != nil { return err } 2. Handle Validation Gracefully \u00b6 func buildQuestionSet ( title string , questions [] QuestionData ) ( * h5p . QuestionSet , error ) { builder := h5p . NewQuestionSetBuilder (). SetTitle ( title ) for i , q := range questions { if q . Text == \"\" { return nil , fmt . Errorf ( \"question %d has empty text\" , i + 1 ) } if len ( q . Answers ) < 2 { return nil , fmt . Errorf ( \"question %d needs at least 2 answers\" , i + 1 ) } // Convert and add question answers := convertAnswers ( q . Answers ) builder = builder . AddMultipleChoiceQuestion ( q . Text , answers ) } return builder . Build () } 3. Provide Meaningful Error Messages \u00b6 func validatePassPercentage ( percentage int ) error { if percentage < 0 || percentage > 100 { return fmt . Errorf ( \"pass percentage must be between 0 and 100, got %d\" , percentage ) } if percentage < 30 { return fmt . Errorf ( \"pass percentage %d seems too low - consider 50-80 range\" , percentage ) } if percentage > 95 { return fmt . Errorf ( \"pass percentage %d seems too high - consider 60-90 range\" , percentage ) } return nil } Testing Validation \u00b6 Unit Testing \u00b6 func TestQuestionSetValidation ( t * testing . T ) { tests := [] struct { name string builder func () * h5p . QuestionSetBuilder wantError bool errorText string }{ { name : \"valid question set\" , builder : func () * h5p . QuestionSetBuilder { return h5p . NewQuestionSetBuilder (). SetTitle ( \"Test Quiz\" ). SetPassPercentage ( 70 ). AddMultipleChoiceQuestion ( \"Question?\" , validAnswers ) }, wantError : false , }, { name : \"missing title\" , builder : func () * h5p . QuestionSetBuilder { return h5p . NewQuestionSetBuilder (). SetPassPercentage ( 70 ). AddMultipleChoiceQuestion ( \"Question?\" , validAnswers ) }, wantError : true , errorText : \"title is required\" , }, { name : \"invalid pass percentage\" , builder : func () * h5p . QuestionSetBuilder { return h5p . NewQuestionSetBuilder (). SetTitle ( \"Test Quiz\" ). SetPassPercentage ( 150 ). // Invalid AddMultipleChoiceQuestion ( \"Question?\" , validAnswers ) }, wantError : true , errorText : \"pass percentage must be between 0 and 100\" , }, } for _ , tt := range tests { t . Run ( tt . name , func ( t * testing . T ) { _ , err := tt . builder (). Build () if tt . wantError { if err == nil { t . Errorf ( \"expected error but got none\" ) return } if ! strings . Contains ( err . Error (), tt . errorText ) { t . Errorf ( \"error %q should contain %q\" , err . Error (), tt . errorText ) } } else { if err != nil { t . Errorf ( \"unexpected error: %v\" , err ) } } }) } } Integration Testing \u00b6 func TestCompleteWorkflow ( t * testing . T ) { // Test the complete workflow with validation questionSet , err := createTestQuestionSet () if err != nil { t . Fatalf ( \"Failed to create question set: %v\" , err ) } // Validate content if err := questionSet . Validate (); err != nil { t . Fatalf ( \"Question set validation failed: %v\" , err ) } // Create package pkg := h5p . NewH5PPackage () pkg . SetContent ( & h5p . Content { Params : questionSet }) // Validate package if err := pkg . Validate (); err != nil { t . Fatalf ( \"Package validation failed: %v\" , err ) } // Export should succeed tempFile := filepath . Join ( t . TempDir (), \"test.h5p\" ) if err := pkg . CreateZipFile ( tempFile ); err != nil { t . Fatalf ( \"Failed to export package: %v\" , err ) } // Re-load and validate loadedPkg , err := h5p . LoadH5PPackage ( tempFile ) if err != nil { t . Fatalf ( \"Failed to load package: %v\" , err ) } if err := loadedPkg . Validate (); err != nil { t . Fatalf ( \"Loaded package validation failed: %v\" , err ) } } Validation Checklist \u00b6 Before deploying H5P content, ensure: [ ] All required fields are populated [ ] Field values are within acceptable ranges [ ] Questions have meaningful text [ ] At least one correct answer per question [ ] Pass percentage is reasonable (50-90) [ ] Feedback messages are helpful and appropriate [ ] Package includes all required libraries [ ] Library versions are compatible [ ] No validation errors or warnings Next Steps \u00b6 Examples - See validation in practice Testing - Learn about testing strategies Standards Compliance - Official H5P specifications","title":"Validation"},{"location":"guide/validation/#validation","text":"The H5P Go SDK includes comprehensive validation to ensure your content meets H5P standards and functions correctly across platforms.","title":"Validation"},{"location":"guide/validation/#overview","text":"Validation occurs at multiple levels: - Parameter validation - Field types, required values, constraints - Structure validation - Proper relationships between components - Schema compliance - Conformance with official H5P specifications - Business logic validation - Sensible values and configurations","title":"Overview"},{"location":"guide/validation/#validation-levels","text":"","title":"Validation Levels"},{"location":"guide/validation/#content-validation","text":"// Validate question set parameters questionSet , err := builder . Build () if err != nil { // Build-time validation failed log . Fatal ( \"Build failed:\" , err ) } // Runtime validation if err := questionSet . Validate (); err != nil { // Content validation failed log . Fatal ( \"Validation failed:\" , err ) }","title":"Content Validation"},{"location":"guide/validation/#schema-validation","text":"import \"github.com/grokify/h5p-go/schemas\" // Validate typed parameters params := & schemas . MultiChoiceParams { Question : \"What is 2+2?\" , Answers : [] schemas . AnswerOption { { Text : \"4\" , Correct : true }, }, } if err := params . Validate (); err != nil { log . Fatal ( \"Schema validation failed:\" , err ) }","title":"Schema Validation"},{"location":"guide/validation/#package-validation","text":"// Validate complete H5P package pkg := h5p . NewH5PPackage () // ... configure package ... if err := pkg . Validate (); err != nil { log . Fatal ( \"Package validation failed:\" , err ) }","title":"Package Validation"},{"location":"guide/validation/#common-validation-rules","text":"","title":"Common Validation Rules"},{"location":"guide/validation/#question-sets","text":"Required Fields: - Title must not be empty - At least one question required - Pass percentage between 0-100 Business Logic: - Pass percentage should be reasonable (typically 50-90) - Questions should have meaningful text - Feedback ranges should not overlap // Valid question set questionSet , err := h5p . NewQuestionSetBuilder (). SetTitle ( \"My Quiz\" ). // Required SetPassPercentage ( 70 ). // 0-100 AddMultipleChoiceQuestion ( // At least 1 question \"Question text?\" , answers , ). Build ()","title":"Question Sets"},{"location":"guide/validation/#multiple-choice-questions","text":"Required Fields: - Question text must not be empty - At least 2 answers required - At least 1 correct answer required Constraints: - Maximum answer length limits - Feedback text length limits - Pass percentage 0-100 // Valid multiple choice params := & schemas . MultiChoiceParams { Question : \"What is the capital?\" , // Required, non-empty Answers : [] schemas . AnswerOption { // Min 2 answers { Text : \"Paris\" , Correct : true }, // At least 1 correct { Text : \"London\" , Correct : false }, // Text required }, } if err := params . Validate (); err != nil { // Validation failed }","title":"Multiple Choice Questions"},{"location":"guide/validation/#answer-options","text":"Rules: - Text field is required and non-empty - At least one answer must be marked correct - Feedback text has length limits // Valid answer answer := schemas . AnswerOption { Text : \"Correct Answer\" , // Required Correct : true , // At least 1 must be true TipsAndFeedback : & schemas . AnswerTipsAndFeedback { ChosenFeedback : \"Good job!\" , // Optional, but limited length }, }","title":"Answer Options"},{"location":"guide/validation/#error-types","text":"","title":"Error Types"},{"location":"guide/validation/#validation-errors","text":"The SDK provides structured validation errors: type ValidationError struct { Field string `json:\"field\"` Message string `json:\"message\"` Value interface {} `json:\"value,omitempty\"` } func ( e ValidationError ) Error () string { return fmt . Sprintf ( \"validation error on field '%s': %s\" , e . Field , e . Message ) }","title":"Validation Errors"},{"location":"guide/validation/#multiple-errors","text":"Validation can return multiple errors at once: type ValidationErrors [] ValidationError func ( e ValidationErrors ) Error () string { messages := make ([] string , len ( e )) for i , err := range e { messages [ i ] = err . Error () } return strings . Join ( messages , \"; \" ) }","title":"Multiple Errors"},{"location":"guide/validation/#error-handling","text":"questionSet , err := builder . Build () if err != nil { if validationErrors , ok := err .( h5p . ValidationErrors ); ok { fmt . Println ( \"Multiple validation errors:\" ) for _ , validationError := range validationErrors { fmt . Printf ( \"- %s: %s\\n\" , validationError . Field , validationError . Message ) } } else { fmt . Printf ( \"Build error: %s\\n\" , err ) } return }","title":"Error Handling"},{"location":"guide/validation/#custom-validation","text":"","title":"Custom Validation"},{"location":"guide/validation/#adding-custom-rules","text":"You can implement custom validation for specific use cases: func validateQuizComplexity ( questionSet * h5p . QuestionSet ) error { if len ( questionSet . Questions ) < 3 { return fmt . Errorf ( \"quiz should have at least 3 questions for proper assessment\" ) } // Check for variety in answer counts answerCounts := make ( map [ int ] int ) for _ , question := range questionSet . Questions { if params , ok := question . Params .( map [ string ] interface {}); ok { if answers , exists := params [ \"answers\" ]; exists { if answerList , ok := answers .([] interface {}); ok { answerCounts [ len ( answerList )] ++ } } } } if len ( answerCounts ) == 1 { return fmt . Errorf ( \"consider varying the number of answers for better engagement\" ) } return nil } // Use custom validation if err := validateQuizComplexity ( questionSet ); err != nil { log . Printf ( \"Warning: %s\" , err ) }","title":"Adding Custom Rules"},{"location":"guide/validation/#validation-best-practices","text":"","title":"Validation Best Practices"},{"location":"guide/validation/#1-validate-early-and-often","text":"// Validate at build time questionSet , err := builder . Build () if err != nil { return err // Fail fast } // Validate before export if err := questionSet . Validate (); err != nil { return err } // Validate before package creation if err := pkg . Validate (); err != nil { return err }","title":"1. Validate Early and Often"},{"location":"guide/validation/#2-handle-validation-gracefully","text":"func buildQuestionSet ( title string , questions [] QuestionData ) ( * h5p . QuestionSet , error ) { builder := h5p . NewQuestionSetBuilder (). SetTitle ( title ) for i , q := range questions { if q . Text == \"\" { return nil , fmt . Errorf ( \"question %d has empty text\" , i + 1 ) } if len ( q . Answers ) < 2 { return nil , fmt . Errorf ( \"question %d needs at least 2 answers\" , i + 1 ) } // Convert and add question answers := convertAnswers ( q . Answers ) builder = builder . AddMultipleChoiceQuestion ( q . Text , answers ) } return builder . Build () }","title":"2. Handle Validation Gracefully"},{"location":"guide/validation/#3-provide-meaningful-error-messages","text":"func validatePassPercentage ( percentage int ) error { if percentage < 0 || percentage > 100 { return fmt . Errorf ( \"pass percentage must be between 0 and 100, got %d\" , percentage ) } if percentage < 30 { return fmt . Errorf ( \"pass percentage %d seems too low - consider 50-80 range\" , percentage ) } if percentage > 95 { return fmt . Errorf ( \"pass percentage %d seems too high - consider 60-90 range\" , percentage ) } return nil }","title":"3. Provide Meaningful Error Messages"},{"location":"guide/validation/#testing-validation","text":"","title":"Testing Validation"},{"location":"guide/validation/#unit-testing","text":"func TestQuestionSetValidation ( t * testing . T ) { tests := [] struct { name string builder func () * h5p . QuestionSetBuilder wantError bool errorText string }{ { name : \"valid question set\" , builder : func () * h5p . QuestionSetBuilder { return h5p . NewQuestionSetBuilder (). SetTitle ( \"Test Quiz\" ). SetPassPercentage ( 70 ). AddMultipleChoiceQuestion ( \"Question?\" , validAnswers ) }, wantError : false , }, { name : \"missing title\" , builder : func () * h5p . QuestionSetBuilder { return h5p . NewQuestionSetBuilder (). SetPassPercentage ( 70 ). AddMultipleChoiceQuestion ( \"Question?\" , validAnswers ) }, wantError : true , errorText : \"title is required\" , }, { name : \"invalid pass percentage\" , builder : func () * h5p . QuestionSetBuilder { return h5p . NewQuestionSetBuilder (). SetTitle ( \"Test Quiz\" ). SetPassPercentage ( 150 ). // Invalid AddMultipleChoiceQuestion ( \"Question?\" , validAnswers ) }, wantError : true , errorText : \"pass percentage must be between 0 and 100\" , }, } for _ , tt := range tests { t . Run ( tt . name , func ( t * testing . T ) { _ , err := tt . builder (). Build () if tt . wantError { if err == nil { t . Errorf ( \"expected error but got none\" ) return } if ! strings . Contains ( err . Error (), tt . errorText ) { t . Errorf ( \"error %q should contain %q\" , err . Error (), tt . errorText ) } } else { if err != nil { t . Errorf ( \"unexpected error: %v\" , err ) } } }) } }","title":"Unit Testing"},{"location":"guide/validation/#integration-testing","text":"func TestCompleteWorkflow ( t * testing . T ) { // Test the complete workflow with validation questionSet , err := createTestQuestionSet () if err != nil { t . Fatalf ( \"Failed to create question set: %v\" , err ) } // Validate content if err := questionSet . Validate (); err != nil { t . Fatalf ( \"Question set validation failed: %v\" , err ) } // Create package pkg := h5p . NewH5PPackage () pkg . SetContent ( & h5p . Content { Params : questionSet }) // Validate package if err := pkg . Validate (); err != nil { t . Fatalf ( \"Package validation failed: %v\" , err ) } // Export should succeed tempFile := filepath . Join ( t . TempDir (), \"test.h5p\" ) if err := pkg . CreateZipFile ( tempFile ); err != nil { t . Fatalf ( \"Failed to export package: %v\" , err ) } // Re-load and validate loadedPkg , err := h5p . LoadH5PPackage ( tempFile ) if err != nil { t . Fatalf ( \"Failed to load package: %v\" , err ) } if err := loadedPkg . Validate (); err != nil { t . Fatalf ( \"Loaded package validation failed: %v\" , err ) } }","title":"Integration Testing"},{"location":"guide/validation/#validation-checklist","text":"Before deploying H5P content, ensure: [ ] All required fields are populated [ ] Field values are within acceptable ranges [ ] Questions have meaningful text [ ] At least one correct answer per question [ ] Pass percentage is reasonable (50-90) [ ] Feedback messages are helpful and appropriate [ ] Package includes all required libraries [ ] Library versions are compatible [ ] No validation errors or warnings","title":"Validation Checklist"},{"location":"guide/validation/#next-steps","text":"Examples - See validation in practice Testing - Learn about testing strategies Standards Compliance - Official H5P specifications","title":"Next Steps"},{"location":"reference/file-structure/","text":"File Structure \u00b6 H5P file format and structure reference. Coming Soon \u00b6 File structure documentation including: H5P package format Directory organization Required files and optional components Library structure Complete file structure reference coming soon!","title":"File Structure"},{"location":"reference/file-structure/#file-structure","text":"H5P file format and structure reference.","title":"File Structure"},{"location":"reference/file-structure/#coming-soon","text":"File structure documentation including: H5P package format Directory organization Required files and optional components Library structure Complete file structure reference coming soon!","title":"Coming Soon"},{"location":"reference/h5p-spec/","text":"H5P Specification \u00b6 Reference for H5P specifications and standards. Coming Soon \u00b6 H5P specification reference including: File format specifications Content type standards Validation requirements Compatibility guidelines Detailed specification documentation coming soon!","title":"H5P Specification"},{"location":"reference/h5p-spec/#h5p-specification","text":"Reference for H5P specifications and standards.","title":"H5P Specification"},{"location":"reference/h5p-spec/#coming-soon","text":"H5P specification reference including: File format specifications Content type standards Validation requirements Compatibility guidelines Detailed specification documentation coming soon!","title":"Coming Soon"},{"location":"reference/standards/","text":"Standards Compliance \u00b6 H5P standards compliance and best practices. Coming Soon \u00b6 Standards compliance documentation including: H5P specification adherence Validation requirements Cross-platform compatibility Quality assurance guidelines Standards documentation coming soon!","title":"Standards Compliance"},{"location":"reference/standards/#standards-compliance","text":"H5P standards compliance and best practices.","title":"Standards Compliance"},{"location":"reference/standards/#coming-soon","text":"Standards compliance documentation including: H5P specification adherence Validation requirements Cross-platform compatibility Quality assurance guidelines Standards documentation coming soon!","title":"Coming Soon"}]}