{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"H5P Go SDK \u00b6 A Go library for creating, manipulating, and validating H5P (HTML5 Package) content, with support for the official H5P file format and schemas. \u2728 Features \u00b6 \ud83d\udce6 Full H5P Package Support : Create and extract .h5p ZIP files with proper structure \ud83d\udd12 Type-Safe Schema Implementation : Official H5P MultiChoice schema with Go structs \ud83c\udfd7\ufe0f Question Set Builder : Fluent API for building interactive question sets \u2705 Validation : Built-in validation for H5P compliance \ud83c\udfaf Multiple Question Types : Support for single-answer and multi-answer questions \ud83d\udccb Official Schema Compliance : Uses actual H5P semantics definitions \ud83d\udd04 JSON Serialization : Full marshaling/unmarshaling support \ud83d\ude80 Quick Start \u00b6 go get github.com/grokify/h5p-go package main import ( \"fmt\" \"log\" \"github.com/grokify/h5p-go\" ) func main () { // Create a question set using the builder pattern builder := goh5p . NewQuestionSetBuilder () answers := [] goh5p . Answer { goh5p . CreateAnswer ( \"Paris\" , true ), goh5p . CreateAnswer ( \"London\" , false ), goh5p . CreateAnswer ( \"Berlin\" , false ), goh5p . CreateAnswer ( \"Madrid\" , false ), } questionSet , err := builder . SetTitle ( \"Geography Quiz\" ). SetProgressType ( \"textual\" ). SetPassPercentage ( 60 ). SetIntroduction ( \"Welcome to our geography quiz!\" ). AddMultipleChoiceQuestion ( \"What is the capital of France?\" , answers ). Build () if err != nil { log . Fatal ( err ) } // Export to JSON jsonData , _ := questionSet . ToJSON () fmt . Printf ( \"Generated H5P Question Set:\\n%s\\n\" , string ( jsonData )) } \ud83d\udcda What's Next? \u00b6 Installation Guide - Detailed installation instructions Quick Start Tutorial - Step-by-step tutorial Basic Concepts - Understanding H5P and this library User Guide - Comprehensive usage documentation API Reference - Complete API documentation Examples - Real-world usage examples \ud83c\udfdb\ufe0f Architecture \u00b6 The H5P Go SDK is organized into several key components: Core Types ( questionset.go , h5p_package.go ) - Fundamental data structures Builder Pattern ( builder.go ) - Fluent API for creating content Official Schemas ( schemas/ ) - Type-safe H5P content type definitions Semantics Engine ( semantics/ ) - Universal H5P semantics format support Package Management - Full .h5p file creation and extraction \ud83d\udd27 Key Capabilities \u00b6 Question Sets \u00b6 Build interactive question sets with multiple question types, scoring, and rich feedback systems. Type-Safe Schemas \u00b6 Work with official H5P content type schemas using strongly-typed Go structs. H5P Package Management \u00b6 Create, modify, and validate complete H5P packages ready for deployment. Standards Compliance \u00b6 Full compliance with official H5P specifications and content type definitions. \ud83e\udd1d Contributing \u00b6 We welcome contributions! See our Contributing Guide for details. \ud83d\udcdc License \u00b6 This project is licensed under the MIT License - see the LICENSE file for details.","title":"Home"},{"location":"#h5p-go-sdk","text":"A Go library for creating, manipulating, and validating H5P (HTML5 Package) content, with support for the official H5P file format and schemas.","title":"H5P Go SDK"},{"location":"#features","text":"\ud83d\udce6 Full H5P Package Support : Create and extract .h5p ZIP files with proper structure \ud83d\udd12 Type-Safe Schema Implementation : Official H5P MultiChoice schema with Go structs \ud83c\udfd7\ufe0f Question Set Builder : Fluent API for building interactive question sets \u2705 Validation : Built-in validation for H5P compliance \ud83c\udfaf Multiple Question Types : Support for single-answer and multi-answer questions \ud83d\udccb Official Schema Compliance : Uses actual H5P semantics definitions \ud83d\udd04 JSON Serialization : Full marshaling/unmarshaling support","title":"\u2728 Features"},{"location":"#quick-start","text":"go get github.com/grokify/h5p-go package main import ( \"fmt\" \"log\" \"github.com/grokify/h5p-go\" ) func main () { // Create a question set using the builder pattern builder := goh5p . NewQuestionSetBuilder () answers := [] goh5p . Answer { goh5p . CreateAnswer ( \"Paris\" , true ), goh5p . CreateAnswer ( \"London\" , false ), goh5p . CreateAnswer ( \"Berlin\" , false ), goh5p . CreateAnswer ( \"Madrid\" , false ), } questionSet , err := builder . SetTitle ( \"Geography Quiz\" ). SetProgressType ( \"textual\" ). SetPassPercentage ( 60 ). SetIntroduction ( \"Welcome to our geography quiz!\" ). AddMultipleChoiceQuestion ( \"What is the capital of France?\" , answers ). Build () if err != nil { log . Fatal ( err ) } // Export to JSON jsonData , _ := questionSet . ToJSON () fmt . Printf ( \"Generated H5P Question Set:\\n%s\\n\" , string ( jsonData )) }","title":"\ud83d\ude80 Quick Start"},{"location":"#whats-next","text":"Installation Guide - Detailed installation instructions Quick Start Tutorial - Step-by-step tutorial Basic Concepts - Understanding H5P and this library User Guide - Comprehensive usage documentation API Reference - Complete API documentation Examples - Real-world usage examples","title":"\ud83d\udcda What's Next?"},{"location":"#architecture","text":"The H5P Go SDK is organized into several key components: Core Types ( questionset.go , h5p_package.go ) - Fundamental data structures Builder Pattern ( builder.go ) - Fluent API for creating content Official Schemas ( schemas/ ) - Type-safe H5P content type definitions Semantics Engine ( semantics/ ) - Universal H5P semantics format support Package Management - Full .h5p file creation and extraction","title":"\ud83c\udfdb\ufe0f Architecture"},{"location":"#key-capabilities","text":"","title":"\ud83d\udd27 Key Capabilities"},{"location":"#question-sets","text":"Build interactive question sets with multiple question types, scoring, and rich feedback systems.","title":"Question Sets"},{"location":"#type-safe-schemas","text":"Work with official H5P content type schemas using strongly-typed Go structs.","title":"Type-Safe Schemas"},{"location":"#h5p-package-management","text":"Create, modify, and validate complete H5P packages ready for deployment.","title":"H5P Package Management"},{"location":"#standards-compliance","text":"Full compliance with official H5P specifications and content type definitions.","title":"Standards Compliance"},{"location":"#contributing","text":"We welcome contributions! See our Contributing Guide for details.","title":"\ud83e\udd1d Contributing"},{"location":"#license","text":"This project is licensed under the MIT License - see the LICENSE file for details.","title":"\ud83d\udcdc License"},{"location":"why-h5p-for-quizzes/","text":"WHy H5P for Quizzes? \u00b6 H5P has become a popular way to represent quiz and assessment information, and here\u2019s why it\u2019s a good option for your use case: 1. Structured but Lightweight \u00b6 H5P packages are just zip files containing JSON ( content.json , semantics.json ) and assets. Much simpler to handle than XML-based standards like QTI. Easy to parse in any modern language (Go, Python, JS, etc.) and store in databases. 2. Flexible Question Types \u00b6 Out of the box, H5P supports many quiz and interaction types : multiple choice, fill-in-the-blank, drag-and-drop, true/false, summary, interactive video quizzes, etc. Each type is defined by a semantics.json schema, so the data format is consistent and validated. 3. Open and Extensible \u00b6 Fully open-source under MIT license. Developers can create new content types by defining their own semantics.json . Easy to extend for custom question types or metadata you may need in a question bank. 4. Widely Supported \u00b6 Works in popular LMS/CMS like Moodle, WordPress, Drupal. Many e-learning platforms already support H5P import/export. Good community and ecosystem (compared to rolling your own schema). 5. Human-Friendly JSON \u00b6 Example from H5P Multiple Choice ( content.json ): { \"question\" : \"What is 2 + 2?\" , \"answers\" : [ { \"text\" : \"3\" , \"correct\" : false }, { \"text\" : \"4\" , \"correct\" : true }, { \"text\" : \"5\" , \"correct\" : false } ], \"behaviour\" : { \"singleAnswer\" : true , \"randomAnswers\" : true } } This is straightforward to read, write, and validate \u2014 much cleaner than QTI XML. 6. Future-Proof with Interoperability \u00b6 You can start with H5P JSON for ease of use . Later, you can map to QTI if you need LMS-grade interoperability (since question/answer/feedback concepts map pretty well). You can also integrate with xAPI for tracking learner interactions. \u2705 In short: H5P is a great option because it balances developer-friendliness (JSON, open source) with educational robustness (rich quiz types, LMS support) . It\u2019s an approachable starting point for a question bank schema, while still leaving the door open to more formal standards like QTI if needed.","title":"WHy H5P for Quizzes?"},{"location":"why-h5p-for-quizzes/#why-h5p-for-quizzes","text":"H5P has become a popular way to represent quiz and assessment information, and here\u2019s why it\u2019s a good option for your use case:","title":"WHy H5P for Quizzes?"},{"location":"why-h5p-for-quizzes/#1-structured-but-lightweight","text":"H5P packages are just zip files containing JSON ( content.json , semantics.json ) and assets. Much simpler to handle than XML-based standards like QTI. Easy to parse in any modern language (Go, Python, JS, etc.) and store in databases.","title":"1. Structured but Lightweight"},{"location":"why-h5p-for-quizzes/#2-flexible-question-types","text":"Out of the box, H5P supports many quiz and interaction types : multiple choice, fill-in-the-blank, drag-and-drop, true/false, summary, interactive video quizzes, etc. Each type is defined by a semantics.json schema, so the data format is consistent and validated.","title":"2. Flexible Question Types"},{"location":"why-h5p-for-quizzes/#3-open-and-extensible","text":"Fully open-source under MIT license. Developers can create new content types by defining their own semantics.json . Easy to extend for custom question types or metadata you may need in a question bank.","title":"3. Open and Extensible"},{"location":"why-h5p-for-quizzes/#4-widely-supported","text":"Works in popular LMS/CMS like Moodle, WordPress, Drupal. Many e-learning platforms already support H5P import/export. Good community and ecosystem (compared to rolling your own schema).","title":"4. Widely Supported"},{"location":"why-h5p-for-quizzes/#5-human-friendly-json","text":"Example from H5P Multiple Choice ( content.json ): { \"question\" : \"What is 2 + 2?\" , \"answers\" : [ { \"text\" : \"3\" , \"correct\" : false }, { \"text\" : \"4\" , \"correct\" : true }, { \"text\" : \"5\" , \"correct\" : false } ], \"behaviour\" : { \"singleAnswer\" : true , \"randomAnswers\" : true } } This is straightforward to read, write, and validate \u2014 much cleaner than QTI XML.","title":"5. Human-Friendly JSON"},{"location":"why-h5p-for-quizzes/#6-future-proof-with-interoperability","text":"You can start with H5P JSON for ease of use . Later, you can map to QTI if you need LMS-grade interoperability (since question/answer/feedback concepts map pretty well). You can also integrate with xAPI for tracking learner interactions. \u2705 In short: H5P is a great option because it balances developer-friendliness (JSON, open source) with educational robustness (rich quiz types, LMS support) . It\u2019s an approachable starting point for a question bank schema, while still leaving the door open to more formal standards like QTI if needed.","title":"6. Future-Proof with Interoperability"},{"location":"api/semantics/","text":"Semantics API \u00b6 The semantics package provides a Go implementation of the H5P semantics format, which is used to define form fields, validation rules, and UI behaviors for H5P content types. Overview \u00b6 H5P semantics are JSON schemas that describe how content types should be configured and validated. The semantics package converts these JSON definitions into type-safe Go structs. Core Types \u00b6 Field \u00b6 The Field struct represents a single field in an H5P semantics definition: type Field struct { Name string `json:\"name,omitempty\"` Type string `json:\"type\"` Label string `json:\"label,omitempty\"` Description string `json:\"description,omitempty\"` Importance string `json:\"importance,omitempty\"` Optional bool `json:\"optional,omitempty\"` Default interface {} `json:\"default,omitempty\"` // Polymorphic options field Options interface {} `json:\"options,omitempty\"` // Type-specific fields... } SelectOption \u00b6 Represents an option in a select field: type SelectOption struct { Value string `json:\"value\"` Label string `json:\"label\"` } SemanticDefinition \u00b6 The top-level semantics array: type SemanticDefinition [] Field Polymorphic Options Field \u00b6 The semantics implementation handles H5P's polymorphic use of the \"options\" field, which serves different purposes depending on the field type. Problem \u00b6 In H5P semantics, the same JSON field name \"options\" is used for two completely different data structures: Select fields : Array of objects with \"value\" and \"label\" properties Library fields : Array of library names/versions as strings Solution \u00b6 The Go implementation uses a single Options interface{} field with helper methods for type-safe access: // Field has a polymorphic Options field type Field struct { Options interface {} `json:\"options,omitempty\"` // ... } Helper Methods \u00b6 GetSelectOptions() \u00b6 Retrieves options for select field types: func ( f * Field ) GetSelectOptions () [] SelectOption Example: field := Field { Type : \"select\" , Options : [] interface {}{ map [ string ] interface {}{ \"value\" : \"true\" , \"label\" : \"True\" , }, map [ string ] interface {}{ \"value\" : \"false\" , \"label\" : \"False\" , }, }, } selectOptions := field . GetSelectOptions () if selectOptions != nil { for _ , opt := range selectOptions { fmt . Printf ( \"Value: %s, Label: %s\\n\" , opt . Value , opt . Label ) } } GetLibraryOptions() \u00b6 Retrieves options for library field types: func ( f * Field ) GetLibraryOptions () [] string Example: field := Field { Type : \"library\" , Options : [] interface {}{ \"H5P.MultiChoice 1.16\" , \"H5P.TrueFalse 1.8\" , }, } libraryOptions := field . GetLibraryOptions () if libraryOptions != nil { for _ , lib := range libraryOptions { fmt . Printf ( \"Available library: %s\\n\" , lib ) } } SetSelectOptions() \u00b6 Sets options for select fields: func ( f * Field ) SetSelectOptions ( options [] SelectOption ) Example: field := & Field { Type : \"select\" } field . SetSelectOptions ([] SelectOption { { Value : \"small\" , Label : \"Small\" }, { Value : \"medium\" , Label : \"Medium\" }, { Value : \"large\" , Label : \"Large\" }, }) SetLibraryOptions() \u00b6 Sets options for library fields: func ( f * Field ) SetLibraryOptions ( options [] string ) Example: field := & Field { Type : \"library\" } field . SetLibraryOptions ([] string { \"H5P.MultiChoice 1.16\" , \"H5P.Essay 1.5\" , \"H5P.TrueFalse 1.8\" , }) Field Types \u00b6 The semantics format supports various field types: Basic Types \u00b6 text - Text input fields number - Numeric input fields boolean - Checkbox fields select - Dropdown selection fields Complex Types \u00b6 group - Groups of related fields list - Dynamic arrays of items library - Content type selection fields Example Field Definitions \u00b6 Text Field: field := Field { Name : \"title\" , Type : \"text\" , Label : \"Title\" , Description : \"Enter a title for your content\" , Importance : \"high\" , MaxLength : 100 , } Select Field: field := Field { Name : \"size\" , Type : \"select\" , Label : \"Size\" , } field . SetSelectOptions ([] SelectOption { { Value : \"small\" , Label : \"Small\" }, { Value : \"large\" , Label : \"Large\" }, }) Library Field: field := Field { Name : \"content\" , Type : \"library\" , Label : \"Content Type\" , } field . SetLibraryOptions ([] string { \"H5P.MultiChoice 1.16\" , \"H5P.TrueFalse 1.8\" , }) Type Validation \u00b6 The helper methods include built-in validation: GetSelectOptions() returns nil if options are not in select format GetLibraryOptions() returns nil if options are not in library format Methods handle both JSON unmarshaling ( []interface{} ) and direct assignment scenarios // Safe usage pattern field := loadFieldFromJSON ( data ) if selectOptions := field . GetSelectOptions (); selectOptions != nil { // Handle as select field processSelectField ( selectOptions ) } else if libraryOptions := field . GetLibraryOptions (); libraryOptions != nil { // Handle as library field processLibraryField ( libraryOptions ) } else { // Handle other field types or invalid options handleOtherFieldType ( field ) } Advanced Usage \u00b6 Loading from JSON \u00b6 func loadSemantics ( jsonData [] byte ) ( SemanticDefinition , error ) { var semantics SemanticDefinition err := json . Unmarshal ( jsonData , & semantics ) if err != nil { return nil , err } return semantics , nil } Iterating Through Fields \u00b6 func processSemantics ( semantics SemanticDefinition ) { for _ , field := range semantics { fmt . Printf ( \"Processing field: %s (type: %s)\\n\" , field . Name , field . Type ) switch field . Type { case \"select\" : if opts := field . GetSelectOptions (); opts != nil { fmt . Printf ( \" Select options: %d choices\\n\" , len ( opts )) } case \"library\" : if libs := field . GetLibraryOptions (); libs != nil { fmt . Printf ( \" Library options: %d libraries\\n\" , len ( libs )) } case \"group\" : if field . Fields != nil { fmt . Printf ( \" Group with %d sub-fields\\n\" , len ( field . Fields )) } } } } Standards Compliance \u00b6 The semantics implementation follows the official H5P semantics specification: H5P Semantics Documentation H5P Content Type Development The implementation handles all standard H5P semantic field types and attributes while providing type safety and validation in Go.","title":"Semantics"},{"location":"api/semantics/#semantics-api","text":"The semantics package provides a Go implementation of the H5P semantics format, which is used to define form fields, validation rules, and UI behaviors for H5P content types.","title":"Semantics API"},{"location":"api/semantics/#overview","text":"H5P semantics are JSON schemas that describe how content types should be configured and validated. The semantics package converts these JSON definitions into type-safe Go structs.","title":"Overview"},{"location":"api/semantics/#core-types","text":"","title":"Core Types"},{"location":"api/semantics/#field","text":"The Field struct represents a single field in an H5P semantics definition: type Field struct { Name string `json:\"name,omitempty\"` Type string `json:\"type\"` Label string `json:\"label,omitempty\"` Description string `json:\"description,omitempty\"` Importance string `json:\"importance,omitempty\"` Optional bool `json:\"optional,omitempty\"` Default interface {} `json:\"default,omitempty\"` // Polymorphic options field Options interface {} `json:\"options,omitempty\"` // Type-specific fields... }","title":"Field"},{"location":"api/semantics/#selectoption","text":"Represents an option in a select field: type SelectOption struct { Value string `json:\"value\"` Label string `json:\"label\"` }","title":"SelectOption"},{"location":"api/semantics/#semanticdefinition","text":"The top-level semantics array: type SemanticDefinition [] Field","title":"SemanticDefinition"},{"location":"api/semantics/#polymorphic-options-field","text":"The semantics implementation handles H5P's polymorphic use of the \"options\" field, which serves different purposes depending on the field type.","title":"Polymorphic Options Field"},{"location":"api/semantics/#problem","text":"In H5P semantics, the same JSON field name \"options\" is used for two completely different data structures: Select fields : Array of objects with \"value\" and \"label\" properties Library fields : Array of library names/versions as strings","title":"Problem"},{"location":"api/semantics/#solution","text":"The Go implementation uses a single Options interface{} field with helper methods for type-safe access: // Field has a polymorphic Options field type Field struct { Options interface {} `json:\"options,omitempty\"` // ... }","title":"Solution"},{"location":"api/semantics/#helper-methods","text":"","title":"Helper Methods"},{"location":"api/semantics/#getselectoptions","text":"Retrieves options for select field types: func ( f * Field ) GetSelectOptions () [] SelectOption Example: field := Field { Type : \"select\" , Options : [] interface {}{ map [ string ] interface {}{ \"value\" : \"true\" , \"label\" : \"True\" , }, map [ string ] interface {}{ \"value\" : \"false\" , \"label\" : \"False\" , }, }, } selectOptions := field . GetSelectOptions () if selectOptions != nil { for _ , opt := range selectOptions { fmt . Printf ( \"Value: %s, Label: %s\\n\" , opt . Value , opt . Label ) } }","title":"GetSelectOptions()"},{"location":"api/semantics/#getlibraryoptions","text":"Retrieves options for library field types: func ( f * Field ) GetLibraryOptions () [] string Example: field := Field { Type : \"library\" , Options : [] interface {}{ \"H5P.MultiChoice 1.16\" , \"H5P.TrueFalse 1.8\" , }, } libraryOptions := field . GetLibraryOptions () if libraryOptions != nil { for _ , lib := range libraryOptions { fmt . Printf ( \"Available library: %s\\n\" , lib ) } }","title":"GetLibraryOptions()"},{"location":"api/semantics/#setselectoptions","text":"Sets options for select fields: func ( f * Field ) SetSelectOptions ( options [] SelectOption ) Example: field := & Field { Type : \"select\" } field . SetSelectOptions ([] SelectOption { { Value : \"small\" , Label : \"Small\" }, { Value : \"medium\" , Label : \"Medium\" }, { Value : \"large\" , Label : \"Large\" }, })","title":"SetSelectOptions()"},{"location":"api/semantics/#setlibraryoptions","text":"Sets options for library fields: func ( f * Field ) SetLibraryOptions ( options [] string ) Example: field := & Field { Type : \"library\" } field . SetLibraryOptions ([] string { \"H5P.MultiChoice 1.16\" , \"H5P.Essay 1.5\" , \"H5P.TrueFalse 1.8\" , })","title":"SetLibraryOptions()"},{"location":"api/semantics/#field-types","text":"The semantics format supports various field types:","title":"Field Types"},{"location":"api/semantics/#basic-types","text":"text - Text input fields number - Numeric input fields boolean - Checkbox fields select - Dropdown selection fields","title":"Basic Types"},{"location":"api/semantics/#complex-types","text":"group - Groups of related fields list - Dynamic arrays of items library - Content type selection fields","title":"Complex Types"},{"location":"api/semantics/#example-field-definitions","text":"Text Field: field := Field { Name : \"title\" , Type : \"text\" , Label : \"Title\" , Description : \"Enter a title for your content\" , Importance : \"high\" , MaxLength : 100 , } Select Field: field := Field { Name : \"size\" , Type : \"select\" , Label : \"Size\" , } field . SetSelectOptions ([] SelectOption { { Value : \"small\" , Label : \"Small\" }, { Value : \"large\" , Label : \"Large\" }, }) Library Field: field := Field { Name : \"content\" , Type : \"library\" , Label : \"Content Type\" , } field . SetLibraryOptions ([] string { \"H5P.MultiChoice 1.16\" , \"H5P.TrueFalse 1.8\" , })","title":"Example Field Definitions"},{"location":"api/semantics/#type-validation","text":"The helper methods include built-in validation: GetSelectOptions() returns nil if options are not in select format GetLibraryOptions() returns nil if options are not in library format Methods handle both JSON unmarshaling ( []interface{} ) and direct assignment scenarios // Safe usage pattern field := loadFieldFromJSON ( data ) if selectOptions := field . GetSelectOptions (); selectOptions != nil { // Handle as select field processSelectField ( selectOptions ) } else if libraryOptions := field . GetLibraryOptions (); libraryOptions != nil { // Handle as library field processLibraryField ( libraryOptions ) } else { // Handle other field types or invalid options handleOtherFieldType ( field ) }","title":"Type Validation"},{"location":"api/semantics/#advanced-usage","text":"","title":"Advanced Usage"},{"location":"api/semantics/#loading-from-json","text":"func loadSemantics ( jsonData [] byte ) ( SemanticDefinition , error ) { var semantics SemanticDefinition err := json . Unmarshal ( jsonData , & semantics ) if err != nil { return nil , err } return semantics , nil }","title":"Loading from JSON"},{"location":"api/semantics/#iterating-through-fields","text":"func processSemantics ( semantics SemanticDefinition ) { for _ , field := range semantics { fmt . Printf ( \"Processing field: %s (type: %s)\\n\" , field . Name , field . Type ) switch field . Type { case \"select\" : if opts := field . GetSelectOptions (); opts != nil { fmt . Printf ( \" Select options: %d choices\\n\" , len ( opts )) } case \"library\" : if libs := field . GetLibraryOptions (); libs != nil { fmt . Printf ( \" Library options: %d libraries\\n\" , len ( libs )) } case \"group\" : if field . Fields != nil { fmt . Printf ( \" Group with %d sub-fields\\n\" , len ( field . Fields )) } } } }","title":"Iterating Through Fields"},{"location":"api/semantics/#standards-compliance","text":"The semantics implementation follows the official H5P semantics specification: H5P Semantics Documentation H5P Content Type Development The implementation handles all standard H5P semantic field types and attributes while providing type safety and validation in Go.","title":"Standards Compliance"},{"location":"getting-started/concepts/","text":"Basic Concepts \u00b6 Understanding the key concepts behind H5P and this Go SDK will help you create better interactive content. What is H5P? \u00b6 H5P (HTML5 Package) is an open-source framework for creating interactive content such as quizzes, presentations, and games. H5P content is: Reusable - Content can be embedded in multiple platforms Responsive - Works on desktop, tablet, and mobile devices Standards-based - Built on web standards (HTML5, CSS, JavaScript) Accessible - Designed with accessibility in mind Core Components \u00b6 Content Types \u00b6 H5P organizes interactive elements into content types : MultiChoice - Single or multiple answer questions TrueFalse - Simple true/false questions Essay - Open-ended text responses Question Set - Collections of questions with scoring H5P Package Structure \u00b6 An H5P package ( .h5p file) is a ZIP archive containing: package.h5p \u251c\u2500\u2500 h5p.json # Package metadata \u251c\u2500\u2500 content/ \u2502 \u2514\u2500\u2500 content.json # Content parameters \u2514\u2500\u2500 H5P.ContentType-1.0/ # Library files \u251c\u2500\u2500 library.json # Library definition \u251c\u2500\u2500 semantics.json # Content schema \u251c\u2500\u2500 js/ # JavaScript files \u2514\u2500\u2500 css/ # Stylesheet files Semantics \u00b6 Semantics define the structure and validation rules for content types. They specify: What fields are available for editing Field types (text, select, number, etc.) Validation rules and constraints UI behavior and layout SDK Architecture \u00b6 Builder Pattern \u00b6 The SDK uses the builder pattern for creating content: questionSet , err := goh5p . NewQuestionSetBuilder (). SetTitle ( \"My Quiz\" ). SetPassPercentage ( 80 ). AddMultipleChoiceQuestion ( \"Question?\" , answers ). Build () Benefits: - Fluent API - Easy to read and write - Validation - Catches errors during construction - Flexibility - Optional parameters are simple to handle Type Safety \u00b6 The SDK provides two levels of type safety: Generic Types - Work with any content type Typed Schemas - Strongly-typed for specific content types // Generic approach question := goh5p . Question { Library : \"H5P.MultiChoice 1.16\" , Params : map [ string ] interface {}{ \"question\" : \"What is 2+2?\" }, } // Typed approach params := & schemas . MultiChoiceParams { Question : \"What is 2+2?\" , Answers : [] schemas . AnswerOption { { Text : \"4\" , Correct : true }, }, } Validation \u00b6 The SDK includes comprehensive validation: Structure validation - Required fields, correct types Business logic validation - Sensible values, relationships H5P compliance - Matches official specifications Key Concepts \u00b6 Questions vs Question Sets \u00b6 Question - A single interactive element (e.g., one multiple choice question) Question Set - A collection of questions with overall scoring and feedback Parameters vs Content \u00b6 Parameters - The configuration data for content (JSON) Content - The complete H5P content including metadata and parameters Libraries vs Content Types \u00b6 Library - The code (JS/CSS) that renders content Content Type - A specific type of interactive content (MultiChoice, Essay, etc.) Working with Content \u00b6 Creating Content \u00b6 Define your content structure (questions, answers, feedback) Use the builder to construct your content Validate the result Export to JSON or H5P package Loading Content \u00b6 Parse JSON or extract H5P package Validate the loaded content Access parameters and metadata Modify as needed Best Practices \u00b6 Always validate content before deployment Use typed schemas when available for better safety Follow H5P naming conventions for compatibility Test content in H5P-compatible environments Next Steps \u00b6 Question Sets Guide - Working with question collections Typed Questions - Using type-safe schemas H5P Packages - Creating complete H5P files API Reference - Detailed API documentation","title":"Basic Concepts"},{"location":"getting-started/concepts/#basic-concepts","text":"Understanding the key concepts behind H5P and this Go SDK will help you create better interactive content.","title":"Basic Concepts"},{"location":"getting-started/concepts/#what-is-h5p","text":"H5P (HTML5 Package) is an open-source framework for creating interactive content such as quizzes, presentations, and games. H5P content is: Reusable - Content can be embedded in multiple platforms Responsive - Works on desktop, tablet, and mobile devices Standards-based - Built on web standards (HTML5, CSS, JavaScript) Accessible - Designed with accessibility in mind","title":"What is H5P?"},{"location":"getting-started/concepts/#core-components","text":"","title":"Core Components"},{"location":"getting-started/concepts/#content-types","text":"H5P organizes interactive elements into content types : MultiChoice - Single or multiple answer questions TrueFalse - Simple true/false questions Essay - Open-ended text responses Question Set - Collections of questions with scoring","title":"Content Types"},{"location":"getting-started/concepts/#h5p-package-structure","text":"An H5P package ( .h5p file) is a ZIP archive containing: package.h5p \u251c\u2500\u2500 h5p.json # Package metadata \u251c\u2500\u2500 content/ \u2502 \u2514\u2500\u2500 content.json # Content parameters \u2514\u2500\u2500 H5P.ContentType-1.0/ # Library files \u251c\u2500\u2500 library.json # Library definition \u251c\u2500\u2500 semantics.json # Content schema \u251c\u2500\u2500 js/ # JavaScript files \u2514\u2500\u2500 css/ # Stylesheet files","title":"H5P Package Structure"},{"location":"getting-started/concepts/#semantics","text":"Semantics define the structure and validation rules for content types. They specify: What fields are available for editing Field types (text, select, number, etc.) Validation rules and constraints UI behavior and layout","title":"Semantics"},{"location":"getting-started/concepts/#sdk-architecture","text":"","title":"SDK Architecture"},{"location":"getting-started/concepts/#builder-pattern","text":"The SDK uses the builder pattern for creating content: questionSet , err := goh5p . NewQuestionSetBuilder (). SetTitle ( \"My Quiz\" ). SetPassPercentage ( 80 ). AddMultipleChoiceQuestion ( \"Question?\" , answers ). Build () Benefits: - Fluent API - Easy to read and write - Validation - Catches errors during construction - Flexibility - Optional parameters are simple to handle","title":"Builder Pattern"},{"location":"getting-started/concepts/#type-safety","text":"The SDK provides two levels of type safety: Generic Types - Work with any content type Typed Schemas - Strongly-typed for specific content types // Generic approach question := goh5p . Question { Library : \"H5P.MultiChoice 1.16\" , Params : map [ string ] interface {}{ \"question\" : \"What is 2+2?\" }, } // Typed approach params := & schemas . MultiChoiceParams { Question : \"What is 2+2?\" , Answers : [] schemas . AnswerOption { { Text : \"4\" , Correct : true }, }, }","title":"Type Safety"},{"location":"getting-started/concepts/#validation","text":"The SDK includes comprehensive validation: Structure validation - Required fields, correct types Business logic validation - Sensible values, relationships H5P compliance - Matches official specifications","title":"Validation"},{"location":"getting-started/concepts/#key-concepts","text":"","title":"Key Concepts"},{"location":"getting-started/concepts/#questions-vs-question-sets","text":"Question - A single interactive element (e.g., one multiple choice question) Question Set - A collection of questions with overall scoring and feedback","title":"Questions vs Question Sets"},{"location":"getting-started/concepts/#parameters-vs-content","text":"Parameters - The configuration data for content (JSON) Content - The complete H5P content including metadata and parameters","title":"Parameters vs Content"},{"location":"getting-started/concepts/#libraries-vs-content-types","text":"Library - The code (JS/CSS) that renders content Content Type - A specific type of interactive content (MultiChoice, Essay, etc.)","title":"Libraries vs Content Types"},{"location":"getting-started/concepts/#working-with-content","text":"","title":"Working with Content"},{"location":"getting-started/concepts/#creating-content","text":"Define your content structure (questions, answers, feedback) Use the builder to construct your content Validate the result Export to JSON or H5P package","title":"Creating Content"},{"location":"getting-started/concepts/#loading-content","text":"Parse JSON or extract H5P package Validate the loaded content Access parameters and metadata Modify as needed","title":"Loading Content"},{"location":"getting-started/concepts/#best-practices","text":"Always validate content before deployment Use typed schemas when available for better safety Follow H5P naming conventions for compatibility Test content in H5P-compatible environments","title":"Best Practices"},{"location":"getting-started/concepts/#next-steps","text":"Question Sets Guide - Working with question collections Typed Questions - Using type-safe schemas H5P Packages - Creating complete H5P files API Reference - Detailed API documentation","title":"Next Steps"},{"location":"getting-started/installation/","text":"Installation \u00b6 Requirements \u00b6 Go 1.19 or later Git (for fetching the module) Install via Go Modules \u00b6 The easiest way to install the H5P Go SDK is using Go modules: go get github.com/grokify/h5p-go Verify Installation \u00b6 Create a simple test file to verify the installation: // test.go package main import ( \"fmt\" \"github.com/grokify/h5p-go\" ) func main () { builder := goh5p . NewQuestionSetBuilder () fmt . Println ( \"H5P Go SDK installed successfully!\" ) fmt . Printf ( \"Builder created: %T\\n\" , builder ) } Run the test: go run test.go You should see: H5P Go SDK installed successfully! Builder created: *goh5p.QuestionSetBuilder Development Installation \u00b6 If you want to contribute to the project or need the latest development version: git clone https://github.com/grokify/h5p-go.git cd h5p-go go mod tidy go test ./... Dependencies \u00b6 The H5P Go SDK has minimal external dependencies: Standard library packages only for core functionality No runtime dependencies for basic usage Optional dependencies for advanced features (validation, etc.) Next Steps \u00b6 Quick Start Tutorial - Your first H5P content Basic Concepts - Understanding H5P fundamentals","title":"Installation"},{"location":"getting-started/installation/#installation","text":"","title":"Installation"},{"location":"getting-started/installation/#requirements","text":"Go 1.19 or later Git (for fetching the module)","title":"Requirements"},{"location":"getting-started/installation/#install-via-go-modules","text":"The easiest way to install the H5P Go SDK is using Go modules: go get github.com/grokify/h5p-go","title":"Install via Go Modules"},{"location":"getting-started/installation/#verify-installation","text":"Create a simple test file to verify the installation: // test.go package main import ( \"fmt\" \"github.com/grokify/h5p-go\" ) func main () { builder := goh5p . NewQuestionSetBuilder () fmt . Println ( \"H5P Go SDK installed successfully!\" ) fmt . Printf ( \"Builder created: %T\\n\" , builder ) } Run the test: go run test.go You should see: H5P Go SDK installed successfully! Builder created: *goh5p.QuestionSetBuilder","title":"Verify Installation"},{"location":"getting-started/installation/#development-installation","text":"If you want to contribute to the project or need the latest development version: git clone https://github.com/grokify/h5p-go.git cd h5p-go go mod tidy go test ./...","title":"Development Installation"},{"location":"getting-started/installation/#dependencies","text":"The H5P Go SDK has minimal external dependencies: Standard library packages only for core functionality No runtime dependencies for basic usage Optional dependencies for advanced features (validation, etc.)","title":"Dependencies"},{"location":"getting-started/installation/#next-steps","text":"Quick Start Tutorial - Your first H5P content Basic Concepts - Understanding H5P fundamentals","title":"Next Steps"},{"location":"getting-started/quick-start/","text":"Quick Start \u00b6 This tutorial will guide you through creating your first H5P content using the Go SDK. Your First Question Set \u00b6 Let's create a simple geography quiz: package main import ( \"fmt\" \"log\" \"github.com/grokify/h5p-go\" ) func main () { // Create a question set builder builder := goh5p . NewQuestionSetBuilder () // Define answers for our question answers := [] goh5p . Answer { goh5p . CreateAnswer ( \"Paris\" , true ), // Correct answer goh5p . CreateAnswer ( \"London\" , false ), // Incorrect goh5p . CreateAnswer ( \"Berlin\" , false ), // Incorrect goh5p . CreateAnswer ( \"Madrid\" , false ), // Incorrect } // Build the question set questionSet , err := builder . SetTitle ( \"Geography Quiz\" ). SetProgressType ( \"textual\" ). SetPassPercentage ( 60 ). SetIntroduction ( \"Test your geography knowledge!\" ). AddMultipleChoiceQuestion ( \"What is the capital of France?\" , answers ). Build () if err != nil { log . Fatal ( err ) } // Convert to JSON jsonData , err := questionSet . ToJSON () if err != nil { log . Fatal ( err ) } fmt . Printf ( \"Created H5P Question Set:\\n%s\\n\" , string ( jsonData )) } Adding Multiple Questions \u00b6 Let's expand our quiz with more questions: func createGeographyQuiz () ( * goh5p . QuestionSet , error ) { builder := goh5p . NewQuestionSetBuilder () // Question 1: Capital of France answers1 := [] goh5p . Answer { goh5p . CreateAnswer ( \"Paris\" , true ), goh5p . CreateAnswer ( \"London\" , false ), goh5p . CreateAnswer ( \"Berlin\" , false ), goh5p . CreateAnswer ( \"Madrid\" , false ), } // Question 2: Largest country answers2 := [] goh5p . Answer { goh5p . CreateAnswer ( \"Russia\" , true ), goh5p . CreateAnswer ( \"China\" , false ), goh5p . CreateAnswer ( \"USA\" , false ), goh5p . CreateAnswer ( \"Canada\" , false ), } // Question 3: Longest river answers3 := [] goh5p . Answer { goh5p . CreateAnswer ( \"Nile\" , true ), goh5p . CreateAnswer ( \"Amazon\" , false ), goh5p . CreateAnswer ( \"Mississippi\" , false ), goh5p . CreateAnswer ( \"Yangtze\" , false ), } return builder . SetTitle ( \"World Geography Quiz\" ). SetProgressType ( \"textual\" ). SetPassPercentage ( 70 ). SetIntroduction ( \"Test your knowledge of world geography!\" ). AddMultipleChoiceQuestion ( \"What is the capital of France?\" , answers1 ). AddMultipleChoiceQuestion ( \"Which is the largest country by area?\" , answers2 ). AddMultipleChoiceQuestion ( \"What is the longest river in the world?\" , answers3 ). Build () } Adding Feedback \u00b6 Enhance the user experience with feedback based on performance: func createQuizWithFeedback () ( * goh5p . QuestionSet , error ) { builder := goh5p . NewQuestionSetBuilder () // Create feedback ranges feedbackRanges := [] goh5p . OverallFeedback { { From : 0 , To : 40 , Feedback : \"Keep studying! Geography takes practice.\" , }, { From : 41 , To : 70 , Feedback : \"Good job! You have solid geography knowledge.\" , }, { From : 71 , To : 100 , Feedback : \"Excellent! You're a geography expert!\" , }, } // Build with feedback return builder . SetTitle ( \"Geography Quiz with Feedback\" ). SetProgressType ( \"textual\" ). SetPassPercentage ( 60 ). SetIntroduction ( \"Test your geography knowledge!\" ). // ... add questions ... AddOverallFeedback ( feedbackRanges ). Build () } Validating Content \u00b6 Always validate your content before deployment: func validateAndExport ( questionSet * goh5p . QuestionSet ) error { // Validate the question set if err := questionSet . Validate (); err != nil { return fmt . Errorf ( \"validation failed: %w\" , err ) } // Export to JSON file jsonData , err := questionSet . ToJSON () if err != nil { return fmt . Errorf ( \"JSON export failed: %w\" , err ) } // Save to file err = os . WriteFile ( \"quiz.json\" , jsonData , 0644 ) if err != nil { return fmt . Errorf ( \"file write failed: %w\" , err ) } fmt . Println ( \"Quiz created and validated successfully!\" ) return nil } Complete Example \u00b6 Here's a complete working example: package main import ( \"fmt\" \"log\" \"os\" \"github.com/grokify/h5p-go\" ) func main () { // Create quiz quiz , err := createCompleteQuiz () if err != nil { log . Fatal ( err ) } // Validate and export if err := validateAndExport ( quiz ); err != nil { log . Fatal ( err ) } } func createCompleteQuiz () ( * goh5p . QuestionSet , error ) { builder := goh5p . NewQuestionSetBuilder () // Geography questions with answers questions := [] struct { question string answers [] goh5p . Answer }{ { \"What is the capital of France?\" , [] goh5p . Answer { goh5p . CreateAnswer ( \"Paris\" , true ), goh5p . CreateAnswer ( \"London\" , false ), goh5p . CreateAnswer ( \"Berlin\" , false ), goh5p . CreateAnswer ( \"Madrid\" , false ), }, }, { \"Which is the largest ocean?\" , [] goh5p . Answer { goh5p . CreateAnswer ( \"Pacific\" , true ), goh5p . CreateAnswer ( \"Atlantic\" , false ), goh5p . CreateAnswer ( \"Indian\" , false ), goh5p . CreateAnswer ( \"Arctic\" , false ), }, }, } // Start building builder = builder . SetTitle ( \"Complete Geography Quiz\" ). SetProgressType ( \"textual\" ). SetPassPercentage ( 60 ). SetIntroduction ( \"Welcome to our comprehensive geography quiz!\" ) // Add all questions for _ , q := range questions { builder = builder . AddMultipleChoiceQuestion ( q . question , q . answers ) } // Add feedback feedbackRanges := [] goh5p . OverallFeedback { { From : 0 , To : 50 , Feedback : \"Keep studying geography!\" }, { From : 51 , To : 80 , Feedback : \"Good knowledge of geography!\" }, { From : 81 , To : 100 , Feedback : \"Excellent! You're a geography expert!\" }, } return builder . AddOverallFeedback ( feedbackRanges ). Build () } func validateAndExport ( questionSet * goh5p . QuestionSet ) error { // Validate if err := questionSet . Validate (); err != nil { return err } // Export to JSON jsonData , err := questionSet . ToJSON () if err != nil { return err } // Save to file return os . WriteFile ( \"complete-quiz.json\" , jsonData , 0644 ) } What's Next? \u00b6 Now that you've created your first H5P content, explore: Basic Concepts - Understand H5P fundamentals Question Sets Guide - Advanced question set features Typed Questions - Using type-safe schemas Validation - Ensuring content quality","title":"Quick Start"},{"location":"getting-started/quick-start/#quick-start","text":"This tutorial will guide you through creating your first H5P content using the Go SDK.","title":"Quick Start"},{"location":"getting-started/quick-start/#your-first-question-set","text":"Let's create a simple geography quiz: package main import ( \"fmt\" \"log\" \"github.com/grokify/h5p-go\" ) func main () { // Create a question set builder builder := goh5p . NewQuestionSetBuilder () // Define answers for our question answers := [] goh5p . Answer { goh5p . CreateAnswer ( \"Paris\" , true ), // Correct answer goh5p . CreateAnswer ( \"London\" , false ), // Incorrect goh5p . CreateAnswer ( \"Berlin\" , false ), // Incorrect goh5p . CreateAnswer ( \"Madrid\" , false ), // Incorrect } // Build the question set questionSet , err := builder . SetTitle ( \"Geography Quiz\" ). SetProgressType ( \"textual\" ). SetPassPercentage ( 60 ). SetIntroduction ( \"Test your geography knowledge!\" ). AddMultipleChoiceQuestion ( \"What is the capital of France?\" , answers ). Build () if err != nil { log . Fatal ( err ) } // Convert to JSON jsonData , err := questionSet . ToJSON () if err != nil { log . Fatal ( err ) } fmt . Printf ( \"Created H5P Question Set:\\n%s\\n\" , string ( jsonData )) }","title":"Your First Question Set"},{"location":"getting-started/quick-start/#adding-multiple-questions","text":"Let's expand our quiz with more questions: func createGeographyQuiz () ( * goh5p . QuestionSet , error ) { builder := goh5p . NewQuestionSetBuilder () // Question 1: Capital of France answers1 := [] goh5p . Answer { goh5p . CreateAnswer ( \"Paris\" , true ), goh5p . CreateAnswer ( \"London\" , false ), goh5p . CreateAnswer ( \"Berlin\" , false ), goh5p . CreateAnswer ( \"Madrid\" , false ), } // Question 2: Largest country answers2 := [] goh5p . Answer { goh5p . CreateAnswer ( \"Russia\" , true ), goh5p . CreateAnswer ( \"China\" , false ), goh5p . CreateAnswer ( \"USA\" , false ), goh5p . CreateAnswer ( \"Canada\" , false ), } // Question 3: Longest river answers3 := [] goh5p . Answer { goh5p . CreateAnswer ( \"Nile\" , true ), goh5p . CreateAnswer ( \"Amazon\" , false ), goh5p . CreateAnswer ( \"Mississippi\" , false ), goh5p . CreateAnswer ( \"Yangtze\" , false ), } return builder . SetTitle ( \"World Geography Quiz\" ). SetProgressType ( \"textual\" ). SetPassPercentage ( 70 ). SetIntroduction ( \"Test your knowledge of world geography!\" ). AddMultipleChoiceQuestion ( \"What is the capital of France?\" , answers1 ). AddMultipleChoiceQuestion ( \"Which is the largest country by area?\" , answers2 ). AddMultipleChoiceQuestion ( \"What is the longest river in the world?\" , answers3 ). Build () }","title":"Adding Multiple Questions"},{"location":"getting-started/quick-start/#adding-feedback","text":"Enhance the user experience with feedback based on performance: func createQuizWithFeedback () ( * goh5p . QuestionSet , error ) { builder := goh5p . NewQuestionSetBuilder () // Create feedback ranges feedbackRanges := [] goh5p . OverallFeedback { { From : 0 , To : 40 , Feedback : \"Keep studying! Geography takes practice.\" , }, { From : 41 , To : 70 , Feedback : \"Good job! You have solid geography knowledge.\" , }, { From : 71 , To : 100 , Feedback : \"Excellent! You're a geography expert!\" , }, } // Build with feedback return builder . SetTitle ( \"Geography Quiz with Feedback\" ). SetProgressType ( \"textual\" ). SetPassPercentage ( 60 ). SetIntroduction ( \"Test your geography knowledge!\" ). // ... add questions ... AddOverallFeedback ( feedbackRanges ). Build () }","title":"Adding Feedback"},{"location":"getting-started/quick-start/#validating-content","text":"Always validate your content before deployment: func validateAndExport ( questionSet * goh5p . QuestionSet ) error { // Validate the question set if err := questionSet . Validate (); err != nil { return fmt . Errorf ( \"validation failed: %w\" , err ) } // Export to JSON file jsonData , err := questionSet . ToJSON () if err != nil { return fmt . Errorf ( \"JSON export failed: %w\" , err ) } // Save to file err = os . WriteFile ( \"quiz.json\" , jsonData , 0644 ) if err != nil { return fmt . Errorf ( \"file write failed: %w\" , err ) } fmt . Println ( \"Quiz created and validated successfully!\" ) return nil }","title":"Validating Content"},{"location":"getting-started/quick-start/#complete-example","text":"Here's a complete working example: package main import ( \"fmt\" \"log\" \"os\" \"github.com/grokify/h5p-go\" ) func main () { // Create quiz quiz , err := createCompleteQuiz () if err != nil { log . Fatal ( err ) } // Validate and export if err := validateAndExport ( quiz ); err != nil { log . Fatal ( err ) } } func createCompleteQuiz () ( * goh5p . QuestionSet , error ) { builder := goh5p . NewQuestionSetBuilder () // Geography questions with answers questions := [] struct { question string answers [] goh5p . Answer }{ { \"What is the capital of France?\" , [] goh5p . Answer { goh5p . CreateAnswer ( \"Paris\" , true ), goh5p . CreateAnswer ( \"London\" , false ), goh5p . CreateAnswer ( \"Berlin\" , false ), goh5p . CreateAnswer ( \"Madrid\" , false ), }, }, { \"Which is the largest ocean?\" , [] goh5p . Answer { goh5p . CreateAnswer ( \"Pacific\" , true ), goh5p . CreateAnswer ( \"Atlantic\" , false ), goh5p . CreateAnswer ( \"Indian\" , false ), goh5p . CreateAnswer ( \"Arctic\" , false ), }, }, } // Start building builder = builder . SetTitle ( \"Complete Geography Quiz\" ). SetProgressType ( \"textual\" ). SetPassPercentage ( 60 ). SetIntroduction ( \"Welcome to our comprehensive geography quiz!\" ) // Add all questions for _ , q := range questions { builder = builder . AddMultipleChoiceQuestion ( q . question , q . answers ) } // Add feedback feedbackRanges := [] goh5p . OverallFeedback { { From : 0 , To : 50 , Feedback : \"Keep studying geography!\" }, { From : 51 , To : 80 , Feedback : \"Good knowledge of geography!\" }, { From : 81 , To : 100 , Feedback : \"Excellent! You're a geography expert!\" }, } return builder . AddOverallFeedback ( feedbackRanges ). Build () } func validateAndExport ( questionSet * goh5p . QuestionSet ) error { // Validate if err := questionSet . Validate (); err != nil { return err } // Export to JSON jsonData , err := questionSet . ToJSON () if err != nil { return err } // Save to file return os . WriteFile ( \"complete-quiz.json\" , jsonData , 0644 ) }","title":"Complete Example"},{"location":"getting-started/quick-start/#whats-next","text":"Now that you've created your first H5P content, explore: Basic Concepts - Understand H5P fundamentals Question Sets Guide - Advanced question set features Typed Questions - Using type-safe schemas Validation - Ensuring content quality","title":"What's Next?"}]}